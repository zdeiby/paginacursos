{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events');\nconst SMTPConnection = require('../smtp-connection');\nconst wellKnown = require('../well-known');\nconst shared = require('../shared');\nconst XOAuth2 = require('../xoauth2');\nconst packageData = require('../../package.json');\n\n/**\n * Creates a SMTP transport object for Nodemailer\n *\n * @constructor\n * @param {Object} options Connection options\n */\nclass SMTPTransport extends EventEmitter {\n  constructor(options) {\n    super();\n    options = options || {};\n    if (typeof options === 'string') {\n      options = {\n        url: options\n      };\n    }\n    let urlData;\n    let service = options.service;\n    if (typeof options.getSocket === 'function') {\n      this.getSocket = options.getSocket;\n    }\n    if (options.url) {\n      urlData = shared.parseConnectionUrl(options.url);\n      service = service || urlData.service;\n    }\n    this.options = shared.assign(false,\n    // create new object\n    options,\n    // regular options\n    urlData,\n    // url options\n    service && wellKnown(service) // wellknown options\n    );\n\n    this.logger = shared.getLogger(this.options, {\n      component: this.options.component || 'smtp-transport'\n    });\n\n    // temporary object\n    let connection = new SMTPConnection(this.options);\n    this.name = 'SMTP';\n    this.version = packageData.version + '[client:' + connection.version + ']';\n    if (this.options.auth) {\n      this.auth = this.getAuth({});\n    }\n  }\n\n  /**\n   * Placeholder function for creating proxy sockets. This method immediatelly returns\n   * without a socket\n   *\n   * @param {Object} options Connection options\n   * @param {Function} callback Callback function to run with the socket keys\n   */\n  getSocket(options, callback) {\n    // return immediatelly\n    return setImmediate(() => callback(null, false));\n  }\n  getAuth(authOpts) {\n    if (!authOpts) {\n      return this.auth;\n    }\n    let hasAuth = false;\n    let authData = {};\n    if (this.options.auth && typeof this.options.auth === 'object') {\n      Object.keys(this.options.auth).forEach(key => {\n        hasAuth = true;\n        authData[key] = this.options.auth[key];\n      });\n    }\n    if (authOpts && typeof authOpts === 'object') {\n      Object.keys(authOpts).forEach(key => {\n        hasAuth = true;\n        authData[key] = authOpts[key];\n      });\n    }\n    if (!hasAuth) {\n      return false;\n    }\n    switch ((authData.type || '').toString().toUpperCase()) {\n      case 'OAUTH2':\n        {\n          if (!authData.service && !authData.user) {\n            return false;\n          }\n          let oauth2 = new XOAuth2(authData, this.logger);\n          oauth2.provisionCallback = this.mailer && this.mailer.get('oauth2_provision_cb') || oauth2.provisionCallback;\n          oauth2.on('token', token => this.mailer.emit('token', token));\n          oauth2.on('error', err => this.emit('error', err));\n          return {\n            type: 'OAUTH2',\n            user: authData.user,\n            oauth2,\n            method: 'XOAUTH2'\n          };\n        }\n      default:\n        return {\n          type: (authData.type || '').toString().toUpperCase() || 'LOGIN',\n          user: authData.user,\n          credentials: {\n            user: authData.user || '',\n            pass: authData.pass,\n            options: authData.options\n          },\n          method: (authData.method || '').trim().toUpperCase() || this.options.authMethod || false\n        };\n    }\n  }\n\n  /**\n   * Sends an e-mail using the selected settings\n   *\n   * @param {Object} mail Mail object\n   * @param {Function} callback Callback function\n   */\n  send(mail, callback) {\n    this.getSocket(this.options, (err, socketOptions) => {\n      if (err) {\n        return callback(err);\n      }\n      let returned = false;\n      let options = this.options;\n      if (socketOptions && socketOptions.connection) {\n        this.logger.info({\n          tnx: 'proxy',\n          remoteAddress: socketOptions.connection.remoteAddress,\n          remotePort: socketOptions.connection.remotePort,\n          destHost: options.host || '',\n          destPort: options.port || '',\n          action: 'connected'\n        }, 'Using proxied socket from %s:%s to %s:%s', socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || '', options.port || '');\n\n        // only copy options if we need to modify it\n        options = shared.assign(false, options);\n        Object.keys(socketOptions).forEach(key => {\n          options[key] = socketOptions[key];\n        });\n      }\n      let connection = new SMTPConnection(options);\n      connection.once('error', err => {\n        if (returned) {\n          return;\n        }\n        returned = true;\n        connection.close();\n        return callback(err);\n      });\n      connection.once('end', () => {\n        if (returned) {\n          return;\n        }\n        let timer = setTimeout(() => {\n          if (returned) {\n            return;\n          }\n          returned = true;\n          // still have not returned, this means we have an unexpected connection close\n          let err = new Error('Unexpected socket close');\n          if (connection && connection._socket && connection._socket.upgrading) {\n            // starttls connection errors\n            err.code = 'ETLS';\n          }\n          callback(err);\n        }, 1000);\n        try {\n          timer.unref();\n        } catch (E) {\n          // Ignore. Happens on envs with non-node timer implementation\n        }\n      });\n      let sendMessage = () => {\n        let envelope = mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n          recipients.push('...and ' + recipients.splice(2).length + ' more');\n        }\n        if (mail.data.dsn) {\n          envelope.dsn = mail.data.dsn;\n        }\n        this.logger.info({\n          tnx: 'send',\n          messageId\n        }, 'Sending message %s to <%s>', messageId, recipients.join(', '));\n        connection.send(envelope, mail.message.createReadStream(), (err, info) => {\n          returned = true;\n          connection.close();\n          if (err) {\n            this.logger.error({\n              err,\n              tnx: 'send'\n            }, 'Send error for %s: %s', messageId, err.message);\n            return callback(err);\n          }\n          info.envelope = {\n            from: envelope.from,\n            to: envelope.to\n          };\n          info.messageId = messageId;\n          try {\n            return callback(null, info);\n          } catch (E) {\n            this.logger.error({\n              err: E,\n              tnx: 'callback'\n            }, 'Callback error for %s: %s', messageId, E.message);\n          }\n        });\n      };\n      connection.connect(() => {\n        if (returned) {\n          return;\n        }\n        let auth = this.getAuth(mail.data.auth);\n        if (auth && (connection.allowsAuth || options.forceAuth)) {\n          connection.login(auth, err => {\n            if (auth && auth !== this.auth && auth.oauth2) {\n              auth.oauth2.removeAllListeners();\n            }\n            if (returned) {\n              return;\n            }\n            if (err) {\n              returned = true;\n              connection.close();\n              return callback(err);\n            }\n            sendMessage();\n          });\n        } else {\n          sendMessage();\n        }\n      });\n    });\n  }\n\n  /**\n   * Verifies SMTP configuration\n   *\n   * @param {Function} callback Callback function\n   */\n  verify(callback) {\n    let promise;\n    if (!callback) {\n      promise = new Promise((resolve, reject) => {\n        callback = shared.callbackPromise(resolve, reject);\n      });\n    }\n    this.getSocket(this.options, (err, socketOptions) => {\n      if (err) {\n        return callback(err);\n      }\n      let options = this.options;\n      if (socketOptions && socketOptions.connection) {\n        this.logger.info({\n          tnx: 'proxy',\n          remoteAddress: socketOptions.connection.remoteAddress,\n          remotePort: socketOptions.connection.remotePort,\n          destHost: options.host || '',\n          destPort: options.port || '',\n          action: 'connected'\n        }, 'Using proxied socket from %s:%s to %s:%s', socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || '', options.port || '');\n        options = shared.assign(false, options);\n        Object.keys(socketOptions).forEach(key => {\n          options[key] = socketOptions[key];\n        });\n      }\n      let connection = new SMTPConnection(options);\n      let returned = false;\n      connection.once('error', err => {\n        if (returned) {\n          return;\n        }\n        returned = true;\n        connection.close();\n        return callback(err);\n      });\n      connection.once('end', () => {\n        if (returned) {\n          return;\n        }\n        returned = true;\n        return callback(new Error('Connection closed'));\n      });\n      let finalize = () => {\n        if (returned) {\n          return;\n        }\n        returned = true;\n        connection.quit();\n        return callback(null, true);\n      };\n      connection.connect(() => {\n        if (returned) {\n          return;\n        }\n        let authData = this.getAuth({});\n        if (authData && (connection.allowsAuth || options.forceAuth)) {\n          connection.login(authData, err => {\n            if (returned) {\n              return;\n            }\n            if (err) {\n              returned = true;\n              connection.close();\n              return callback(err);\n            }\n            finalize();\n          });\n        } else if (!authData && connection.allowsAuth && options.forceAuth) {\n          let err = new Error('Authentication info was not provided');\n          err.code = 'NoAuth';\n          returned = true;\n          connection.close();\n          return callback(err);\n        } else {\n          finalize();\n        }\n      });\n    });\n    return promise;\n  }\n\n  /**\n   * Releases resources\n   */\n  close() {\n    if (this.auth && this.auth.oauth2) {\n      this.auth.oauth2.removeAllListeners();\n    }\n    this.emit('close');\n  }\n}\n\n// expose to the world\nmodule.exports = SMTPTransport;","map":{"version":3,"names":["EventEmitter","require","SMTPConnection","wellKnown","shared","XOAuth2","packageData","SMTPTransport","constructor","options","url","urlData","service","getSocket","parseConnectionUrl","assign","logger","getLogger","component","connection","name","version","auth","getAuth","callback","setImmediate","authOpts","hasAuth","authData","Object","keys","forEach","key","type","toString","toUpperCase","user","oauth2","provisionCallback","mailer","get","on","token","emit","err","method","credentials","pass","trim","authMethod","send","mail","socketOptions","returned","info","tnx","remoteAddress","remotePort","destHost","host","destPort","port","action","once","close","timer","setTimeout","Error","_socket","upgrading","code","unref","E","sendMessage","envelope","message","getEnvelope","messageId","recipients","concat","to","length","push","splice","data","dsn","join","createReadStream","error","from","connect","allowsAuth","forceAuth","login","removeAllListeners","verify","promise","Promise","resolve","reject","callbackPromise","finalize","quit","module","exports"],"sources":["C:/Users/deiby/Desktop/cloneWebCursos/paginacursos/node_modules/nodemailer/lib/smtp-transport/index.js"],"sourcesContent":["'use strict';\n\nconst EventEmitter = require('events');\nconst SMTPConnection = require('../smtp-connection');\nconst wellKnown = require('../well-known');\nconst shared = require('../shared');\nconst XOAuth2 = require('../xoauth2');\nconst packageData = require('../../package.json');\n\n/**\n * Creates a SMTP transport object for Nodemailer\n *\n * @constructor\n * @param {Object} options Connection options\n */\nclass SMTPTransport extends EventEmitter {\n    constructor(options) {\n        super();\n\n        options = options || {};\n\n        if (typeof options === 'string') {\n            options = {\n                url: options\n            };\n        }\n\n        let urlData;\n        let service = options.service;\n\n        if (typeof options.getSocket === 'function') {\n            this.getSocket = options.getSocket;\n        }\n\n        if (options.url) {\n            urlData = shared.parseConnectionUrl(options.url);\n            service = service || urlData.service;\n        }\n\n        this.options = shared.assign(\n            false, // create new object\n            options, // regular options\n            urlData, // url options\n            service && wellKnown(service) // wellknown options\n        );\n\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || 'smtp-transport'\n        });\n\n        // temporary object\n        let connection = new SMTPConnection(this.options);\n\n        this.name = 'SMTP';\n        this.version = packageData.version + '[client:' + connection.version + ']';\n\n        if (this.options.auth) {\n            this.auth = this.getAuth({});\n        }\n    }\n\n    /**\n     * Placeholder function for creating proxy sockets. This method immediatelly returns\n     * without a socket\n     *\n     * @param {Object} options Connection options\n     * @param {Function} callback Callback function to run with the socket keys\n     */\n    getSocket(options, callback) {\n        // return immediatelly\n        return setImmediate(() => callback(null, false));\n    }\n\n    getAuth(authOpts) {\n        if (!authOpts) {\n            return this.auth;\n        }\n\n        let hasAuth = false;\n        let authData = {};\n\n        if (this.options.auth && typeof this.options.auth === 'object') {\n            Object.keys(this.options.auth).forEach(key => {\n                hasAuth = true;\n                authData[key] = this.options.auth[key];\n            });\n        }\n\n        if (authOpts && typeof authOpts === 'object') {\n            Object.keys(authOpts).forEach(key => {\n                hasAuth = true;\n                authData[key] = authOpts[key];\n            });\n        }\n\n        if (!hasAuth) {\n            return false;\n        }\n\n        switch ((authData.type || '').toString().toUpperCase()) {\n            case 'OAUTH2': {\n                if (!authData.service && !authData.user) {\n                    return false;\n                }\n                let oauth2 = new XOAuth2(authData, this.logger);\n                oauth2.provisionCallback = (this.mailer && this.mailer.get('oauth2_provision_cb')) || oauth2.provisionCallback;\n                oauth2.on('token', token => this.mailer.emit('token', token));\n                oauth2.on('error', err => this.emit('error', err));\n                return {\n                    type: 'OAUTH2',\n                    user: authData.user,\n                    oauth2,\n                    method: 'XOAUTH2'\n                };\n            }\n            default:\n                return {\n                    type: (authData.type || '').toString().toUpperCase() || 'LOGIN',\n                    user: authData.user,\n                    credentials: {\n                        user: authData.user || '',\n                        pass: authData.pass,\n                        options: authData.options\n                    },\n                    method: (authData.method || '').trim().toUpperCase() || this.options.authMethod || false\n                };\n        }\n    }\n\n    /**\n     * Sends an e-mail using the selected settings\n     *\n     * @param {Object} mail Mail object\n     * @param {Function} callback Callback function\n     */\n    send(mail, callback) {\n        this.getSocket(this.options, (err, socketOptions) => {\n            if (err) {\n                return callback(err);\n            }\n\n            let returned = false;\n            let options = this.options;\n            if (socketOptions && socketOptions.connection) {\n                this.logger.info(\n                    {\n                        tnx: 'proxy',\n                        remoteAddress: socketOptions.connection.remoteAddress,\n                        remotePort: socketOptions.connection.remotePort,\n                        destHost: options.host || '',\n                        destPort: options.port || '',\n                        action: 'connected'\n                    },\n                    'Using proxied socket from %s:%s to %s:%s',\n                    socketOptions.connection.remoteAddress,\n                    socketOptions.connection.remotePort,\n                    options.host || '',\n                    options.port || ''\n                );\n\n                // only copy options if we need to modify it\n                options = shared.assign(false, options);\n                Object.keys(socketOptions).forEach(key => {\n                    options[key] = socketOptions[key];\n                });\n            }\n\n            let connection = new SMTPConnection(options);\n\n            connection.once('error', err => {\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                connection.close();\n                return callback(err);\n            });\n\n            connection.once('end', () => {\n                if (returned) {\n                    return;\n                }\n\n                let timer = setTimeout(() => {\n                    if (returned) {\n                        return;\n                    }\n                    returned = true;\n                    // still have not returned, this means we have an unexpected connection close\n                    let err = new Error('Unexpected socket close');\n                    if (connection && connection._socket && connection._socket.upgrading) {\n                        // starttls connection errors\n                        err.code = 'ETLS';\n                    }\n                    callback(err);\n                }, 1000);\n\n                try {\n                    timer.unref();\n                } catch (E) {\n                    // Ignore. Happens on envs with non-node timer implementation\n                }\n            });\n\n            let sendMessage = () => {\n                let envelope = mail.message.getEnvelope();\n                let messageId = mail.message.messageId();\n\n                let recipients = [].concat(envelope.to || []);\n                if (recipients.length > 3) {\n                    recipients.push('...and ' + recipients.splice(2).length + ' more');\n                }\n\n                if (mail.data.dsn) {\n                    envelope.dsn = mail.data.dsn;\n                }\n\n                this.logger.info(\n                    {\n                        tnx: 'send',\n                        messageId\n                    },\n                    'Sending message %s to <%s>',\n                    messageId,\n                    recipients.join(', ')\n                );\n\n                connection.send(envelope, mail.message.createReadStream(), (err, info) => {\n                    returned = true;\n                    connection.close();\n                    if (err) {\n                        this.logger.error(\n                            {\n                                err,\n                                tnx: 'send'\n                            },\n                            'Send error for %s: %s',\n                            messageId,\n                            err.message\n                        );\n                        return callback(err);\n                    }\n                    info.envelope = {\n                        from: envelope.from,\n                        to: envelope.to\n                    };\n                    info.messageId = messageId;\n                    try {\n                        return callback(null, info);\n                    } catch (E) {\n                        this.logger.error(\n                            {\n                                err: E,\n                                tnx: 'callback'\n                            },\n                            'Callback error for %s: %s',\n                            messageId,\n                            E.message\n                        );\n                    }\n                });\n            };\n\n            connection.connect(() => {\n                if (returned) {\n                    return;\n                }\n\n                let auth = this.getAuth(mail.data.auth);\n\n                if (auth && (connection.allowsAuth || options.forceAuth)) {\n                    connection.login(auth, err => {\n                        if (auth && auth !== this.auth && auth.oauth2) {\n                            auth.oauth2.removeAllListeners();\n                        }\n                        if (returned) {\n                            return;\n                        }\n\n                        if (err) {\n                            returned = true;\n                            connection.close();\n                            return callback(err);\n                        }\n\n                        sendMessage();\n                    });\n                } else {\n                    sendMessage();\n                }\n            });\n        });\n    }\n\n    /**\n     * Verifies SMTP configuration\n     *\n     * @param {Function} callback Callback function\n     */\n    verify(callback) {\n        let promise;\n\n        if (!callback) {\n            promise = new Promise((resolve, reject) => {\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n\n        this.getSocket(this.options, (err, socketOptions) => {\n            if (err) {\n                return callback(err);\n            }\n\n            let options = this.options;\n            if (socketOptions && socketOptions.connection) {\n                this.logger.info(\n                    {\n                        tnx: 'proxy',\n                        remoteAddress: socketOptions.connection.remoteAddress,\n                        remotePort: socketOptions.connection.remotePort,\n                        destHost: options.host || '',\n                        destPort: options.port || '',\n                        action: 'connected'\n                    },\n                    'Using proxied socket from %s:%s to %s:%s',\n                    socketOptions.connection.remoteAddress,\n                    socketOptions.connection.remotePort,\n                    options.host || '',\n                    options.port || ''\n                );\n\n                options = shared.assign(false, options);\n                Object.keys(socketOptions).forEach(key => {\n                    options[key] = socketOptions[key];\n                });\n            }\n\n            let connection = new SMTPConnection(options);\n            let returned = false;\n\n            connection.once('error', err => {\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                connection.close();\n                return callback(err);\n            });\n\n            connection.once('end', () => {\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                return callback(new Error('Connection closed'));\n            });\n\n            let finalize = () => {\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                connection.quit();\n                return callback(null, true);\n            };\n\n            connection.connect(() => {\n                if (returned) {\n                    return;\n                }\n\n                let authData = this.getAuth({});\n\n                if (authData && (connection.allowsAuth || options.forceAuth)) {\n                    connection.login(authData, err => {\n                        if (returned) {\n                            return;\n                        }\n\n                        if (err) {\n                            returned = true;\n                            connection.close();\n                            return callback(err);\n                        }\n\n                        finalize();\n                    });\n                } else if (!authData && connection.allowsAuth && options.forceAuth) {\n                    let err = new Error('Authentication info was not provided');\n                    err.code = 'NoAuth';\n\n                    returned = true;\n                    connection.close();\n                    return callback(err);\n                } else {\n                    finalize();\n                }\n            });\n        });\n\n        return promise;\n    }\n\n    /**\n     * Releases resources\n     */\n    close() {\n        if (this.auth && this.auth.oauth2) {\n            this.auth.oauth2.removeAllListeners();\n        }\n        this.emit('close');\n    }\n}\n\n// expose to the world\nmodule.exports = SMTPTransport;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}