{"ast":null,"code":"/* eslint no-undefined: 0 */\n\n'use strict';\n\nconst MimeNode = require('../mime-node');\nconst mimeFuncs = require('../mime-funcs');\n\n/**\n * Creates the object for composing a MimeNode instance out from the mail options\n *\n * @constructor\n * @param {Object} mail Mail options\n */\nclass MailComposer {\n  constructor(mail) {\n    this.mail = mail || {};\n    this.message = false;\n  }\n\n  /**\n   * Builds MimeNode instance\n   */\n  compile() {\n    this._alternatives = this.getAlternatives();\n    this._htmlNode = this._alternatives.filter(alternative => /^text\\/html\\b/i.test(alternative.contentType)).pop();\n    this._attachments = this.getAttachments(!!this._htmlNode);\n    this._useRelated = !!(this._htmlNode && this._attachments.related.length);\n    this._useAlternative = this._alternatives.length > 1;\n    this._useMixed = this._attachments.attached.length > 1 || this._alternatives.length && this._attachments.attached.length === 1;\n\n    // Compose MIME tree\n    if (this.mail.raw) {\n      this.message = new MimeNode('message/rfc822', {\n        newline: this.mail.newline\n      }).setRaw(this.mail.raw);\n    } else if (this._useMixed) {\n      this.message = this._createMixed();\n    } else if (this._useAlternative) {\n      this.message = this._createAlternative();\n    } else if (this._useRelated) {\n      this.message = this._createRelated();\n    } else {\n      this.message = this._createContentNode(false, [].concat(this._alternatives || []).concat(this._attachments.attached || []).shift() || {\n        contentType: 'text/plain',\n        content: ''\n      });\n    }\n\n    // Add custom headers\n    if (this.mail.headers) {\n      this.message.addHeader(this.mail.headers);\n    }\n\n    // Add headers to the root node, always overrides custom headers\n    ['from', 'sender', 'to', 'cc', 'bcc', 'reply-to', 'in-reply-to', 'references', 'subject', 'message-id', 'date'].forEach(header => {\n      let key = header.replace(/-(\\w)/g, (o, c) => c.toUpperCase());\n      if (this.mail[key]) {\n        this.message.setHeader(header, this.mail[key]);\n      }\n    });\n\n    // Sets custom envelope\n    if (this.mail.envelope) {\n      this.message.setEnvelope(this.mail.envelope);\n    }\n\n    // ensure Message-Id value\n    this.message.messageId();\n    return this.message;\n  }\n\n  /**\n   * List all attachments. Resulting attachment objects can be used as input for MimeNode nodes\n   *\n   * @param {Boolean} findRelated If true separate related attachments from attached ones\n   * @returns {Object} An object of arrays (`related` and `attached`)\n   */\n  getAttachments(findRelated) {\n    let icalEvent, eventObject;\n    let attachments = [].concat(this.mail.attachments || []).map((attachment, i) => {\n      let data;\n      let isMessageNode = /^message\\//i.test(attachment.contentType);\n      if (/^data:/i.test(attachment.path || attachment.href)) {\n        attachment = this._processDataUrl(attachment);\n      }\n      data = {\n        contentType: attachment.contentType || mimeFuncs.detectMimeType(attachment.filename || attachment.path || attachment.href || 'bin'),\n        contentDisposition: attachment.contentDisposition || (isMessageNode ? 'inline' : 'attachment'),\n        contentTransferEncoding: 'contentTransferEncoding' in attachment ? attachment.contentTransferEncoding : 'base64'\n      };\n      if (attachment.filename) {\n        data.filename = attachment.filename;\n      } else if (!isMessageNode && attachment.filename !== false) {\n        data.filename = (attachment.path || attachment.href || '').split('/').pop().split('?').shift() || 'attachment-' + (i + 1);\n        if (data.filename.indexOf('.') < 0) {\n          data.filename += '.' + mimeFuncs.detectExtension(data.contentType);\n        }\n      }\n      if (/^https?:\\/\\//i.test(attachment.path)) {\n        attachment.href = attachment.path;\n        attachment.path = undefined;\n      }\n      if (attachment.cid) {\n        data.cid = attachment.cid;\n      }\n      if (attachment.raw) {\n        data.raw = attachment.raw;\n      } else if (attachment.path) {\n        data.content = {\n          path: attachment.path\n        };\n      } else if (attachment.href) {\n        data.content = {\n          href: attachment.href,\n          httpHeaders: attachment.httpHeaders\n        };\n      } else {\n        data.content = attachment.content || '';\n      }\n      if (attachment.encoding) {\n        data.encoding = attachment.encoding;\n      }\n      if (attachment.headers) {\n        data.headers = attachment.headers;\n      }\n      return data;\n    });\n    if (this.mail.icalEvent) {\n      if (typeof this.mail.icalEvent === 'object' && (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)) {\n        icalEvent = this.mail.icalEvent;\n      } else {\n        icalEvent = {\n          content: this.mail.icalEvent\n        };\n      }\n      eventObject = {};\n      Object.keys(icalEvent).forEach(key => {\n        eventObject[key] = icalEvent[key];\n      });\n      eventObject.contentType = 'application/ics';\n      if (!eventObject.headers) {\n        eventObject.headers = {};\n      }\n      eventObject.filename = eventObject.filename || 'invite.ics';\n      eventObject.headers['Content-Disposition'] = 'attachment';\n      eventObject.headers['Content-Transfer-Encoding'] = 'base64';\n    }\n    if (!findRelated) {\n      return {\n        attached: attachments.concat(eventObject || []),\n        related: []\n      };\n    } else {\n      return {\n        attached: attachments.filter(attachment => !attachment.cid).concat(eventObject || []),\n        related: attachments.filter(attachment => !!attachment.cid)\n      };\n    }\n  }\n\n  /**\n   * List alternatives. Resulting objects can be used as input for MimeNode nodes\n   *\n   * @returns {Array} An array of alternative elements. Includes the `text` and `html` values as well\n   */\n  getAlternatives() {\n    let alternatives = [],\n      text,\n      html,\n      watchHtml,\n      amp,\n      icalEvent,\n      eventObject;\n    if (this.mail.text) {\n      if (typeof this.mail.text === 'object' && (this.mail.text.content || this.mail.text.path || this.mail.text.href || this.mail.text.raw)) {\n        text = this.mail.text;\n      } else {\n        text = {\n          content: this.mail.text\n        };\n      }\n      text.contentType = 'text/plain; charset=utf-8';\n    }\n    if (this.mail.watchHtml) {\n      if (typeof this.mail.watchHtml === 'object' && (this.mail.watchHtml.content || this.mail.watchHtml.path || this.mail.watchHtml.href || this.mail.watchHtml.raw)) {\n        watchHtml = this.mail.watchHtml;\n      } else {\n        watchHtml = {\n          content: this.mail.watchHtml\n        };\n      }\n      watchHtml.contentType = 'text/watch-html; charset=utf-8';\n    }\n    if (this.mail.amp) {\n      if (typeof this.mail.amp === 'object' && (this.mail.amp.content || this.mail.amp.path || this.mail.amp.href || this.mail.amp.raw)) {\n        amp = this.mail.amp;\n      } else {\n        amp = {\n          content: this.mail.amp\n        };\n      }\n      amp.contentType = 'text/x-amp-html; charset=utf-8';\n    }\n\n    // NB! when including attachments with a calendar alternative you might end up in a blank screen on some clients\n    if (this.mail.icalEvent) {\n      if (typeof this.mail.icalEvent === 'object' && (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)) {\n        icalEvent = this.mail.icalEvent;\n      } else {\n        icalEvent = {\n          content: this.mail.icalEvent\n        };\n      }\n      eventObject = {};\n      Object.keys(icalEvent).forEach(key => {\n        eventObject[key] = icalEvent[key];\n      });\n      if (eventObject.content && typeof eventObject.content === 'object') {\n        // we are going to have the same attachment twice, so mark this to be\n        // resolved just once\n        eventObject.content._resolve = true;\n      }\n      eventObject.filename = false;\n      eventObject.contentType = 'text/calendar; charset=utf-8; method=' + (eventObject.method || 'PUBLISH').toString().trim().toUpperCase();\n      if (!eventObject.headers) {\n        eventObject.headers = {};\n      }\n    }\n    if (this.mail.html) {\n      if (typeof this.mail.html === 'object' && (this.mail.html.content || this.mail.html.path || this.mail.html.href || this.mail.html.raw)) {\n        html = this.mail.html;\n      } else {\n        html = {\n          content: this.mail.html\n        };\n      }\n      html.contentType = 'text/html; charset=utf-8';\n    }\n    [].concat(text || []).concat(watchHtml || []).concat(amp || []).concat(html || []).concat(eventObject || []).concat(this.mail.alternatives || []).forEach(alternative => {\n      let data;\n      if (/^data:/i.test(alternative.path || alternative.href)) {\n        alternative = this._processDataUrl(alternative);\n      }\n      data = {\n        contentType: alternative.contentType || mimeFuncs.detectMimeType(alternative.filename || alternative.path || alternative.href || 'txt'),\n        contentTransferEncoding: alternative.contentTransferEncoding\n      };\n      if (alternative.filename) {\n        data.filename = alternative.filename;\n      }\n      if (/^https?:\\/\\//i.test(alternative.path)) {\n        alternative.href = alternative.path;\n        alternative.path = undefined;\n      }\n      if (alternative.raw) {\n        data.raw = alternative.raw;\n      } else if (alternative.path) {\n        data.content = {\n          path: alternative.path\n        };\n      } else if (alternative.href) {\n        data.content = {\n          href: alternative.href\n        };\n      } else {\n        data.content = alternative.content || '';\n      }\n      if (alternative.encoding) {\n        data.encoding = alternative.encoding;\n      }\n      if (alternative.headers) {\n        data.headers = alternative.headers;\n      }\n      alternatives.push(data);\n    });\n    return alternatives;\n  }\n\n  /**\n   * Builds multipart/mixed node. It should always contain different type of elements on the same level\n   * eg. text + attachments\n   *\n   * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n   * @returns {Object} MimeNode node element\n   */\n  _createMixed(parentNode) {\n    let node;\n    if (!parentNode) {\n      node = new MimeNode('multipart/mixed', {\n        baseBoundary: this.mail.baseBoundary,\n        textEncoding: this.mail.textEncoding,\n        boundaryPrefix: this.mail.boundaryPrefix,\n        disableUrlAccess: this.mail.disableUrlAccess,\n        disableFileAccess: this.mail.disableFileAccess,\n        normalizeHeaderKey: this.mail.normalizeHeaderKey,\n        newline: this.mail.newline\n      });\n    } else {\n      node = parentNode.createChild('multipart/mixed', {\n        disableUrlAccess: this.mail.disableUrlAccess,\n        disableFileAccess: this.mail.disableFileAccess,\n        normalizeHeaderKey: this.mail.normalizeHeaderKey,\n        newline: this.mail.newline\n      });\n    }\n    if (this._useAlternative) {\n      this._createAlternative(node);\n    } else if (this._useRelated) {\n      this._createRelated(node);\n    }\n    [].concat(!this._useAlternative && this._alternatives || []).concat(this._attachments.attached || []).forEach(element => {\n      // if the element is a html node from related subpart then ignore it\n      if (!this._useRelated || element !== this._htmlNode) {\n        this._createContentNode(node, element);\n      }\n    });\n    return node;\n  }\n\n  /**\n   * Builds multipart/alternative node. It should always contain same type of elements on the same level\n   * eg. text + html view of the same data\n   *\n   * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n   * @returns {Object} MimeNode node element\n   */\n  _createAlternative(parentNode) {\n    let node;\n    if (!parentNode) {\n      node = new MimeNode('multipart/alternative', {\n        baseBoundary: this.mail.baseBoundary,\n        textEncoding: this.mail.textEncoding,\n        boundaryPrefix: this.mail.boundaryPrefix,\n        disableUrlAccess: this.mail.disableUrlAccess,\n        disableFileAccess: this.mail.disableFileAccess,\n        normalizeHeaderKey: this.mail.normalizeHeaderKey,\n        newline: this.mail.newline\n      });\n    } else {\n      node = parentNode.createChild('multipart/alternative', {\n        disableUrlAccess: this.mail.disableUrlAccess,\n        disableFileAccess: this.mail.disableFileAccess,\n        normalizeHeaderKey: this.mail.normalizeHeaderKey,\n        newline: this.mail.newline\n      });\n    }\n    this._alternatives.forEach(alternative => {\n      if (this._useRelated && this._htmlNode === alternative) {\n        this._createRelated(node);\n      } else {\n        this._createContentNode(node, alternative);\n      }\n    });\n    return node;\n  }\n\n  /**\n   * Builds multipart/related node. It should always contain html node with related attachments\n   *\n   * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n   * @returns {Object} MimeNode node element\n   */\n  _createRelated(parentNode) {\n    let node;\n    if (!parentNode) {\n      node = new MimeNode('multipart/related; type=\"text/html\"', {\n        baseBoundary: this.mail.baseBoundary,\n        textEncoding: this.mail.textEncoding,\n        boundaryPrefix: this.mail.boundaryPrefix,\n        disableUrlAccess: this.mail.disableUrlAccess,\n        disableFileAccess: this.mail.disableFileAccess,\n        normalizeHeaderKey: this.mail.normalizeHeaderKey,\n        newline: this.mail.newline\n      });\n    } else {\n      node = parentNode.createChild('multipart/related; type=\"text/html\"', {\n        disableUrlAccess: this.mail.disableUrlAccess,\n        disableFileAccess: this.mail.disableFileAccess,\n        normalizeHeaderKey: this.mail.normalizeHeaderKey,\n        newline: this.mail.newline\n      });\n    }\n    this._createContentNode(node, this._htmlNode);\n    this._attachments.related.forEach(alternative => this._createContentNode(node, alternative));\n    return node;\n  }\n\n  /**\n   * Creates a regular node with contents\n   *\n   * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n   * @param {Object} element Node data\n   * @returns {Object} MimeNode node element\n   */\n  _createContentNode(parentNode, element) {\n    element = element || {};\n    element.content = element.content || '';\n    let node;\n    let encoding = (element.encoding || 'utf8').toString().toLowerCase().replace(/[-_\\s]/g, '');\n    if (!parentNode) {\n      node = new MimeNode(element.contentType, {\n        filename: element.filename,\n        baseBoundary: this.mail.baseBoundary,\n        textEncoding: this.mail.textEncoding,\n        boundaryPrefix: this.mail.boundaryPrefix,\n        disableUrlAccess: this.mail.disableUrlAccess,\n        disableFileAccess: this.mail.disableFileAccess,\n        normalizeHeaderKey: this.mail.normalizeHeaderKey,\n        newline: this.mail.newline\n      });\n    } else {\n      node = parentNode.createChild(element.contentType, {\n        filename: element.filename,\n        textEncoding: this.mail.textEncoding,\n        disableUrlAccess: this.mail.disableUrlAccess,\n        disableFileAccess: this.mail.disableFileAccess,\n        normalizeHeaderKey: this.mail.normalizeHeaderKey,\n        newline: this.mail.newline\n      });\n    }\n\n    // add custom headers\n    if (element.headers) {\n      node.addHeader(element.headers);\n    }\n    if (element.cid) {\n      node.setHeader('Content-Id', '<' + element.cid.replace(/[<>]/g, '') + '>');\n    }\n    if (element.contentTransferEncoding) {\n      node.setHeader('Content-Transfer-Encoding', element.contentTransferEncoding);\n    } else if (this.mail.encoding && /^text\\//i.test(element.contentType)) {\n      node.setHeader('Content-Transfer-Encoding', this.mail.encoding);\n    }\n    if (!/^text\\//i.test(element.contentType) || element.contentDisposition) {\n      node.setHeader('Content-Disposition', element.contentDisposition || (element.cid ? 'inline' : 'attachment'));\n    }\n    if (typeof element.content === 'string' && !['utf8', 'usascii', 'ascii'].includes(encoding)) {\n      element.content = Buffer.from(element.content, encoding);\n    }\n\n    // prefer pregenerated raw content\n    if (element.raw) {\n      node.setRaw(element.raw);\n    } else {\n      node.setContent(element.content);\n    }\n    return node;\n  }\n\n  /**\n   * Parses data uri and converts it to a Buffer\n   *\n   * @param {Object} element Content element\n   * @return {Object} Parsed element\n   */\n  _processDataUrl(element) {\n    let parts = (element.path || element.href).match(/^data:((?:[^;]*;)*(?:[^,]*)),(.*)$/i);\n    if (!parts) {\n      return element;\n    }\n    element.content = /\\bbase64$/i.test(parts[1]) ? Buffer.from(parts[2], 'base64') : Buffer.from(decodeURIComponent(parts[2]));\n    if ('path' in element) {\n      element.path = false;\n    }\n    if ('href' in element) {\n      element.href = false;\n    }\n    parts[1].split(';').forEach(item => {\n      if (/^\\w+\\/[^/]+$/i.test(item)) {\n        element.contentType = element.contentType || item.toLowerCase();\n      }\n    });\n    return element;\n  }\n}\nmodule.exports = MailComposer;","map":{"version":3,"names":["MimeNode","require","mimeFuncs","MailComposer","constructor","mail","message","compile","_alternatives","getAlternatives","_htmlNode","filter","alternative","test","contentType","pop","_attachments","getAttachments","_useRelated","related","length","_useAlternative","_useMixed","attached","raw","newline","setRaw","_createMixed","_createAlternative","_createRelated","_createContentNode","concat","shift","content","headers","addHeader","forEach","header","key","replace","o","c","toUpperCase","setHeader","envelope","setEnvelope","messageId","findRelated","icalEvent","eventObject","attachments","map","attachment","i","data","isMessageNode","path","href","_processDataUrl","detectMimeType","filename","contentDisposition","contentTransferEncoding","split","indexOf","detectExtension","undefined","cid","httpHeaders","encoding","Object","keys","alternatives","text","html","watchHtml","amp","_resolve","method","toString","trim","push","parentNode","node","baseBoundary","textEncoding","boundaryPrefix","disableUrlAccess","disableFileAccess","normalizeHeaderKey","createChild","element","toLowerCase","includes","Buffer","from","setContent","parts","match","decodeURIComponent","item","module","exports"],"sources":["C:/Users/deiby/Desktop/cloneWebCursos/paginacursos/node_modules/nodemailer/lib/mail-composer/index.js"],"sourcesContent":["/* eslint no-undefined: 0 */\n\n'use strict';\n\nconst MimeNode = require('../mime-node');\nconst mimeFuncs = require('../mime-funcs');\n\n/**\n * Creates the object for composing a MimeNode instance out from the mail options\n *\n * @constructor\n * @param {Object} mail Mail options\n */\nclass MailComposer {\n    constructor(mail) {\n        this.mail = mail || {};\n        this.message = false;\n    }\n\n    /**\n     * Builds MimeNode instance\n     */\n    compile() {\n        this._alternatives = this.getAlternatives();\n        this._htmlNode = this._alternatives.filter(alternative => /^text\\/html\\b/i.test(alternative.contentType)).pop();\n        this._attachments = this.getAttachments(!!this._htmlNode);\n\n        this._useRelated = !!(this._htmlNode && this._attachments.related.length);\n        this._useAlternative = this._alternatives.length > 1;\n        this._useMixed = this._attachments.attached.length > 1 || (this._alternatives.length && this._attachments.attached.length === 1);\n\n        // Compose MIME tree\n        if (this.mail.raw) {\n            this.message = new MimeNode('message/rfc822', { newline: this.mail.newline }).setRaw(this.mail.raw);\n        } else if (this._useMixed) {\n            this.message = this._createMixed();\n        } else if (this._useAlternative) {\n            this.message = this._createAlternative();\n        } else if (this._useRelated) {\n            this.message = this._createRelated();\n        } else {\n            this.message = this._createContentNode(\n                false,\n                []\n                    .concat(this._alternatives || [])\n                    .concat(this._attachments.attached || [])\n                    .shift() || {\n                    contentType: 'text/plain',\n                    content: ''\n                }\n            );\n        }\n\n        // Add custom headers\n        if (this.mail.headers) {\n            this.message.addHeader(this.mail.headers);\n        }\n\n        // Add headers to the root node, always overrides custom headers\n        ['from', 'sender', 'to', 'cc', 'bcc', 'reply-to', 'in-reply-to', 'references', 'subject', 'message-id', 'date'].forEach(header => {\n            let key = header.replace(/-(\\w)/g, (o, c) => c.toUpperCase());\n            if (this.mail[key]) {\n                this.message.setHeader(header, this.mail[key]);\n            }\n        });\n\n        // Sets custom envelope\n        if (this.mail.envelope) {\n            this.message.setEnvelope(this.mail.envelope);\n        }\n\n        // ensure Message-Id value\n        this.message.messageId();\n\n        return this.message;\n    }\n\n    /**\n     * List all attachments. Resulting attachment objects can be used as input for MimeNode nodes\n     *\n     * @param {Boolean} findRelated If true separate related attachments from attached ones\n     * @returns {Object} An object of arrays (`related` and `attached`)\n     */\n    getAttachments(findRelated) {\n        let icalEvent, eventObject;\n        let attachments = [].concat(this.mail.attachments || []).map((attachment, i) => {\n            let data;\n            let isMessageNode = /^message\\//i.test(attachment.contentType);\n\n            if (/^data:/i.test(attachment.path || attachment.href)) {\n                attachment = this._processDataUrl(attachment);\n            }\n\n            data = {\n                contentType: attachment.contentType || mimeFuncs.detectMimeType(attachment.filename || attachment.path || attachment.href || 'bin'),\n                contentDisposition: attachment.contentDisposition || (isMessageNode ? 'inline' : 'attachment'),\n                contentTransferEncoding: 'contentTransferEncoding' in attachment ? attachment.contentTransferEncoding : 'base64'\n            };\n\n            if (attachment.filename) {\n                data.filename = attachment.filename;\n            } else if (!isMessageNode && attachment.filename !== false) {\n                data.filename = (attachment.path || attachment.href || '').split('/').pop().split('?').shift() || 'attachment-' + (i + 1);\n                if (data.filename.indexOf('.') < 0) {\n                    data.filename += '.' + mimeFuncs.detectExtension(data.contentType);\n                }\n            }\n\n            if (/^https?:\\/\\//i.test(attachment.path)) {\n                attachment.href = attachment.path;\n                attachment.path = undefined;\n            }\n\n            if (attachment.cid) {\n                data.cid = attachment.cid;\n            }\n\n            if (attachment.raw) {\n                data.raw = attachment.raw;\n            } else if (attachment.path) {\n                data.content = {\n                    path: attachment.path\n                };\n            } else if (attachment.href) {\n                data.content = {\n                    href: attachment.href,\n                    httpHeaders: attachment.httpHeaders\n                };\n            } else {\n                data.content = attachment.content || '';\n            }\n\n            if (attachment.encoding) {\n                data.encoding = attachment.encoding;\n            }\n\n            if (attachment.headers) {\n                data.headers = attachment.headers;\n            }\n\n            return data;\n        });\n\n        if (this.mail.icalEvent) {\n            if (\n                typeof this.mail.icalEvent === 'object' &&\n                (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)\n            ) {\n                icalEvent = this.mail.icalEvent;\n            } else {\n                icalEvent = {\n                    content: this.mail.icalEvent\n                };\n            }\n\n            eventObject = {};\n            Object.keys(icalEvent).forEach(key => {\n                eventObject[key] = icalEvent[key];\n            });\n\n            eventObject.contentType = 'application/ics';\n            if (!eventObject.headers) {\n                eventObject.headers = {};\n            }\n            eventObject.filename = eventObject.filename || 'invite.ics';\n            eventObject.headers['Content-Disposition'] = 'attachment';\n            eventObject.headers['Content-Transfer-Encoding'] = 'base64';\n        }\n\n        if (!findRelated) {\n            return {\n                attached: attachments.concat(eventObject || []),\n                related: []\n            };\n        } else {\n            return {\n                attached: attachments.filter(attachment => !attachment.cid).concat(eventObject || []),\n                related: attachments.filter(attachment => !!attachment.cid)\n            };\n        }\n    }\n\n    /**\n     * List alternatives. Resulting objects can be used as input for MimeNode nodes\n     *\n     * @returns {Array} An array of alternative elements. Includes the `text` and `html` values as well\n     */\n    getAlternatives() {\n        let alternatives = [],\n            text,\n            html,\n            watchHtml,\n            amp,\n            icalEvent,\n            eventObject;\n\n        if (this.mail.text) {\n            if (typeof this.mail.text === 'object' && (this.mail.text.content || this.mail.text.path || this.mail.text.href || this.mail.text.raw)) {\n                text = this.mail.text;\n            } else {\n                text = {\n                    content: this.mail.text\n                };\n            }\n            text.contentType = 'text/plain; charset=utf-8';\n        }\n\n        if (this.mail.watchHtml) {\n            if (\n                typeof this.mail.watchHtml === 'object' &&\n                (this.mail.watchHtml.content || this.mail.watchHtml.path || this.mail.watchHtml.href || this.mail.watchHtml.raw)\n            ) {\n                watchHtml = this.mail.watchHtml;\n            } else {\n                watchHtml = {\n                    content: this.mail.watchHtml\n                };\n            }\n            watchHtml.contentType = 'text/watch-html; charset=utf-8';\n        }\n\n        if (this.mail.amp) {\n            if (typeof this.mail.amp === 'object' && (this.mail.amp.content || this.mail.amp.path || this.mail.amp.href || this.mail.amp.raw)) {\n                amp = this.mail.amp;\n            } else {\n                amp = {\n                    content: this.mail.amp\n                };\n            }\n            amp.contentType = 'text/x-amp-html; charset=utf-8';\n        }\n\n        // NB! when including attachments with a calendar alternative you might end up in a blank screen on some clients\n        if (this.mail.icalEvent) {\n            if (\n                typeof this.mail.icalEvent === 'object' &&\n                (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)\n            ) {\n                icalEvent = this.mail.icalEvent;\n            } else {\n                icalEvent = {\n                    content: this.mail.icalEvent\n                };\n            }\n\n            eventObject = {};\n            Object.keys(icalEvent).forEach(key => {\n                eventObject[key] = icalEvent[key];\n            });\n\n            if (eventObject.content && typeof eventObject.content === 'object') {\n                // we are going to have the same attachment twice, so mark this to be\n                // resolved just once\n                eventObject.content._resolve = true;\n            }\n\n            eventObject.filename = false;\n            eventObject.contentType = 'text/calendar; charset=utf-8; method=' + (eventObject.method || 'PUBLISH').toString().trim().toUpperCase();\n            if (!eventObject.headers) {\n                eventObject.headers = {};\n            }\n        }\n\n        if (this.mail.html) {\n            if (typeof this.mail.html === 'object' && (this.mail.html.content || this.mail.html.path || this.mail.html.href || this.mail.html.raw)) {\n                html = this.mail.html;\n            } else {\n                html = {\n                    content: this.mail.html\n                };\n            }\n            html.contentType = 'text/html; charset=utf-8';\n        }\n\n        []\n            .concat(text || [])\n            .concat(watchHtml || [])\n            .concat(amp || [])\n            .concat(html || [])\n            .concat(eventObject || [])\n            .concat(this.mail.alternatives || [])\n            .forEach(alternative => {\n                let data;\n\n                if (/^data:/i.test(alternative.path || alternative.href)) {\n                    alternative = this._processDataUrl(alternative);\n                }\n\n                data = {\n                    contentType: alternative.contentType || mimeFuncs.detectMimeType(alternative.filename || alternative.path || alternative.href || 'txt'),\n                    contentTransferEncoding: alternative.contentTransferEncoding\n                };\n\n                if (alternative.filename) {\n                    data.filename = alternative.filename;\n                }\n\n                if (/^https?:\\/\\//i.test(alternative.path)) {\n                    alternative.href = alternative.path;\n                    alternative.path = undefined;\n                }\n\n                if (alternative.raw) {\n                    data.raw = alternative.raw;\n                } else if (alternative.path) {\n                    data.content = {\n                        path: alternative.path\n                    };\n                } else if (alternative.href) {\n                    data.content = {\n                        href: alternative.href\n                    };\n                } else {\n                    data.content = alternative.content || '';\n                }\n\n                if (alternative.encoding) {\n                    data.encoding = alternative.encoding;\n                }\n\n                if (alternative.headers) {\n                    data.headers = alternative.headers;\n                }\n\n                alternatives.push(data);\n            });\n\n        return alternatives;\n    }\n\n    /**\n     * Builds multipart/mixed node. It should always contain different type of elements on the same level\n     * eg. text + attachments\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */\n    _createMixed(parentNode) {\n        let node;\n\n        if (!parentNode) {\n            node = new MimeNode('multipart/mixed', {\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        } else {\n            node = parentNode.createChild('multipart/mixed', {\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        }\n\n        if (this._useAlternative) {\n            this._createAlternative(node);\n        } else if (this._useRelated) {\n            this._createRelated(node);\n        }\n\n        []\n            .concat((!this._useAlternative && this._alternatives) || [])\n            .concat(this._attachments.attached || [])\n            .forEach(element => {\n                // if the element is a html node from related subpart then ignore it\n                if (!this._useRelated || element !== this._htmlNode) {\n                    this._createContentNode(node, element);\n                }\n            });\n\n        return node;\n    }\n\n    /**\n     * Builds multipart/alternative node. It should always contain same type of elements on the same level\n     * eg. text + html view of the same data\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */\n    _createAlternative(parentNode) {\n        let node;\n\n        if (!parentNode) {\n            node = new MimeNode('multipart/alternative', {\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        } else {\n            node = parentNode.createChild('multipart/alternative', {\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        }\n\n        this._alternatives.forEach(alternative => {\n            if (this._useRelated && this._htmlNode === alternative) {\n                this._createRelated(node);\n            } else {\n                this._createContentNode(node, alternative);\n            }\n        });\n\n        return node;\n    }\n\n    /**\n     * Builds multipart/related node. It should always contain html node with related attachments\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */\n    _createRelated(parentNode) {\n        let node;\n\n        if (!parentNode) {\n            node = new MimeNode('multipart/related; type=\"text/html\"', {\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        } else {\n            node = parentNode.createChild('multipart/related; type=\"text/html\"', {\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        }\n\n        this._createContentNode(node, this._htmlNode);\n\n        this._attachments.related.forEach(alternative => this._createContentNode(node, alternative));\n\n        return node;\n    }\n\n    /**\n     * Creates a regular node with contents\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @param {Object} element Node data\n     * @returns {Object} MimeNode node element\n     */\n    _createContentNode(parentNode, element) {\n        element = element || {};\n        element.content = element.content || '';\n\n        let node;\n        let encoding = (element.encoding || 'utf8')\n            .toString()\n            .toLowerCase()\n            .replace(/[-_\\s]/g, '');\n\n        if (!parentNode) {\n            node = new MimeNode(element.contentType, {\n                filename: element.filename,\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        } else {\n            node = parentNode.createChild(element.contentType, {\n                filename: element.filename,\n                textEncoding: this.mail.textEncoding,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        }\n\n        // add custom headers\n        if (element.headers) {\n            node.addHeader(element.headers);\n        }\n\n        if (element.cid) {\n            node.setHeader('Content-Id', '<' + element.cid.replace(/[<>]/g, '') + '>');\n        }\n\n        if (element.contentTransferEncoding) {\n            node.setHeader('Content-Transfer-Encoding', element.contentTransferEncoding);\n        } else if (this.mail.encoding && /^text\\//i.test(element.contentType)) {\n            node.setHeader('Content-Transfer-Encoding', this.mail.encoding);\n        }\n\n        if (!/^text\\//i.test(element.contentType) || element.contentDisposition) {\n            node.setHeader('Content-Disposition', element.contentDisposition || (element.cid ? 'inline' : 'attachment'));\n        }\n\n        if (typeof element.content === 'string' && !['utf8', 'usascii', 'ascii'].includes(encoding)) {\n            element.content = Buffer.from(element.content, encoding);\n        }\n\n        // prefer pregenerated raw content\n        if (element.raw) {\n            node.setRaw(element.raw);\n        } else {\n            node.setContent(element.content);\n        }\n\n        return node;\n    }\n\n    /**\n     * Parses data uri and converts it to a Buffer\n     *\n     * @param {Object} element Content element\n     * @return {Object} Parsed element\n     */\n    _processDataUrl(element) {\n        let parts = (element.path || element.href).match(/^data:((?:[^;]*;)*(?:[^,]*)),(.*)$/i);\n        if (!parts) {\n            return element;\n        }\n\n        element.content = /\\bbase64$/i.test(parts[1]) ? Buffer.from(parts[2], 'base64') : Buffer.from(decodeURIComponent(parts[2]));\n\n        if ('path' in element) {\n            element.path = false;\n        }\n\n        if ('href' in element) {\n            element.href = false;\n        }\n\n        parts[1].split(';').forEach(item => {\n            if (/^\\w+\\/[^/]+$/i.test(item)) {\n                element.contentType = element.contentType || item.toLowerCase();\n            }\n        });\n\n        return element;\n    }\n}\n\nmodule.exports = MailComposer;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}