{"ast":null,"code":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n'use strict';\n\nmodule.exports = Readable;\n/*<replacement>*/\n\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n/*<replacement>*/\n\nvar EE = require('events').EventEmitter;\nvar EElistenerCount = function EElistenerCount(emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n/*<replacement>*/\n\nvar debugUtil = require('util');\nvar debug;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function debug() {};\n}\n/*</replacement>*/\n\nvar BufferList = require('./internal/streams/buffer_list');\nvar destroyImpl = require('./internal/streams/destroy');\nvar _require = require('./internal/streams/state'),\n  getHighWaterMark = _require.getHighWaterMark;\nvar _require$codes = require('../errors').codes,\n  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n  ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,\n  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n  ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.\n\nvar StringDecoder;\nvar createReadableStreamAsyncIterator;\nvar from;\nrequire('inherits')(Readable, Stream);\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\nfunction ReadableState(options, stream, isDuplex) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n\n  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n\n  this.sync = true; // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n  this.paused = true; // Should close be emitted on destroy. Defaults to true.\n\n  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')\n\n  this.autoDestroy = !!options.autoDestroy; // has it been destroyed\n\n  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s\n\n  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled\n\n  this.readingMore = false;\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the ReadableState constructor, at least with V8 6.5\n\n  var isDuplex = this instanceof Duplex;\n  this._readableState = new ReadableState(options, this, isDuplex); // legacy\n\n  this.readable = true;\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n  Stream.call(this);\n}\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n    this._readableState.destroyed = value;\n  }\n});\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function (err, cb) {\n  cb(err);\n}; // Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\n\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n}; // Unshift should *always* be something directly out of read()\n\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  debug('readableAddChunk', chunk);\n  var state = stream._readableState;\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n    if (er) {\n      errorOrDestroy(stream, er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n      if (addToFront) {\n        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\n      } else if (state.destroyed) {\n        return false;\n      } else {\n        state.reading = false;\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n      maybeReadMore(stream, state);\n    }\n  } // We can push more data if we are below the highWaterMark.\n  // Also, if we have no data yet, we can stand some more bytes.\n  // This is to work around cases where hwm=0, such as the repl.\n\n  return !state.ended && (state.length < state.highWaterMark || state.length === 0);\n}\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    state.awaitDrain = 0;\n    stream.emit('data', chunk);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n    if (state.needReadable) emitReadable(stream);\n  }\n  maybeReadMore(stream, state);\n}\nfunction chunkInvalid(state, chunk) {\n  var er;\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);\n  }\n  return er;\n}\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n}; // backwards compatibility.\n\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  var decoder = new StringDecoder(enc);\n  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8\n\n  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:\n\n  var p = this._readableState.buffer.head;\n  var content = '';\n  while (p !== null) {\n    content += decoder.write(p.data);\n    p = p.next;\n  }\n  this._readableState.buffer.clear();\n  if (content !== '') this._readableState.buffer.push(content);\n  this._readableState.length = content.length;\n  return this;\n}; // Don't raise the hwm > 1GB\n\nvar MAX_HWM = 0x40000000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n} // This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  } // If we're asking for more than the current hwm, then raise the hwm.\n\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n; // Don't have enough\n\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n} // you can override either this method, or the async _read(n) below.\n\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n\n  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.\n\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  } // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n  // if we need a readable event, then we need to do some reading.\n\n  var doRead = state.needReadable;\n  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some\n\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  } // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true; // if the length is currently zero, then we *need* a readable event.\n\n    if (state.length === 0) state.needReadable = true; // call internal read method\n\n    this._read(state.highWaterMark);\n    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n  if (ret === null) {\n    state.needReadable = state.length <= state.highWaterMark;\n    n = 0;\n  } else {\n    state.length -= n;\n    state.awaitDrain = 0;\n  }\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.\n\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n  if (ret !== null) this.emit('data', ret);\n  return ret;\n};\nfunction onEofChunk(stream, state) {\n  debug('onEofChunk');\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n  if (state.sync) {\n    // if we are sync, wait until next tick to emit the data.\n    // Otherwise we risk emitting data in the flow()\n    // the readable code triggers during a read() call\n    emitReadable(stream);\n  } else {\n    // emit 'readable' now to make sure it gets picked up.\n    state.needReadable = false;\n    if (!state.emittedReadable) {\n      state.emittedReadable = true;\n      emitReadable_(stream);\n    }\n  }\n} // Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\n\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  debug('emitReadable', state.needReadable, state.emittedReadable);\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    process.nextTick(emitReadable_, stream);\n  }\n}\nfunction emitReadable_(stream) {\n  var state = stream._readableState;\n  debug('emitReadable_', state.destroyed, state.length, state.ended);\n  if (!state.destroyed && (state.length || state.ended)) {\n    stream.emit('readable');\n    state.emittedReadable = false;\n  } // The stream needs another readable event if\n  // 1. It is not flowing, as the flow mechanism will take\n  //    care of it.\n  // 2. It is not ended.\n  // 3. It is below the highWaterMark, so we can schedule\n  //    another readable later.\n\n  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;\n  flow(stream);\n} // at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\n\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    process.nextTick(maybeReadMore_, stream, state);\n  }\n}\nfunction maybeReadMore_(stream, state) {\n  // Attempt to read more data if we should.\n  //\n  // The conditions for reading more data are (one of):\n  // - Not enough data buffered (state.length < state.highWaterMark). The loop\n  //   is responsible for filling the buffer with enough data if such data\n  //   is available. If highWaterMark is 0 and we are not in the flowing mode\n  //   we should _not_ attempt to buffer any extra data. We'll get more data\n  //   when the stream consumer calls read() instead.\n  // - No data in the buffer, and the stream is in flowing mode. In this mode\n  //   the loop below is responsible for ensuring read() is called. Failing to\n  //   call read here would abort the flow and there's no other mechanism for\n  //   continuing the flow if the stream consumer has just subscribed to the\n  //   'data' event.\n  //\n  // In addition to the above conditions to keep reading data, the following\n  // conditions prevent the data from being read:\n  // - The stream has ended (state.ended).\n  // - There is already a pending 'read' operation (state.reading). This is a\n  //   case where the the stream has called the implementation defined _read()\n  //   method, but they are processing the call asynchronously and have _not_\n  //   called push() with new data. In this case we skip performing more\n  //   read()s. The execution ends in this method again after the _read() ends\n  //   up calling push() with more data.\n  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {\n    var len = state.length;\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;\n  }\n  state.readingMore = false;\n} // abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\n\nReadable.prototype._read = function (n) {\n  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));\n};\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n  function onend() {\n    debug('onend');\n    dest.end();\n  } // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup'); // cleanup event handlers once the pipe is broken\n\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n    cleanedUp = true; // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    debug('dest.write', ret);\n    if (ret === false) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', state.awaitDrain);\n        state.awaitDrain++;\n      }\n      src.pause();\n    }\n  } // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);\n  } // Make sure our error handler is attached before userland ones.\n\n  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.\n\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  } // tell the dest that it's being piped to\n\n  dest.emit('pipe', src); // start the flow if it hasn't been started already.\n\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n  return dest;\n};\nfunction pipeOnDrain(src) {\n  return function pipeOnDrainFunctionResult() {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = {\n    hasUnpiped: false\n  }; // if we're not piping anywhere, then do nothing.\n\n  if (state.pipesCount === 0) return this; // just one destination.  most common case.\n\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n    if (!dest) dest = state.pipes; // got a match.\n\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  } // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, {\n        hasUnpiped: false\n      });\n    }\n    return this;\n  } // try to find the right one.\n\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n  dest.emit('unpipe', this, unpipeInfo);\n  return this;\n}; // set up data events if they are asked for\n// Ensure readable listeners eventually get something\n\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n  var state = this._readableState;\n  if (ev === 'data') {\n    // update readableListening so that resume() may be a no-op\n    // a few lines down. This is needed to support once('readable').\n    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused\n\n    if (state.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.flowing = false;\n      state.emittedReadable = false;\n      debug('on readable', state.length, state.reading);\n      if (state.length) {\n        emitReadable(this);\n      } else if (!state.reading) {\n        process.nextTick(nReadingNextTick, this);\n      }\n    }\n  }\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\nReadable.prototype.removeListener = function (ev, fn) {\n  var res = Stream.prototype.removeListener.call(this, ev, fn);\n  if (ev === 'readable') {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n  return res;\n};\nReadable.prototype.removeAllListeners = function (ev) {\n  var res = Stream.prototype.removeAllListeners.apply(this, arguments);\n  if (ev === 'readable' || ev === undefined) {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n  return res;\n};\nfunction updateReadableListening(self) {\n  var state = self._readableState;\n  state.readableListening = self.listenerCount('readable') > 0;\n  if (state.resumeScheduled && !state.paused) {\n    // flowing needs to be set to true now, otherwise\n    // the upcoming resume will not flow.\n    state.flowing = true; // crude way to check if we should resume\n  } else if (self.listenerCount('data') > 0) {\n    self.resume();\n  }\n}\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n} // pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\n\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume'); // we flow only if there is no one listening\n    // for readable, but we still have to call\n    // resume()\n\n    state.flowing = !state.readableListening;\n    resume(this, state);\n  }\n  state.paused = false;\n  return this;\n};\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    process.nextTick(resume_, stream, state);\n  }\n}\nfunction resume_(stream, state) {\n  debug('resume', state.reading);\n  if (!state.reading) {\n    stream.read(0);\n  }\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (this._readableState.flowing !== false) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  this._readableState.paused = true;\n  return this;\n};\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null) {\n    ;\n  }\n} // wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\n\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n  var state = this._readableState;\n  var paused = false;\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n    _this.push(null);\n  });\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode\n\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n    var ret = _this.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  }); // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function methodWrap(method) {\n        return function methodWrapReturnFunction() {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  } // proxy certain important events.\n\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  } // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n\n  this._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n  return this;\n};\nif (typeof Symbol === 'function') {\n  Readable.prototype[Symbol.asyncIterator] = function () {\n    if (createReadableStreamAsyncIterator === undefined) {\n      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');\n    }\n    return createReadableStreamAsyncIterator(this);\n  };\n}\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.highWaterMark;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState && this._readableState.buffer;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableFlowing', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.flowing;\n  },\n  set: function set(state) {\n    if (this._readableState) {\n      this._readableState.flowing = state;\n    }\n  }\n}); // exposed for testing purposes only.\n\nReadable._fromList = fromList;\nObject.defineProperty(Readable.prototype, 'readableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.length;\n  }\n}); // Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = state.buffer.consume(n, state.decoder);\n  }\n  return ret;\n}\nfunction endReadable(stream) {\n  var state = stream._readableState;\n  debug('endReadable', state.endEmitted);\n  if (!state.endEmitted) {\n    state.ended = true;\n    process.nextTick(endReadableNT, state, stream);\n  }\n}\nfunction endReadableNT(state, stream) {\n  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.\n\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n    if (state.autoDestroy) {\n      // In case of duplex streams we need a way to detect\n      // if the writable side is ready for autoDestroy as well\n      var wState = stream._writableState;\n      if (!wState || wState.autoDestroy && wState.finished) {\n        stream.destroy();\n      }\n    }\n  }\n}\nif (typeof Symbol === 'function') {\n  Readable.from = function (iterable, opts) {\n    if (from === undefined) {\n      from = require('./internal/streams/from');\n    }\n    return from(Readable, iterable, opts);\n  };\n}\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}","map":{"version":3,"names":["module","exports","Readable","Duplex","ReadableState","EE","require","EventEmitter","EElistenerCount","emitter","type","listeners","length","Stream","Buffer","OurUint8Array","global","Uint8Array","_uint8ArrayToBuffer","chunk","from","_isUint8Array","obj","isBuffer","debugUtil","debug","debuglog","BufferList","destroyImpl","_require","getHighWaterMark","_require$codes","codes","ERR_INVALID_ARG_TYPE","ERR_STREAM_PUSH_AFTER_EOF","ERR_METHOD_NOT_IMPLEMENTED","ERR_STREAM_UNSHIFT_AFTER_END_EVENT","StringDecoder","createReadableStreamAsyncIterator","errorOrDestroy","kProxyEvents","prependListener","event","fn","_events","on","Array","isArray","unshift","options","stream","isDuplex","objectMode","readableObjectMode","highWaterMark","buffer","pipes","pipesCount","flowing","ended","endEmitted","reading","sync","needReadable","emittedReadable","readableListening","resumeScheduled","paused","emitClose","autoDestroy","destroyed","defaultEncoding","awaitDrain","readingMore","decoder","encoding","_readableState","readable","read","_read","destroy","_destroy","call","Object","defineProperty","prototype","enumerable","get","undefined","set","value","_undestroy","undestroy","err","cb","push","state","skipChunkCheck","readableAddChunk","addToFront","onEofChunk","er","chunkInvalid","getPrototypeOf","addChunk","write","maybeReadMore","emit","emitReadable","isPaused","setEncoding","enc","p","head","content","data","next","clear","MAX_HWM","computeNewHighWaterMark","n","howMuchToRead","parseInt","nOrig","endReadable","doRead","ret","fromList","end","emitReadable_","process","nextTick","flow","maybeReadMore_","len","pipe","dest","pipeOpts","src","doEnd","stdout","stderr","endFn","onend","unpipe","once","onunpipe","unpipeInfo","hasUnpiped","cleanup","ondrain","pipeOnDrain","cleanedUp","removeListener","onclose","onfinish","onerror","ondata","_writableState","needDrain","indexOf","pause","resume","pipeOnDrainFunctionResult","dests","i","index","splice","ev","res","listenerCount","nReadingNextTick","addListener","updateReadableListening","removeAllListeners","apply","arguments","self","resume_","wrap","_this","methodWrap","method","methodWrapReturnFunction","bind","Symbol","asyncIterator","_fromList","shift","join","first","concat","consume","endReadableNT","wState","finished","iterable","opts","xs","x","l"],"sources":["C:/Users/deiby/Desktop/cloneWebCursos/paginacursos/node_modules/readable-stream/lib/_stream_readable.js"],"sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n'use strict';\r\n\r\nmodule.exports = Readable;\r\n/*<replacement>*/\r\n\r\nvar Duplex;\r\n/*</replacement>*/\r\n\r\nReadable.ReadableState = ReadableState;\r\n/*<replacement>*/\r\n\r\nvar EE = require('events').EventEmitter;\r\n\r\nvar EElistenerCount = function EElistenerCount(emitter, type) {\r\n  return emitter.listeners(type).length;\r\n};\r\n/*</replacement>*/\r\n\r\n/*<replacement>*/\r\n\r\n\r\nvar Stream = require('./internal/streams/stream');\r\n/*</replacement>*/\r\n\r\n\r\nvar Buffer = require('buffer').Buffer;\r\n\r\nvar OurUint8Array = global.Uint8Array || function () {};\r\n\r\nfunction _uint8ArrayToBuffer(chunk) {\r\n  return Buffer.from(chunk);\r\n}\r\n\r\nfunction _isUint8Array(obj) {\r\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\r\n}\r\n/*<replacement>*/\r\n\r\n\r\nvar debugUtil = require('util');\r\n\r\nvar debug;\r\n\r\nif (debugUtil && debugUtil.debuglog) {\r\n  debug = debugUtil.debuglog('stream');\r\n} else {\r\n  debug = function debug() {};\r\n}\r\n/*</replacement>*/\r\n\r\n\r\nvar BufferList = require('./internal/streams/buffer_list');\r\n\r\nvar destroyImpl = require('./internal/streams/destroy');\r\n\r\nvar _require = require('./internal/streams/state'),\r\n    getHighWaterMark = _require.getHighWaterMark;\r\n\r\nvar _require$codes = require('../errors').codes,\r\n    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\r\n    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,\r\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\r\n    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.\r\n\r\n\r\nvar StringDecoder;\r\nvar createReadableStreamAsyncIterator;\r\nvar from;\r\n\r\nrequire('inherits')(Readable, Stream);\r\n\r\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\r\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\r\n\r\nfunction prependListener(emitter, event, fn) {\r\n  // Sadly this is not cacheable as some libraries bundle their own\r\n  // event emitter implementation with them.\r\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any\r\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\r\n  // to continue to work with older versions of Node.js that do not include\r\n  // the prependListener() method. The goal is to eventually remove this hack.\r\n\r\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\r\n}\r\n\r\nfunction ReadableState(options, stream, isDuplex) {\r\n  Duplex = Duplex || require('./_stream_duplex');\r\n  options = options || {}; // Duplex streams are both readable and writable, but share\r\n  // the same options object.\r\n  // However, some cases require setting options to different\r\n  // values for the readable and the writable sides of the duplex stream.\r\n  // These options can be provided separately as readableXXX and writableXXX.\r\n\r\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to\r\n  // make all the buffer merging and length checks go away\r\n\r\n  this.objectMode = !!options.objectMode;\r\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer\r\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\r\n\r\n  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the\r\n  // linked list can remove elements from the beginning faster than\r\n  // array.shift()\r\n\r\n  this.buffer = new BufferList();\r\n  this.length = 0;\r\n  this.pipes = null;\r\n  this.pipesCount = 0;\r\n  this.flowing = null;\r\n  this.ended = false;\r\n  this.endEmitted = false;\r\n  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted\r\n  // immediately, or on a later tick.  We set this to true at first, because\r\n  // any actions that shouldn't happen until \"later\" should generally also\r\n  // not happen before the first read call.\r\n\r\n  this.sync = true; // whenever we return null, then we set a flag to say\r\n  // that we're awaiting a 'readable' event emission.\r\n\r\n  this.needReadable = false;\r\n  this.emittedReadable = false;\r\n  this.readableListening = false;\r\n  this.resumeScheduled = false;\r\n  this.paused = true; // Should close be emitted on destroy. Defaults to true.\r\n\r\n  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')\r\n\r\n  this.autoDestroy = !!options.autoDestroy; // has it been destroyed\r\n\r\n  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string\r\n  // encoding is 'binary' so we have to make this configurable.\r\n  // Everything else in the universe uses 'utf8', though.\r\n\r\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s\r\n\r\n  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled\r\n\r\n  this.readingMore = false;\r\n  this.decoder = null;\r\n  this.encoding = null;\r\n\r\n  if (options.encoding) {\r\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\r\n    this.decoder = new StringDecoder(options.encoding);\r\n    this.encoding = options.encoding;\r\n  }\r\n}\r\n\r\nfunction Readable(options) {\r\n  Duplex = Duplex || require('./_stream_duplex');\r\n  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside\r\n  // the ReadableState constructor, at least with V8 6.5\r\n\r\n  var isDuplex = this instanceof Duplex;\r\n  this._readableState = new ReadableState(options, this, isDuplex); // legacy\r\n\r\n  this.readable = true;\r\n\r\n  if (options) {\r\n    if (typeof options.read === 'function') this._read = options.read;\r\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\r\n  }\r\n\r\n  Stream.call(this);\r\n}\r\n\r\nObject.defineProperty(Readable.prototype, 'destroyed', {\r\n  // making it explicit this property is not enumerable\r\n  // because otherwise some prototype manipulation in\r\n  // userland will fail\r\n  enumerable: false,\r\n  get: function get() {\r\n    if (this._readableState === undefined) {\r\n      return false;\r\n    }\r\n\r\n    return this._readableState.destroyed;\r\n  },\r\n  set: function set(value) {\r\n    // we ignore the value if the stream\r\n    // has not been initialized yet\r\n    if (!this._readableState) {\r\n      return;\r\n    } // backward compatibility, the user is explicitly\r\n    // managing destroyed\r\n\r\n\r\n    this._readableState.destroyed = value;\r\n  }\r\n});\r\nReadable.prototype.destroy = destroyImpl.destroy;\r\nReadable.prototype._undestroy = destroyImpl.undestroy;\r\n\r\nReadable.prototype._destroy = function (err, cb) {\r\n  cb(err);\r\n}; // Manually shove something into the read() buffer.\r\n// This returns true if the highWaterMark has not been hit yet,\r\n// similar to how Writable.write() returns true if you should\r\n// write() some more.\r\n\r\n\r\nReadable.prototype.push = function (chunk, encoding) {\r\n  var state = this._readableState;\r\n  var skipChunkCheck;\r\n\r\n  if (!state.objectMode) {\r\n    if (typeof chunk === 'string') {\r\n      encoding = encoding || state.defaultEncoding;\r\n\r\n      if (encoding !== state.encoding) {\r\n        chunk = Buffer.from(chunk, encoding);\r\n        encoding = '';\r\n      }\r\n\r\n      skipChunkCheck = true;\r\n    }\r\n  } else {\r\n    skipChunkCheck = true;\r\n  }\r\n\r\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\r\n}; // Unshift should *always* be something directly out of read()\r\n\r\n\r\nReadable.prototype.unshift = function (chunk) {\r\n  return readableAddChunk(this, chunk, null, true, false);\r\n};\r\n\r\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\r\n  debug('readableAddChunk', chunk);\r\n  var state = stream._readableState;\r\n\r\n  if (chunk === null) {\r\n    state.reading = false;\r\n    onEofChunk(stream, state);\r\n  } else {\r\n    var er;\r\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\r\n\r\n    if (er) {\r\n      errorOrDestroy(stream, er);\r\n    } else if (state.objectMode || chunk && chunk.length > 0) {\r\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\r\n        chunk = _uint8ArrayToBuffer(chunk);\r\n      }\r\n\r\n      if (addToFront) {\r\n        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);\r\n      } else if (state.ended) {\r\n        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\r\n      } else if (state.destroyed) {\r\n        return false;\r\n      } else {\r\n        state.reading = false;\r\n\r\n        if (state.decoder && !encoding) {\r\n          chunk = state.decoder.write(chunk);\r\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\r\n        } else {\r\n          addChunk(stream, state, chunk, false);\r\n        }\r\n      }\r\n    } else if (!addToFront) {\r\n      state.reading = false;\r\n      maybeReadMore(stream, state);\r\n    }\r\n  } // We can push more data if we are below the highWaterMark.\r\n  // Also, if we have no data yet, we can stand some more bytes.\r\n  // This is to work around cases where hwm=0, such as the repl.\r\n\r\n\r\n  return !state.ended && (state.length < state.highWaterMark || state.length === 0);\r\n}\r\n\r\nfunction addChunk(stream, state, chunk, addToFront) {\r\n  if (state.flowing && state.length === 0 && !state.sync) {\r\n    state.awaitDrain = 0;\r\n    stream.emit('data', chunk);\r\n  } else {\r\n    // update the buffer info.\r\n    state.length += state.objectMode ? 1 : chunk.length;\r\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\r\n    if (state.needReadable) emitReadable(stream);\r\n  }\r\n\r\n  maybeReadMore(stream, state);\r\n}\r\n\r\nfunction chunkInvalid(state, chunk) {\r\n  var er;\r\n\r\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\r\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);\r\n  }\r\n\r\n  return er;\r\n}\r\n\r\nReadable.prototype.isPaused = function () {\r\n  return this._readableState.flowing === false;\r\n}; // backwards compatibility.\r\n\r\n\r\nReadable.prototype.setEncoding = function (enc) {\r\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\r\n  var decoder = new StringDecoder(enc);\r\n  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8\r\n\r\n  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:\r\n\r\n  var p = this._readableState.buffer.head;\r\n  var content = '';\r\n\r\n  while (p !== null) {\r\n    content += decoder.write(p.data);\r\n    p = p.next;\r\n  }\r\n\r\n  this._readableState.buffer.clear();\r\n\r\n  if (content !== '') this._readableState.buffer.push(content);\r\n  this._readableState.length = content.length;\r\n  return this;\r\n}; // Don't raise the hwm > 1GB\r\n\r\n\r\nvar MAX_HWM = 0x40000000;\r\n\r\nfunction computeNewHighWaterMark(n) {\r\n  if (n >= MAX_HWM) {\r\n    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.\r\n    n = MAX_HWM;\r\n  } else {\r\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\r\n    // tiny amounts\r\n    n--;\r\n    n |= n >>> 1;\r\n    n |= n >>> 2;\r\n    n |= n >>> 4;\r\n    n |= n >>> 8;\r\n    n |= n >>> 16;\r\n    n++;\r\n  }\r\n\r\n  return n;\r\n} // This function is designed to be inlinable, so please take care when making\r\n// changes to the function body.\r\n\r\n\r\nfunction howMuchToRead(n, state) {\r\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\r\n  if (state.objectMode) return 1;\r\n\r\n  if (n !== n) {\r\n    // Only flow one buffer at a time\r\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\r\n  } // If we're asking for more than the current hwm, then raise the hwm.\r\n\r\n\r\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\r\n  if (n <= state.length) return n; // Don't have enough\r\n\r\n  if (!state.ended) {\r\n    state.needReadable = true;\r\n    return 0;\r\n  }\r\n\r\n  return state.length;\r\n} // you can override either this method, or the async _read(n) below.\r\n\r\n\r\nReadable.prototype.read = function (n) {\r\n  debug('read', n);\r\n  n = parseInt(n, 10);\r\n  var state = this._readableState;\r\n  var nOrig = n;\r\n  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we\r\n  // already have a bunch of data in the buffer, then just trigger\r\n  // the 'readable' event and move on.\r\n\r\n  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {\r\n    debug('read: emitReadable', state.length, state.ended);\r\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\r\n    return null;\r\n  }\r\n\r\n  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.\r\n\r\n  if (n === 0 && state.ended) {\r\n    if (state.length === 0) endReadable(this);\r\n    return null;\r\n  } // All the actual chunk generation logic needs to be\r\n  // *below* the call to _read.  The reason is that in certain\r\n  // synthetic stream cases, such as passthrough streams, _read\r\n  // may be a completely synchronous operation which may change\r\n  // the state of the read buffer, providing enough data when\r\n  // before there was *not* enough.\r\n  //\r\n  // So, the steps are:\r\n  // 1. Figure out what the state of things will be after we do\r\n  // a read from the buffer.\r\n  //\r\n  // 2. If that resulting state will trigger a _read, then call _read.\r\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\r\n  // deeply ugly to write APIs this way, but that still doesn't mean\r\n  // that the Readable class should behave improperly, as streams are\r\n  // designed to be sync/async agnostic.\r\n  // Take note if the _read call is sync or async (ie, if the read call\r\n  // has returned yet), so that we know whether or not it's safe to emit\r\n  // 'readable' etc.\r\n  //\r\n  // 3. Actually pull the requested chunks out of the buffer and return.\r\n  // if we need a readable event, then we need to do some reading.\r\n\r\n\r\n  var doRead = state.needReadable;\r\n  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some\r\n\r\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\r\n    doRead = true;\r\n    debug('length less than watermark', doRead);\r\n  } // however, if we've ended, then there's no point, and if we're already\r\n  // reading, then it's unnecessary.\r\n\r\n\r\n  if (state.ended || state.reading) {\r\n    doRead = false;\r\n    debug('reading or ended', doRead);\r\n  } else if (doRead) {\r\n    debug('do read');\r\n    state.reading = true;\r\n    state.sync = true; // if the length is currently zero, then we *need* a readable event.\r\n\r\n    if (state.length === 0) state.needReadable = true; // call internal read method\r\n\r\n    this._read(state.highWaterMark);\r\n\r\n    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,\r\n    // and we need to re-evaluate how much data we can return to the user.\r\n\r\n    if (!state.reading) n = howMuchToRead(nOrig, state);\r\n  }\r\n\r\n  var ret;\r\n  if (n > 0) ret = fromList(n, state);else ret = null;\r\n\r\n  if (ret === null) {\r\n    state.needReadable = state.length <= state.highWaterMark;\r\n    n = 0;\r\n  } else {\r\n    state.length -= n;\r\n    state.awaitDrain = 0;\r\n  }\r\n\r\n  if (state.length === 0) {\r\n    // If we have nothing in the buffer, then we want to know\r\n    // as soon as we *do* get something into the buffer.\r\n    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.\r\n\r\n    if (nOrig !== n && state.ended) endReadable(this);\r\n  }\r\n\r\n  if (ret !== null) this.emit('data', ret);\r\n  return ret;\r\n};\r\n\r\nfunction onEofChunk(stream, state) {\r\n  debug('onEofChunk');\r\n  if (state.ended) return;\r\n\r\n  if (state.decoder) {\r\n    var chunk = state.decoder.end();\r\n\r\n    if (chunk && chunk.length) {\r\n      state.buffer.push(chunk);\r\n      state.length += state.objectMode ? 1 : chunk.length;\r\n    }\r\n  }\r\n\r\n  state.ended = true;\r\n\r\n  if (state.sync) {\r\n    // if we are sync, wait until next tick to emit the data.\r\n    // Otherwise we risk emitting data in the flow()\r\n    // the readable code triggers during a read() call\r\n    emitReadable(stream);\r\n  } else {\r\n    // emit 'readable' now to make sure it gets picked up.\r\n    state.needReadable = false;\r\n\r\n    if (!state.emittedReadable) {\r\n      state.emittedReadable = true;\r\n      emitReadable_(stream);\r\n    }\r\n  }\r\n} // Don't emit readable right away in sync mode, because this can trigger\r\n// another read() call => stack overflow.  This way, it might trigger\r\n// a nextTick recursion warning, but that's not so bad.\r\n\r\n\r\nfunction emitReadable(stream) {\r\n  var state = stream._readableState;\r\n  debug('emitReadable', state.needReadable, state.emittedReadable);\r\n  state.needReadable = false;\r\n\r\n  if (!state.emittedReadable) {\r\n    debug('emitReadable', state.flowing);\r\n    state.emittedReadable = true;\r\n    process.nextTick(emitReadable_, stream);\r\n  }\r\n}\r\n\r\nfunction emitReadable_(stream) {\r\n  var state = stream._readableState;\r\n  debug('emitReadable_', state.destroyed, state.length, state.ended);\r\n\r\n  if (!state.destroyed && (state.length || state.ended)) {\r\n    stream.emit('readable');\r\n    state.emittedReadable = false;\r\n  } // The stream needs another readable event if\r\n  // 1. It is not flowing, as the flow mechanism will take\r\n  //    care of it.\r\n  // 2. It is not ended.\r\n  // 3. It is below the highWaterMark, so we can schedule\r\n  //    another readable later.\r\n\r\n\r\n  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;\r\n  flow(stream);\r\n} // at this point, the user has presumably seen the 'readable' event,\r\n// and called read() to consume some data.  that may have triggered\r\n// in turn another _read(n) call, in which case reading = true if\r\n// it's in progress.\r\n// However, if we're not ended, or reading, and the length < hwm,\r\n// then go ahead and try to read some more preemptively.\r\n\r\n\r\nfunction maybeReadMore(stream, state) {\r\n  if (!state.readingMore) {\r\n    state.readingMore = true;\r\n    process.nextTick(maybeReadMore_, stream, state);\r\n  }\r\n}\r\n\r\nfunction maybeReadMore_(stream, state) {\r\n  // Attempt to read more data if we should.\r\n  //\r\n  // The conditions for reading more data are (one of):\r\n  // - Not enough data buffered (state.length < state.highWaterMark). The loop\r\n  //   is responsible for filling the buffer with enough data if such data\r\n  //   is available. If highWaterMark is 0 and we are not in the flowing mode\r\n  //   we should _not_ attempt to buffer any extra data. We'll get more data\r\n  //   when the stream consumer calls read() instead.\r\n  // - No data in the buffer, and the stream is in flowing mode. In this mode\r\n  //   the loop below is responsible for ensuring read() is called. Failing to\r\n  //   call read here would abort the flow and there's no other mechanism for\r\n  //   continuing the flow if the stream consumer has just subscribed to the\r\n  //   'data' event.\r\n  //\r\n  // In addition to the above conditions to keep reading data, the following\r\n  // conditions prevent the data from being read:\r\n  // - The stream has ended (state.ended).\r\n  // - There is already a pending 'read' operation (state.reading). This is a\r\n  //   case where the the stream has called the implementation defined _read()\r\n  //   method, but they are processing the call asynchronously and have _not_\r\n  //   called push() with new data. In this case we skip performing more\r\n  //   read()s. The execution ends in this method again after the _read() ends\r\n  //   up calling push() with more data.\r\n  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {\r\n    var len = state.length;\r\n    debug('maybeReadMore read 0');\r\n    stream.read(0);\r\n    if (len === state.length) // didn't get any data, stop spinning.\r\n      break;\r\n  }\r\n\r\n  state.readingMore = false;\r\n} // abstract method.  to be overridden in specific implementation classes.\r\n// call cb(er, data) where data is <= n in length.\r\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\r\n// arbitrary, and perhaps not very meaningful.\r\n\r\n\r\nReadable.prototype._read = function (n) {\r\n  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));\r\n};\r\n\r\nReadable.prototype.pipe = function (dest, pipeOpts) {\r\n  var src = this;\r\n  var state = this._readableState;\r\n\r\n  switch (state.pipesCount) {\r\n    case 0:\r\n      state.pipes = dest;\r\n      break;\r\n\r\n    case 1:\r\n      state.pipes = [state.pipes, dest];\r\n      break;\r\n\r\n    default:\r\n      state.pipes.push(dest);\r\n      break;\r\n  }\r\n\r\n  state.pipesCount += 1;\r\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\r\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\r\n  var endFn = doEnd ? onend : unpipe;\r\n  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);\r\n  dest.on('unpipe', onunpipe);\r\n\r\n  function onunpipe(readable, unpipeInfo) {\r\n    debug('onunpipe');\r\n\r\n    if (readable === src) {\r\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\r\n        unpipeInfo.hasUnpiped = true;\r\n        cleanup();\r\n      }\r\n    }\r\n  }\r\n\r\n  function onend() {\r\n    debug('onend');\r\n    dest.end();\r\n  } // when the dest drains, it reduces the awaitDrain counter\r\n  // on the source.  This would be more elegant with a .once()\r\n  // handler in flow(), but adding and removing repeatedly is\r\n  // too slow.\r\n\r\n\r\n  var ondrain = pipeOnDrain(src);\r\n  dest.on('drain', ondrain);\r\n  var cleanedUp = false;\r\n\r\n  function cleanup() {\r\n    debug('cleanup'); // cleanup event handlers once the pipe is broken\r\n\r\n    dest.removeListener('close', onclose);\r\n    dest.removeListener('finish', onfinish);\r\n    dest.removeListener('drain', ondrain);\r\n    dest.removeListener('error', onerror);\r\n    dest.removeListener('unpipe', onunpipe);\r\n    src.removeListener('end', onend);\r\n    src.removeListener('end', unpipe);\r\n    src.removeListener('data', ondata);\r\n    cleanedUp = true; // if the reader is waiting for a drain event from this\r\n    // specific writer, then it would cause it to never start\r\n    // flowing again.\r\n    // So, if this is awaiting a drain, then we just call it now.\r\n    // If we don't know, then assume that we are waiting for one.\r\n\r\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\r\n  }\r\n\r\n  src.on('data', ondata);\r\n\r\n  function ondata(chunk) {\r\n    debug('ondata');\r\n    var ret = dest.write(chunk);\r\n    debug('dest.write', ret);\r\n\r\n    if (ret === false) {\r\n      // If the user unpiped during `dest.write()`, it is possible\r\n      // to get stuck in a permanently paused state if that write\r\n      // also returned false.\r\n      // => Check whether `dest` is still a piping destination.\r\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\r\n        debug('false write response, pause', state.awaitDrain);\r\n        state.awaitDrain++;\r\n      }\r\n\r\n      src.pause();\r\n    }\r\n  } // if the dest has an error, then stop piping into it.\r\n  // however, don't suppress the throwing behavior for this.\r\n\r\n\r\n  function onerror(er) {\r\n    debug('onerror', er);\r\n    unpipe();\r\n    dest.removeListener('error', onerror);\r\n    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);\r\n  } // Make sure our error handler is attached before userland ones.\r\n\r\n\r\n  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.\r\n\r\n  function onclose() {\r\n    dest.removeListener('finish', onfinish);\r\n    unpipe();\r\n  }\r\n\r\n  dest.once('close', onclose);\r\n\r\n  function onfinish() {\r\n    debug('onfinish');\r\n    dest.removeListener('close', onclose);\r\n    unpipe();\r\n  }\r\n\r\n  dest.once('finish', onfinish);\r\n\r\n  function unpipe() {\r\n    debug('unpipe');\r\n    src.unpipe(dest);\r\n  } // tell the dest that it's being piped to\r\n\r\n\r\n  dest.emit('pipe', src); // start the flow if it hasn't been started already.\r\n\r\n  if (!state.flowing) {\r\n    debug('pipe resume');\r\n    src.resume();\r\n  }\r\n\r\n  return dest;\r\n};\r\n\r\nfunction pipeOnDrain(src) {\r\n  return function pipeOnDrainFunctionResult() {\r\n    var state = src._readableState;\r\n    debug('pipeOnDrain', state.awaitDrain);\r\n    if (state.awaitDrain) state.awaitDrain--;\r\n\r\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\r\n      state.flowing = true;\r\n      flow(src);\r\n    }\r\n  };\r\n}\r\n\r\nReadable.prototype.unpipe = function (dest) {\r\n  var state = this._readableState;\r\n  var unpipeInfo = {\r\n    hasUnpiped: false\r\n  }; // if we're not piping anywhere, then do nothing.\r\n\r\n  if (state.pipesCount === 0) return this; // just one destination.  most common case.\r\n\r\n  if (state.pipesCount === 1) {\r\n    // passed in one, but it's not the right one.\r\n    if (dest && dest !== state.pipes) return this;\r\n    if (!dest) dest = state.pipes; // got a match.\r\n\r\n    state.pipes = null;\r\n    state.pipesCount = 0;\r\n    state.flowing = false;\r\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\r\n    return this;\r\n  } // slow case. multiple pipe destinations.\r\n\r\n\r\n  if (!dest) {\r\n    // remove all.\r\n    var dests = state.pipes;\r\n    var len = state.pipesCount;\r\n    state.pipes = null;\r\n    state.pipesCount = 0;\r\n    state.flowing = false;\r\n\r\n    for (var i = 0; i < len; i++) {\r\n      dests[i].emit('unpipe', this, {\r\n        hasUnpiped: false\r\n      });\r\n    }\r\n\r\n    return this;\r\n  } // try to find the right one.\r\n\r\n\r\n  var index = indexOf(state.pipes, dest);\r\n  if (index === -1) return this;\r\n  state.pipes.splice(index, 1);\r\n  state.pipesCount -= 1;\r\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\r\n  dest.emit('unpipe', this, unpipeInfo);\r\n  return this;\r\n}; // set up data events if they are asked for\r\n// Ensure readable listeners eventually get something\r\n\r\n\r\nReadable.prototype.on = function (ev, fn) {\r\n  var res = Stream.prototype.on.call(this, ev, fn);\r\n  var state = this._readableState;\r\n\r\n  if (ev === 'data') {\r\n    // update readableListening so that resume() may be a no-op\r\n    // a few lines down. This is needed to support once('readable').\r\n    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused\r\n\r\n    if (state.flowing !== false) this.resume();\r\n  } else if (ev === 'readable') {\r\n    if (!state.endEmitted && !state.readableListening) {\r\n      state.readableListening = state.needReadable = true;\r\n      state.flowing = false;\r\n      state.emittedReadable = false;\r\n      debug('on readable', state.length, state.reading);\r\n\r\n      if (state.length) {\r\n        emitReadable(this);\r\n      } else if (!state.reading) {\r\n        process.nextTick(nReadingNextTick, this);\r\n      }\r\n    }\r\n  }\r\n\r\n  return res;\r\n};\r\n\r\nReadable.prototype.addListener = Readable.prototype.on;\r\n\r\nReadable.prototype.removeListener = function (ev, fn) {\r\n  var res = Stream.prototype.removeListener.call(this, ev, fn);\r\n\r\n  if (ev === 'readable') {\r\n    // We need to check if there is someone still listening to\r\n    // readable and reset the state. However this needs to happen\r\n    // after readable has been emitted but before I/O (nextTick) to\r\n    // support once('readable', fn) cycles. This means that calling\r\n    // resume within the same tick will have no\r\n    // effect.\r\n    process.nextTick(updateReadableListening, this);\r\n  }\r\n\r\n  return res;\r\n};\r\n\r\nReadable.prototype.removeAllListeners = function (ev) {\r\n  var res = Stream.prototype.removeAllListeners.apply(this, arguments);\r\n\r\n  if (ev === 'readable' || ev === undefined) {\r\n    // We need to check if there is someone still listening to\r\n    // readable and reset the state. However this needs to happen\r\n    // after readable has been emitted but before I/O (nextTick) to\r\n    // support once('readable', fn) cycles. This means that calling\r\n    // resume within the same tick will have no\r\n    // effect.\r\n    process.nextTick(updateReadableListening, this);\r\n  }\r\n\r\n  return res;\r\n};\r\n\r\nfunction updateReadableListening(self) {\r\n  var state = self._readableState;\r\n  state.readableListening = self.listenerCount('readable') > 0;\r\n\r\n  if (state.resumeScheduled && !state.paused) {\r\n    // flowing needs to be set to true now, otherwise\r\n    // the upcoming resume will not flow.\r\n    state.flowing = true; // crude way to check if we should resume\r\n  } else if (self.listenerCount('data') > 0) {\r\n    self.resume();\r\n  }\r\n}\r\n\r\nfunction nReadingNextTick(self) {\r\n  debug('readable nexttick read 0');\r\n  self.read(0);\r\n} // pause() and resume() are remnants of the legacy readable stream API\r\n// If the user uses them, then switch into old mode.\r\n\r\n\r\nReadable.prototype.resume = function () {\r\n  var state = this._readableState;\r\n\r\n  if (!state.flowing) {\r\n    debug('resume'); // we flow only if there is no one listening\r\n    // for readable, but we still have to call\r\n    // resume()\r\n\r\n    state.flowing = !state.readableListening;\r\n    resume(this, state);\r\n  }\r\n\r\n  state.paused = false;\r\n  return this;\r\n};\r\n\r\nfunction resume(stream, state) {\r\n  if (!state.resumeScheduled) {\r\n    state.resumeScheduled = true;\r\n    process.nextTick(resume_, stream, state);\r\n  }\r\n}\r\n\r\nfunction resume_(stream, state) {\r\n  debug('resume', state.reading);\r\n\r\n  if (!state.reading) {\r\n    stream.read(0);\r\n  }\r\n\r\n  state.resumeScheduled = false;\r\n  stream.emit('resume');\r\n  flow(stream);\r\n  if (state.flowing && !state.reading) stream.read(0);\r\n}\r\n\r\nReadable.prototype.pause = function () {\r\n  debug('call pause flowing=%j', this._readableState.flowing);\r\n\r\n  if (this._readableState.flowing !== false) {\r\n    debug('pause');\r\n    this._readableState.flowing = false;\r\n    this.emit('pause');\r\n  }\r\n\r\n  this._readableState.paused = true;\r\n  return this;\r\n};\r\n\r\nfunction flow(stream) {\r\n  var state = stream._readableState;\r\n  debug('flow', state.flowing);\r\n\r\n  while (state.flowing && stream.read() !== null) {\r\n    ;\r\n  }\r\n} // wrap an old-style stream as the async data source.\r\n// This is *not* part of the readable stream interface.\r\n// It is an ugly unfortunate mess of history.\r\n\r\n\r\nReadable.prototype.wrap = function (stream) {\r\n  var _this = this;\r\n\r\n  var state = this._readableState;\r\n  var paused = false;\r\n  stream.on('end', function () {\r\n    debug('wrapped end');\r\n\r\n    if (state.decoder && !state.ended) {\r\n      var chunk = state.decoder.end();\r\n      if (chunk && chunk.length) _this.push(chunk);\r\n    }\r\n\r\n    _this.push(null);\r\n  });\r\n  stream.on('data', function (chunk) {\r\n    debug('wrapped data');\r\n    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode\r\n\r\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\r\n\r\n    var ret = _this.push(chunk);\r\n\r\n    if (!ret) {\r\n      paused = true;\r\n      stream.pause();\r\n    }\r\n  }); // proxy all the other methods.\r\n  // important when wrapping filters and duplexes.\r\n\r\n  for (var i in stream) {\r\n    if (this[i] === undefined && typeof stream[i] === 'function') {\r\n      this[i] = function methodWrap(method) {\r\n        return function methodWrapReturnFunction() {\r\n          return stream[method].apply(stream, arguments);\r\n        };\r\n      }(i);\r\n    }\r\n  } // proxy certain important events.\r\n\r\n\r\n  for (var n = 0; n < kProxyEvents.length; n++) {\r\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\r\n  } // when we try to consume some more bytes, simply unpause the\r\n  // underlying stream.\r\n\r\n\r\n  this._read = function (n) {\r\n    debug('wrapped _read', n);\r\n\r\n    if (paused) {\r\n      paused = false;\r\n      stream.resume();\r\n    }\r\n  };\r\n\r\n  return this;\r\n};\r\n\r\nif (typeof Symbol === 'function') {\r\n  Readable.prototype[Symbol.asyncIterator] = function () {\r\n    if (createReadableStreamAsyncIterator === undefined) {\r\n      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');\r\n    }\r\n\r\n    return createReadableStreamAsyncIterator(this);\r\n  };\r\n}\r\n\r\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\r\n  // making it explicit this property is not enumerable\r\n  // because otherwise some prototype manipulation in\r\n  // userland will fail\r\n  enumerable: false,\r\n  get: function get() {\r\n    return this._readableState.highWaterMark;\r\n  }\r\n});\r\nObject.defineProperty(Readable.prototype, 'readableBuffer', {\r\n  // making it explicit this property is not enumerable\r\n  // because otherwise some prototype manipulation in\r\n  // userland will fail\r\n  enumerable: false,\r\n  get: function get() {\r\n    return this._readableState && this._readableState.buffer;\r\n  }\r\n});\r\nObject.defineProperty(Readable.prototype, 'readableFlowing', {\r\n  // making it explicit this property is not enumerable\r\n  // because otherwise some prototype manipulation in\r\n  // userland will fail\r\n  enumerable: false,\r\n  get: function get() {\r\n    return this._readableState.flowing;\r\n  },\r\n  set: function set(state) {\r\n    if (this._readableState) {\r\n      this._readableState.flowing = state;\r\n    }\r\n  }\r\n}); // exposed for testing purposes only.\r\n\r\nReadable._fromList = fromList;\r\nObject.defineProperty(Readable.prototype, 'readableLength', {\r\n  // making it explicit this property is not enumerable\r\n  // because otherwise some prototype manipulation in\r\n  // userland will fail\r\n  enumerable: false,\r\n  get: function get() {\r\n    return this._readableState.length;\r\n  }\r\n}); // Pluck off n bytes from an array of buffers.\r\n// Length is the combined lengths of all the buffers in the list.\r\n// This function is designed to be inlinable, so please take care when making\r\n// changes to the function body.\r\n\r\nfunction fromList(n, state) {\r\n  // nothing buffered\r\n  if (state.length === 0) return null;\r\n  var ret;\r\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\r\n    // read it all, truncate the list\r\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);\r\n    state.buffer.clear();\r\n  } else {\r\n    // read part of list\r\n    ret = state.buffer.consume(n, state.decoder);\r\n  }\r\n  return ret;\r\n}\r\n\r\nfunction endReadable(stream) {\r\n  var state = stream._readableState;\r\n  debug('endReadable', state.endEmitted);\r\n\r\n  if (!state.endEmitted) {\r\n    state.ended = true;\r\n    process.nextTick(endReadableNT, state, stream);\r\n  }\r\n}\r\n\r\nfunction endReadableNT(state, stream) {\r\n  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.\r\n\r\n  if (!state.endEmitted && state.length === 0) {\r\n    state.endEmitted = true;\r\n    stream.readable = false;\r\n    stream.emit('end');\r\n\r\n    if (state.autoDestroy) {\r\n      // In case of duplex streams we need a way to detect\r\n      // if the writable side is ready for autoDestroy as well\r\n      var wState = stream._writableState;\r\n\r\n      if (!wState || wState.autoDestroy && wState.finished) {\r\n        stream.destroy();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nif (typeof Symbol === 'function') {\r\n  Readable.from = function (iterable, opts) {\r\n    if (from === undefined) {\r\n      from = require('./internal/streams/from');\r\n    }\r\n\r\n    return from(Readable, iterable, opts);\r\n  };\r\n}\r\n\r\nfunction indexOf(xs, x) {\r\n  for (var i = 0, l = xs.length; i < l; i++) {\r\n    if (xs[i] === x) return i;\r\n  }\r\n\r\n  return -1;\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}