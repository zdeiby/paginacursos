{"ast":null,"code":"'use strict';\n\nconst services = require('./services.json');\nconst normalized = {};\nObject.keys(services).forEach(key => {\n  let service = services[key];\n  normalized[normalizeKey(key)] = normalizeService(service);\n  [].concat(service.aliases || []).forEach(alias => {\n    normalized[normalizeKey(alias)] = normalizeService(service);\n  });\n  [].concat(service.domains || []).forEach(domain => {\n    normalized[normalizeKey(domain)] = normalizeService(service);\n  });\n});\nfunction normalizeKey(key) {\n  return key.replace(/[^a-zA-Z0-9.-]/g, '').toLowerCase();\n}\nfunction normalizeService(service) {\n  let filter = ['domains', 'aliases'];\n  let response = {};\n  Object.keys(service).forEach(key => {\n    if (filter.indexOf(key) < 0) {\n      response[key] = service[key];\n    }\n  });\n  return response;\n}\n\n/**\n * Resolves SMTP config for given key. Key can be a name (like 'Gmail'), alias (like 'Google Mail') or\n * an email address (like 'test@googlemail.com').\n *\n * @param {String} key [description]\n * @returns {Object} SMTP config or false if not found\n */\nmodule.exports = function (key) {\n  key = normalizeKey(key.split('@').pop());\n  return normalized[key] || false;\n};","map":{"version":3,"names":["services","require","normalized","Object","keys","forEach","key","service","normalizeKey","normalizeService","concat","aliases","alias","domains","domain","replace","toLowerCase","filter","response","indexOf","module","exports","split","pop"],"sources":["C:/Users/deiby/Desktop/cloneWebCursos/paginacursos/node_modules/nodemailer/lib/well-known/index.js"],"sourcesContent":["'use strict';\n\nconst services = require('./services.json');\nconst normalized = {};\n\nObject.keys(services).forEach(key => {\n    let service = services[key];\n\n    normalized[normalizeKey(key)] = normalizeService(service);\n\n    [].concat(service.aliases || []).forEach(alias => {\n        normalized[normalizeKey(alias)] = normalizeService(service);\n    });\n\n    [].concat(service.domains || []).forEach(domain => {\n        normalized[normalizeKey(domain)] = normalizeService(service);\n    });\n});\n\nfunction normalizeKey(key) {\n    return key.replace(/[^a-zA-Z0-9.-]/g, '').toLowerCase();\n}\n\nfunction normalizeService(service) {\n    let filter = ['domains', 'aliases'];\n    let response = {};\n\n    Object.keys(service).forEach(key => {\n        if (filter.indexOf(key) < 0) {\n            response[key] = service[key];\n        }\n    });\n\n    return response;\n}\n\n/**\n * Resolves SMTP config for given key. Key can be a name (like 'Gmail'), alias (like 'Google Mail') or\n * an email address (like 'test@googlemail.com').\n *\n * @param {String} key [description]\n * @returns {Object} SMTP config or false if not found\n */\nmodule.exports = function (key) {\n    key = normalizeKey(key.split('@').pop());\n    return normalized[key] || false;\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,QAAQ,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAC3C,MAAMC,UAAU,GAAG,CAAC,CAAC;AAErBC,MAAM,CAACC,IAAI,CAACJ,QAAQ,CAAC,CAACK,OAAO,CAACC,GAAG,IAAI;EACjC,IAAIC,OAAO,GAAGP,QAAQ,CAACM,GAAG,CAAC;EAE3BJ,UAAU,CAACM,YAAY,CAACF,GAAG,CAAC,CAAC,GAAGG,gBAAgB,CAACF,OAAO,CAAC;EAEzD,EAAE,CAACG,MAAM,CAACH,OAAO,CAACI,OAAO,IAAI,EAAE,CAAC,CAACN,OAAO,CAACO,KAAK,IAAI;IAC9CV,UAAU,CAACM,YAAY,CAACI,KAAK,CAAC,CAAC,GAAGH,gBAAgB,CAACF,OAAO,CAAC;EAC/D,CAAC,CAAC;EAEF,EAAE,CAACG,MAAM,CAACH,OAAO,CAACM,OAAO,IAAI,EAAE,CAAC,CAACR,OAAO,CAACS,MAAM,IAAI;IAC/CZ,UAAU,CAACM,YAAY,CAACM,MAAM,CAAC,CAAC,GAAGL,gBAAgB,CAACF,OAAO,CAAC;EAChE,CAAC,CAAC;AACN,CAAC,CAAC;AAEF,SAASC,YAAY,CAACF,GAAG,EAAE;EACvB,OAAOA,GAAG,CAACS,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAACC,WAAW,EAAE;AAC3D;AAEA,SAASP,gBAAgB,CAACF,OAAO,EAAE;EAC/B,IAAIU,MAAM,GAAG,CAAC,SAAS,EAAE,SAAS,CAAC;EACnC,IAAIC,QAAQ,GAAG,CAAC,CAAC;EAEjBf,MAAM,CAACC,IAAI,CAACG,OAAO,CAAC,CAACF,OAAO,CAACC,GAAG,IAAI;IAChC,IAAIW,MAAM,CAACE,OAAO,CAACb,GAAG,CAAC,GAAG,CAAC,EAAE;MACzBY,QAAQ,CAACZ,GAAG,CAAC,GAAGC,OAAO,CAACD,GAAG,CAAC;IAChC;EACJ,CAAC,CAAC;EAEF,OAAOY,QAAQ;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,MAAM,CAACC,OAAO,GAAG,UAAUf,GAAG,EAAE;EAC5BA,GAAG,GAAGE,YAAY,CAACF,GAAG,CAACgB,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,EAAE,CAAC;EACxC,OAAOrB,UAAU,CAACI,GAAG,CAAC,IAAI,KAAK;AACnC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}