{"ast":null,"code":"'use strict';\n\nconst spawn = require('child_process').spawn;\nconst packageData = require('../../package.json');\nconst shared = require('../shared');\n\n/**\n * Generates a Transport object for Sendmail\n *\n * Possible options can be the following:\n *\n *  * **path** optional path to sendmail binary\n *  * **newline** either 'windows' or 'unix'\n *  * **args** an array of arguments for the sendmail binary\n *\n * @constructor\n * @param {Object} optional config parameter for Sendmail\n */\nclass SendmailTransport {\n  constructor(options) {\n    options = options || {};\n\n    // use a reference to spawn for mocking purposes\n    this._spawn = spawn;\n    this.options = options || {};\n    this.name = 'Sendmail';\n    this.version = packageData.version;\n    this.path = 'sendmail';\n    this.args = false;\n    this.winbreak = false;\n    this.logger = shared.getLogger(this.options, {\n      component: this.options.component || 'sendmail'\n    });\n    if (options) {\n      if (typeof options === 'string') {\n        this.path = options;\n      } else if (typeof options === 'object') {\n        if (options.path) {\n          this.path = options.path;\n        }\n        if (Array.isArray(options.args)) {\n          this.args = options.args;\n        }\n        this.winbreak = ['win', 'windows', 'dos', '\\r\\n'].includes((options.newline || '').toString().toLowerCase());\n      }\n    }\n  }\n\n  /**\n   * <p>Compiles a mailcomposer message and forwards it to handler that sends it.</p>\n   *\n   * @param {Object} emailMessage MailComposer object\n   * @param {Function} callback Callback function to run when the sending is completed\n   */\n  send(mail, done) {\n    // Sendmail strips this header line by itself\n    mail.message.keepBcc = true;\n    let envelope = mail.data.envelope || mail.message.getEnvelope();\n    let messageId = mail.message.messageId();\n    let args;\n    let sendmail;\n    let returned;\n    const hasInvalidAddresses = [].concat(envelope.from || []).concat(envelope.to || []).some(addr => /^-/.test(addr));\n    if (hasInvalidAddresses) {\n      return done(new Error('Can not send mail. Invalid envelope addresses.'));\n    }\n    if (this.args) {\n      // force -i to keep single dots\n      args = ['-i'].concat(this.args).concat(envelope.to);\n    } else {\n      args = ['-i'].concat(envelope.from ? ['-f', envelope.from] : []).concat(envelope.to);\n    }\n    let callback = err => {\n      if (returned) {\n        // ignore any additional responses, already done\n        return;\n      }\n      returned = true;\n      if (typeof done === 'function') {\n        if (err) {\n          return done(err);\n        } else {\n          return done(null, {\n            envelope: mail.data.envelope || mail.message.getEnvelope(),\n            messageId,\n            response: 'Messages queued for delivery'\n          });\n        }\n      }\n    };\n    try {\n      sendmail = this._spawn(this.path, args);\n    } catch (E) {\n      this.logger.error({\n        err: E,\n        tnx: 'spawn',\n        messageId\n      }, 'Error occurred while spawning sendmail. %s', E.message);\n      return callback(E);\n    }\n    if (sendmail) {\n      sendmail.on('error', err => {\n        this.logger.error({\n          err,\n          tnx: 'spawn',\n          messageId\n        }, 'Error occurred when sending message %s. %s', messageId, err.message);\n        callback(err);\n      });\n      sendmail.once('exit', code => {\n        if (!code) {\n          return callback();\n        }\n        let err;\n        if (code === 127) {\n          err = new Error('Sendmail command not found, process exited with code ' + code);\n        } else {\n          err = new Error('Sendmail exited with code ' + code);\n        }\n        this.logger.error({\n          err,\n          tnx: 'stdin',\n          messageId\n        }, 'Error sending message %s to sendmail. %s', messageId, err.message);\n        callback(err);\n      });\n      sendmail.once('close', callback);\n      sendmail.stdin.on('error', err => {\n        this.logger.error({\n          err,\n          tnx: 'stdin',\n          messageId\n        }, 'Error occurred when piping message %s to sendmail. %s', messageId, err.message);\n        callback(err);\n      });\n      let recipients = [].concat(envelope.to || []);\n      if (recipients.length > 3) {\n        recipients.push('...and ' + recipients.splice(2).length + ' more');\n      }\n      this.logger.info({\n        tnx: 'send',\n        messageId\n      }, 'Sending message %s to <%s>', messageId, recipients.join(', '));\n      let sourceStream = mail.message.createReadStream();\n      sourceStream.once('error', err => {\n        this.logger.error({\n          err,\n          tnx: 'stdin',\n          messageId\n        }, 'Error occurred when generating message %s. %s', messageId, err.message);\n        sendmail.kill('SIGINT'); // do not deliver the message\n        callback(err);\n      });\n      sourceStream.pipe(sendmail.stdin);\n    } else {\n      return callback(new Error('sendmail was not found'));\n    }\n  }\n}\nmodule.exports = SendmailTransport;","map":{"version":3,"names":["spawn","require","packageData","shared","SendmailTransport","constructor","options","_spawn","name","version","path","args","winbreak","logger","getLogger","component","Array","isArray","includes","newline","toString","toLowerCase","send","mail","done","message","keepBcc","envelope","data","getEnvelope","messageId","sendmail","returned","hasInvalidAddresses","concat","from","to","some","addr","test","Error","callback","err","response","E","error","tnx","on","once","code","stdin","recipients","length","push","splice","info","join","sourceStream","createReadStream","kill","pipe","module","exports"],"sources":["C:/Users/deiby/Desktop/cloneWebCursos/paginacursos/node_modules/nodemailer/lib/sendmail-transport/index.js"],"sourcesContent":["'use strict';\n\nconst spawn = require('child_process').spawn;\nconst packageData = require('../../package.json');\nconst shared = require('../shared');\n\n/**\n * Generates a Transport object for Sendmail\n *\n * Possible options can be the following:\n *\n *  * **path** optional path to sendmail binary\n *  * **newline** either 'windows' or 'unix'\n *  * **args** an array of arguments for the sendmail binary\n *\n * @constructor\n * @param {Object} optional config parameter for Sendmail\n */\nclass SendmailTransport {\n    constructor(options) {\n        options = options || {};\n\n        // use a reference to spawn for mocking purposes\n        this._spawn = spawn;\n\n        this.options = options || {};\n\n        this.name = 'Sendmail';\n        this.version = packageData.version;\n\n        this.path = 'sendmail';\n        this.args = false;\n        this.winbreak = false;\n\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || 'sendmail'\n        });\n\n        if (options) {\n            if (typeof options === 'string') {\n                this.path = options;\n            } else if (typeof options === 'object') {\n                if (options.path) {\n                    this.path = options.path;\n                }\n                if (Array.isArray(options.args)) {\n                    this.args = options.args;\n                }\n                this.winbreak = ['win', 'windows', 'dos', '\\r\\n'].includes((options.newline || '').toString().toLowerCase());\n            }\n        }\n    }\n\n    /**\n     * <p>Compiles a mailcomposer message and forwards it to handler that sends it.</p>\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */\n    send(mail, done) {\n        // Sendmail strips this header line by itself\n        mail.message.keepBcc = true;\n\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n        let args;\n        let sendmail;\n        let returned;\n\n        const hasInvalidAddresses = []\n            .concat(envelope.from || [])\n            .concat(envelope.to || [])\n            .some(addr => /^-/.test(addr));\n        if (hasInvalidAddresses) {\n            return done(new Error('Can not send mail. Invalid envelope addresses.'));\n        }\n\n        if (this.args) {\n            // force -i to keep single dots\n            args = ['-i'].concat(this.args).concat(envelope.to);\n        } else {\n            args = ['-i'].concat(envelope.from ? ['-f', envelope.from] : []).concat(envelope.to);\n        }\n\n        let callback = err => {\n            if (returned) {\n                // ignore any additional responses, already done\n                return;\n            }\n            returned = true;\n            if (typeof done === 'function') {\n                if (err) {\n                    return done(err);\n                } else {\n                    return done(null, {\n                        envelope: mail.data.envelope || mail.message.getEnvelope(),\n                        messageId,\n                        response: 'Messages queued for delivery'\n                    });\n                }\n            }\n        };\n\n        try {\n            sendmail = this._spawn(this.path, args);\n        } catch (E) {\n            this.logger.error(\n                {\n                    err: E,\n                    tnx: 'spawn',\n                    messageId\n                },\n                'Error occurred while spawning sendmail. %s',\n                E.message\n            );\n            return callback(E);\n        }\n\n        if (sendmail) {\n            sendmail.on('error', err => {\n                this.logger.error(\n                    {\n                        err,\n                        tnx: 'spawn',\n                        messageId\n                    },\n                    'Error occurred when sending message %s. %s',\n                    messageId,\n                    err.message\n                );\n                callback(err);\n            });\n\n            sendmail.once('exit', code => {\n                if (!code) {\n                    return callback();\n                }\n                let err;\n                if (code === 127) {\n                    err = new Error('Sendmail command not found, process exited with code ' + code);\n                } else {\n                    err = new Error('Sendmail exited with code ' + code);\n                }\n\n                this.logger.error(\n                    {\n                        err,\n                        tnx: 'stdin',\n                        messageId\n                    },\n                    'Error sending message %s to sendmail. %s',\n                    messageId,\n                    err.message\n                );\n                callback(err);\n            });\n            sendmail.once('close', callback);\n\n            sendmail.stdin.on('error', err => {\n                this.logger.error(\n                    {\n                        err,\n                        tnx: 'stdin',\n                        messageId\n                    },\n                    'Error occurred when piping message %s to sendmail. %s',\n                    messageId,\n                    err.message\n                );\n                callback(err);\n            });\n\n            let recipients = [].concat(envelope.to || []);\n            if (recipients.length > 3) {\n                recipients.push('...and ' + recipients.splice(2).length + ' more');\n            }\n            this.logger.info(\n                {\n                    tnx: 'send',\n                    messageId\n                },\n                'Sending message %s to <%s>',\n                messageId,\n                recipients.join(', ')\n            );\n\n            let sourceStream = mail.message.createReadStream();\n            sourceStream.once('error', err => {\n                this.logger.error(\n                    {\n                        err,\n                        tnx: 'stdin',\n                        messageId\n                    },\n                    'Error occurred when generating message %s. %s',\n                    messageId,\n                    err.message\n                );\n                sendmail.kill('SIGINT'); // do not deliver the message\n                callback(err);\n            });\n\n            sourceStream.pipe(sendmail.stdin);\n        } else {\n            return callback(new Error('sendmail was not found'));\n        }\n    }\n}\n\nmodule.exports = SendmailTransport;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}