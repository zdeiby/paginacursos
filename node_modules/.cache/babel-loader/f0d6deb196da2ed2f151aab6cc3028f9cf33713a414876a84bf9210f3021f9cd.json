{"ast":null,"code":"'use strict';\n\n// streams through a message body and calculates relaxed body hash\nconst Transform = require('stream').Transform;\nconst crypto = require('crypto');\nclass RelaxedBody extends Transform {\n  constructor(options) {\n    super();\n    options = options || {};\n    this.chunkBuffer = [];\n    this.chunkBufferLen = 0;\n    this.bodyHash = crypto.createHash(options.hashAlgo || 'sha1');\n    this.remainder = '';\n    this.byteLength = 0;\n    this.debug = options.debug;\n    this._debugBody = options.debug ? [] : false;\n  }\n  updateHash(chunk) {\n    let bodyStr;\n\n    // find next remainder\n    let nextRemainder = '';\n\n    // This crux finds and removes the spaces from the last line and the newline characters after the last non-empty line\n    // If we get another chunk that does not match this description then we can restore the previously processed data\n    let state = 'file';\n    for (let i = chunk.length - 1; i >= 0; i--) {\n      let c = chunk[i];\n      if (state === 'file' && (c === 0x0a || c === 0x0d)) {\n        // do nothing, found \\n or \\r at the end of chunk, stil end of file\n      } else if (state === 'file' && (c === 0x09 || c === 0x20)) {\n        // switch to line ending mode, this is the last non-empty line\n        state = 'line';\n      } else if (state === 'line' && (c === 0x09 || c === 0x20)) {\n        // do nothing, found ' ' or \\t at the end of line, keep processing the last non-empty line\n      } else if (state === 'file' || state === 'line') {\n        // non line/file ending character found, switch to body mode\n        state = 'body';\n        if (i === chunk.length - 1) {\n          // final char is not part of line end or file end, so do nothing\n          break;\n        }\n      }\n      if (i === 0) {\n        // reached to the beginning of the chunk, check if it is still about the ending\n        // and if the remainder also matches\n        if (state === 'file' && (!this.remainder || /[\\r\\n]$/.test(this.remainder)) || state === 'line' && (!this.remainder || /[ \\t]$/.test(this.remainder))) {\n          // keep everything\n          this.remainder += chunk.toString('binary');\n          return;\n        } else if (state === 'line' || state === 'file') {\n          // process existing remainder as normal line but store the current chunk\n          nextRemainder = chunk.toString('binary');\n          chunk = false;\n          break;\n        }\n      }\n      if (state !== 'body') {\n        continue;\n      }\n\n      // reached first non ending byte\n      nextRemainder = chunk.slice(i + 1).toString('binary');\n      chunk = chunk.slice(0, i + 1);\n      break;\n    }\n    let needsFixing = !!this.remainder;\n    if (chunk && !needsFixing) {\n      // check if we even need to change anything\n      for (let i = 0, len = chunk.length; i < len; i++) {\n        if (i && chunk[i] === 0x0a && chunk[i - 1] !== 0x0d) {\n          // missing \\r before \\n\n          needsFixing = true;\n          break;\n        } else if (i && chunk[i] === 0x0d && chunk[i - 1] === 0x20) {\n          // trailing WSP found\n          needsFixing = true;\n          break;\n        } else if (i && chunk[i] === 0x20 && chunk[i - 1] === 0x20) {\n          // multiple spaces found, needs to be replaced with just one\n          needsFixing = true;\n          break;\n        } else if (chunk[i] === 0x09) {\n          // TAB found, needs to be replaced with a space\n          needsFixing = true;\n          break;\n        }\n      }\n    }\n    if (needsFixing) {\n      bodyStr = this.remainder + (chunk ? chunk.toString('binary') : '');\n      this.remainder = nextRemainder;\n      bodyStr = bodyStr.replace(/\\r?\\n/g, '\\n') // use js line endings\n      .replace(/[ \\t]*$/gm, '') // remove line endings, rtrim\n      .replace(/[ \\t]+/gm, ' ') // single spaces\n      .replace(/\\n/g, '\\r\\n'); // restore rfc822 line endings\n      chunk = Buffer.from(bodyStr, 'binary');\n    } else if (nextRemainder) {\n      this.remainder = nextRemainder;\n    }\n    if (this.debug) {\n      this._debugBody.push(chunk);\n    }\n    this.bodyHash.update(chunk);\n  }\n  _transform(chunk, encoding, callback) {\n    if (!chunk || !chunk.length) {\n      return callback();\n    }\n    if (typeof chunk === 'string') {\n      chunk = Buffer.from(chunk, encoding);\n    }\n    this.updateHash(chunk);\n    this.byteLength += chunk.length;\n    this.push(chunk);\n    callback();\n  }\n  _flush(callback) {\n    // generate final hash and emit it\n    if (/[\\r\\n]$/.test(this.remainder) && this.byteLength > 2) {\n      // add terminating line end\n      this.bodyHash.update(Buffer.from('\\r\\n'));\n    }\n    if (!this.byteLength) {\n      // emit empty line buffer to keep the stream flowing\n      this.push(Buffer.from('\\r\\n'));\n      // this.bodyHash.update(Buffer.from('\\r\\n'));\n    }\n\n    this.emit('hash', this.bodyHash.digest('base64'), this.debug ? Buffer.concat(this._debugBody) : false);\n    callback();\n  }\n}\nmodule.exports = RelaxedBody;","map":{"version":3,"names":["Transform","require","crypto","RelaxedBody","constructor","options","chunkBuffer","chunkBufferLen","bodyHash","createHash","hashAlgo","remainder","byteLength","debug","_debugBody","updateHash","chunk","bodyStr","nextRemainder","state","i","length","c","test","toString","slice","needsFixing","len","replace","Buffer","from","push","update","_transform","encoding","callback","_flush","emit","digest","concat","module","exports"],"sources":["C:/Users/deiby/Desktop/cloneWebCursos/paginacursos/node_modules/nodemailer/lib/dkim/relaxed-body.js"],"sourcesContent":["'use strict';\n\n// streams through a message body and calculates relaxed body hash\n\nconst Transform = require('stream').Transform;\nconst crypto = require('crypto');\n\nclass RelaxedBody extends Transform {\n    constructor(options) {\n        super();\n        options = options || {};\n        this.chunkBuffer = [];\n        this.chunkBufferLen = 0;\n        this.bodyHash = crypto.createHash(options.hashAlgo || 'sha1');\n        this.remainder = '';\n        this.byteLength = 0;\n\n        this.debug = options.debug;\n        this._debugBody = options.debug ? [] : false;\n    }\n\n    updateHash(chunk) {\n        let bodyStr;\n\n        // find next remainder\n        let nextRemainder = '';\n\n        // This crux finds and removes the spaces from the last line and the newline characters after the last non-empty line\n        // If we get another chunk that does not match this description then we can restore the previously processed data\n        let state = 'file';\n        for (let i = chunk.length - 1; i >= 0; i--) {\n            let c = chunk[i];\n\n            if (state === 'file' && (c === 0x0a || c === 0x0d)) {\n                // do nothing, found \\n or \\r at the end of chunk, stil end of file\n            } else if (state === 'file' && (c === 0x09 || c === 0x20)) {\n                // switch to line ending mode, this is the last non-empty line\n                state = 'line';\n            } else if (state === 'line' && (c === 0x09 || c === 0x20)) {\n                // do nothing, found ' ' or \\t at the end of line, keep processing the last non-empty line\n            } else if (state === 'file' || state === 'line') {\n                // non line/file ending character found, switch to body mode\n                state = 'body';\n                if (i === chunk.length - 1) {\n                    // final char is not part of line end or file end, so do nothing\n                    break;\n                }\n            }\n\n            if (i === 0) {\n                // reached to the beginning of the chunk, check if it is still about the ending\n                // and if the remainder also matches\n                if (\n                    (state === 'file' && (!this.remainder || /[\\r\\n]$/.test(this.remainder))) ||\n                    (state === 'line' && (!this.remainder || /[ \\t]$/.test(this.remainder)))\n                ) {\n                    // keep everything\n                    this.remainder += chunk.toString('binary');\n                    return;\n                } else if (state === 'line' || state === 'file') {\n                    // process existing remainder as normal line but store the current chunk\n                    nextRemainder = chunk.toString('binary');\n                    chunk = false;\n                    break;\n                }\n            }\n\n            if (state !== 'body') {\n                continue;\n            }\n\n            // reached first non ending byte\n            nextRemainder = chunk.slice(i + 1).toString('binary');\n            chunk = chunk.slice(0, i + 1);\n            break;\n        }\n\n        let needsFixing = !!this.remainder;\n        if (chunk && !needsFixing) {\n            // check if we even need to change anything\n            for (let i = 0, len = chunk.length; i < len; i++) {\n                if (i && chunk[i] === 0x0a && chunk[i - 1] !== 0x0d) {\n                    // missing \\r before \\n\n                    needsFixing = true;\n                    break;\n                } else if (i && chunk[i] === 0x0d && chunk[i - 1] === 0x20) {\n                    // trailing WSP found\n                    needsFixing = true;\n                    break;\n                } else if (i && chunk[i] === 0x20 && chunk[i - 1] === 0x20) {\n                    // multiple spaces found, needs to be replaced with just one\n                    needsFixing = true;\n                    break;\n                } else if (chunk[i] === 0x09) {\n                    // TAB found, needs to be replaced with a space\n                    needsFixing = true;\n                    break;\n                }\n            }\n        }\n\n        if (needsFixing) {\n            bodyStr = this.remainder + (chunk ? chunk.toString('binary') : '');\n            this.remainder = nextRemainder;\n            bodyStr = bodyStr\n                .replace(/\\r?\\n/g, '\\n') // use js line endings\n                .replace(/[ \\t]*$/gm, '') // remove line endings, rtrim\n                .replace(/[ \\t]+/gm, ' ') // single spaces\n                .replace(/\\n/g, '\\r\\n'); // restore rfc822 line endings\n            chunk = Buffer.from(bodyStr, 'binary');\n        } else if (nextRemainder) {\n            this.remainder = nextRemainder;\n        }\n\n        if (this.debug) {\n            this._debugBody.push(chunk);\n        }\n        this.bodyHash.update(chunk);\n    }\n\n    _transform(chunk, encoding, callback) {\n        if (!chunk || !chunk.length) {\n            return callback();\n        }\n\n        if (typeof chunk === 'string') {\n            chunk = Buffer.from(chunk, encoding);\n        }\n\n        this.updateHash(chunk);\n\n        this.byteLength += chunk.length;\n        this.push(chunk);\n        callback();\n    }\n\n    _flush(callback) {\n        // generate final hash and emit it\n        if (/[\\r\\n]$/.test(this.remainder) && this.byteLength > 2) {\n            // add terminating line end\n            this.bodyHash.update(Buffer.from('\\r\\n'));\n        }\n        if (!this.byteLength) {\n            // emit empty line buffer to keep the stream flowing\n            this.push(Buffer.from('\\r\\n'));\n            // this.bodyHash.update(Buffer.from('\\r\\n'));\n        }\n\n        this.emit('hash', this.bodyHash.digest('base64'), this.debug ? Buffer.concat(this._debugBody) : false);\n        callback();\n    }\n}\n\nmodule.exports = RelaxedBody;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}