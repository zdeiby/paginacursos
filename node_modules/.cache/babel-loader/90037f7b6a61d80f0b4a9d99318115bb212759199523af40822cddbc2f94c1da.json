{"ast":null,"code":"/* eslint no-control-regex:0 */\n\n'use strict';\n\nconst base64 = require('../base64');\nconst qp = require('../qp');\nconst mimeTypes = require('./mime-types');\nmodule.exports = {\n  /**\n   * Checks if a value is plaintext string (uses only printable 7bit chars)\n   *\n   * @param {String} value String to be tested\n   * @returns {Boolean} true if it is a plaintext string\n   */\n  isPlainText(value, isParam) {\n    const re = isParam ? /[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\"\\u0080-\\uFFFF]/ : /[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\\u0080-\\uFFFF]/;\n    if (typeof value !== 'string' || re.test(value)) {\n      return false;\n    } else {\n      return true;\n    }\n  },\n  /**\n   * Checks if a multi line string containes lines longer than the selected value.\n   *\n   * Useful when detecting if a mail message needs any processing at all â€“\n   * if only plaintext characters are used and lines are short, then there is\n   * no need to encode the values in any way. If the value is plaintext but has\n   * longer lines then allowed, then use format=flowed\n   *\n   * @param {Number} lineLength Max line length to check for\n   * @returns {Boolean} Returns true if there is at least one line longer than lineLength chars\n   */\n  hasLongerLines(str, lineLength) {\n    if (str.length > 128 * 1024) {\n      // do not test strings longer than 128kB\n      return true;\n    }\n    return new RegExp('^.{' + (lineLength + 1) + ',}', 'm').test(str);\n  },\n  /**\n   * Encodes a string or an Buffer to an UTF-8 MIME Word (rfc2047)\n   *\n   * @param {String|Buffer} data String to be encoded\n   * @param {String} mimeWordEncoding='Q' Encoding for the mime word, either Q or B\n   * @param {Number} [maxLength=0] If set, split mime words into several chunks if needed\n   * @return {String} Single or several mime words joined together\n   */\n  encodeWord(data, mimeWordEncoding, maxLength) {\n    mimeWordEncoding = (mimeWordEncoding || 'Q').toString().toUpperCase().trim().charAt(0);\n    maxLength = maxLength || 0;\n    let encodedStr;\n    let toCharset = 'UTF-8';\n    if (maxLength && maxLength > 7 + toCharset.length) {\n      maxLength -= 7 + toCharset.length;\n    }\n    if (mimeWordEncoding === 'Q') {\n      // https://tools.ietf.org/html/rfc2047#section-5 rule (3)\n      encodedStr = qp.encode(data).replace(/[^a-z0-9!*+\\-/=]/gi, chr => {\n        let ord = chr.charCodeAt(0).toString(16).toUpperCase();\n        if (chr === ' ') {\n          return '_';\n        } else {\n          return '=' + (ord.length === 1 ? '0' + ord : ord);\n        }\n      });\n    } else if (mimeWordEncoding === 'B') {\n      encodedStr = typeof data === 'string' ? data : base64.encode(data);\n      maxLength = maxLength ? Math.max(3, (maxLength - maxLength % 4) / 4 * 3) : 0;\n    }\n    if (maxLength && (mimeWordEncoding !== 'B' ? encodedStr : base64.encode(data)).length > maxLength) {\n      if (mimeWordEncoding === 'Q') {\n        encodedStr = this.splitMimeEncodedString(encodedStr, maxLength).join('?= =?' + toCharset + '?' + mimeWordEncoding + '?');\n      } else {\n        // RFC2047 6.3 (2) states that encoded-word must include an integral number of characters, so no chopping unicode sequences\n        let parts = [];\n        let lpart = '';\n        for (let i = 0, len = encodedStr.length; i < len; i++) {\n          let chr = encodedStr.charAt(i);\n          if (/[\\ud83c\\ud83d\\ud83e]/.test(chr) && i < len - 1) {\n            // composite emoji byte, so add the next byte as well\n            chr += encodedStr.charAt(++i);\n          }\n\n          // check if we can add this character to the existing string\n          // without breaking byte length limit\n          if (Buffer.byteLength(lpart + chr) <= maxLength || i === 0) {\n            lpart += chr;\n          } else {\n            // we hit the length limit, so push the existing string and start over\n            parts.push(base64.encode(lpart));\n            lpart = chr;\n          }\n        }\n        if (lpart) {\n          parts.push(base64.encode(lpart));\n        }\n        if (parts.length > 1) {\n          encodedStr = parts.join('?= =?' + toCharset + '?' + mimeWordEncoding + '?');\n        } else {\n          encodedStr = parts.join('');\n        }\n      }\n    } else if (mimeWordEncoding === 'B') {\n      encodedStr = base64.encode(data);\n    }\n    return '=?' + toCharset + '?' + mimeWordEncoding + '?' + encodedStr + (encodedStr.substr(-2) === '?=' ? '' : '?=');\n  },\n  /**\n   * Finds word sequences with non ascii text and converts these to mime words\n   *\n   * @param {String} value String to be encoded\n   * @param {String} mimeWordEncoding='Q' Encoding for the mime word, either Q or B\n   * @param {Number} [maxLength=0] If set, split mime words into several chunks if needed\n   * @param {Boolean} [encodeAll=false] If true and the value needs encoding then encodes entire string, not just the smallest match\n   * @return {String} String with possible mime words\n   */\n  encodeWords(value, mimeWordEncoding, maxLength, encodeAll) {\n    maxLength = maxLength || 0;\n    let encodedValue;\n\n    // find first word with a non-printable ascii or special symbol in it\n    let firstMatch = value.match(/(?:^|\\s)([^\\s]*[\"\\u0080-\\uFFFF])/);\n    if (!firstMatch) {\n      return value;\n    }\n    if (encodeAll) {\n      // if it is requested to encode everything or the string contains something that resebles encoded word, then encode everything\n\n      return this.encodeWord(value, mimeWordEncoding, maxLength);\n    }\n\n    // find the last word with a non-printable ascii in it\n    let lastMatch = value.match(/([\"\\u0080-\\uFFFF][^\\s]*)[^\"\\u0080-\\uFFFF]*$/);\n    if (!lastMatch) {\n      // should not happen\n      return value;\n    }\n    let startIndex = firstMatch.index + (firstMatch[0].match(/[^\\s]/) || {\n      index: 0\n    }).index;\n    let endIndex = lastMatch.index + (lastMatch[1] || '').length;\n    encodedValue = (startIndex ? value.substr(0, startIndex) : '') + this.encodeWord(value.substring(startIndex, endIndex), mimeWordEncoding || 'Q', maxLength) + (endIndex < value.length ? value.substr(endIndex) : '');\n    return encodedValue;\n  },\n  /**\n   * Joins parsed header value together as 'value; param1=value1; param2=value2'\n   * PS: We are following RFC 822 for the list of special characters that we need to keep in quotes.\n   *      Refer: https://www.w3.org/Protocols/rfc1341/4_Content-Type.html\n   * @param {Object} structured Parsed header value\n   * @return {String} joined header value\n   */\n  buildHeaderValue(structured) {\n    let paramsArray = [];\n    Object.keys(structured.params || {}).forEach(param => {\n      // filename might include unicode characters so it is a special case\n      // other values probably do not\n      let value = structured.params[param];\n      if (!this.isPlainText(value, true) || value.length >= 75) {\n        this.buildHeaderParam(param, value, 50).forEach(encodedParam => {\n          if (!/[\\s\"\\\\;:/=(),<>@[\\]?]|^[-']|'$/.test(encodedParam.value) || encodedParam.key.substr(-1) === '*') {\n            paramsArray.push(encodedParam.key + '=' + encodedParam.value);\n          } else {\n            paramsArray.push(encodedParam.key + '=' + JSON.stringify(encodedParam.value));\n          }\n        });\n      } else if (/[\\s'\"\\\\;:/=(),<>@[\\]?]|^-/.test(value)) {\n        paramsArray.push(param + '=' + JSON.stringify(value));\n      } else {\n        paramsArray.push(param + '=' + value);\n      }\n    });\n    return structured.value + (paramsArray.length ? '; ' + paramsArray.join('; ') : '');\n  },\n  /**\n   * Encodes a string or an Buffer to an UTF-8 Parameter Value Continuation encoding (rfc2231)\n   * Useful for splitting long parameter values.\n   *\n   * For example\n   *      title=\"unicode string\"\n   * becomes\n   *     title*0*=utf-8''unicode\n   *     title*1*=%20string\n   *\n   * @param {String|Buffer} data String to be encoded\n   * @param {Number} [maxLength=50] Max length for generated chunks\n   * @param {String} [fromCharset='UTF-8'] Source sharacter set\n   * @return {Array} A list of encoded keys and headers\n   */\n  buildHeaderParam(key, data, maxLength) {\n    let list = [];\n    let encodedStr = typeof data === 'string' ? data : (data || '').toString();\n    let encodedStrArr;\n    let chr, ord;\n    let line;\n    let startPos = 0;\n    let i, len;\n    maxLength = maxLength || 50;\n\n    // process ascii only text\n    if (this.isPlainText(data, true)) {\n      // check if conversion is even needed\n      if (encodedStr.length <= maxLength) {\n        return [{\n          key,\n          value: encodedStr\n        }];\n      }\n      encodedStr = encodedStr.replace(new RegExp('.{' + maxLength + '}', 'g'), str => {\n        list.push({\n          line: str\n        });\n        return '';\n      });\n      if (encodedStr) {\n        list.push({\n          line: encodedStr\n        });\n      }\n    } else {\n      if (/[\\uD800-\\uDBFF]/.test(encodedStr)) {\n        // string containts surrogate pairs, so normalize it to an array of bytes\n        encodedStrArr = [];\n        for (i = 0, len = encodedStr.length; i < len; i++) {\n          chr = encodedStr.charAt(i);\n          ord = chr.charCodeAt(0);\n          if (ord >= 0xd800 && ord <= 0xdbff && i < len - 1) {\n            chr += encodedStr.charAt(i + 1);\n            encodedStrArr.push(chr);\n            i++;\n          } else {\n            encodedStrArr.push(chr);\n          }\n        }\n        encodedStr = encodedStrArr;\n      }\n\n      // first line includes the charset and language info and needs to be encoded\n      // even if it does not contain any unicode characters\n      line = 'utf-8\\x27\\x27';\n      let encoded = true;\n      startPos = 0;\n\n      // process text with unicode or special chars\n      for (i = 0, len = encodedStr.length; i < len; i++) {\n        chr = encodedStr[i];\n        if (encoded) {\n          chr = this.safeEncodeURIComponent(chr);\n        } else {\n          // try to urlencode current char\n          chr = chr === ' ' ? chr : this.safeEncodeURIComponent(chr);\n          // By default it is not required to encode a line, the need\n          // only appears when the string contains unicode or special chars\n          // in this case we start processing the line over and encode all chars\n          if (chr !== encodedStr[i]) {\n            // Check if it is even possible to add the encoded char to the line\n            // If not, there is no reason to use this line, just push it to the list\n            // and start a new line with the char that needs encoding\n            if ((this.safeEncodeURIComponent(line) + chr).length >= maxLength) {\n              list.push({\n                line,\n                encoded\n              });\n              line = '';\n              startPos = i - 1;\n            } else {\n              encoded = true;\n              i = startPos;\n              line = '';\n              continue;\n            }\n          }\n        }\n\n        // if the line is already too long, push it to the list and start a new one\n        if ((line + chr).length >= maxLength) {\n          list.push({\n            line,\n            encoded\n          });\n          line = chr = encodedStr[i] === ' ' ? ' ' : this.safeEncodeURIComponent(encodedStr[i]);\n          if (chr === encodedStr[i]) {\n            encoded = false;\n            startPos = i - 1;\n          } else {\n            encoded = true;\n          }\n        } else {\n          line += chr;\n        }\n      }\n      if (line) {\n        list.push({\n          line,\n          encoded\n        });\n      }\n    }\n    return list.map((item, i) => ({\n      // encoded lines: {name}*{part}*\n      // unencoded lines: {name}*{part}\n      // if any line needs to be encoded then the first line (part==0) is always encoded\n      key: key + '*' + i + (item.encoded ? '*' : ''),\n      value: item.line\n    }));\n  },\n  /**\n   * Parses a header value with key=value arguments into a structured\n   * object.\n   *\n   *   parseHeaderValue('content-type: text/plain; CHARSET='UTF-8'') ->\n   *   {\n   *     'value': 'text/plain',\n   *     'params': {\n   *       'charset': 'UTF-8'\n   *     }\n   *   }\n   *\n   * @param {String} str Header value\n   * @return {Object} Header value as a parsed structure\n   */\n  parseHeaderValue(str) {\n    let response = {\n      value: false,\n      params: {}\n    };\n    let key = false;\n    let value = '';\n    let type = 'value';\n    let quote = false;\n    let escaped = false;\n    let chr;\n    for (let i = 0, len = str.length; i < len; i++) {\n      chr = str.charAt(i);\n      if (type === 'key') {\n        if (chr === '=') {\n          key = value.trim().toLowerCase();\n          type = 'value';\n          value = '';\n          continue;\n        }\n        value += chr;\n      } else {\n        if (escaped) {\n          value += chr;\n        } else if (chr === '\\\\') {\n          escaped = true;\n          continue;\n        } else if (quote && chr === quote) {\n          quote = false;\n        } else if (!quote && chr === '\"') {\n          quote = chr;\n        } else if (!quote && chr === ';') {\n          if (key === false) {\n            response.value = value.trim();\n          } else {\n            response.params[key] = value.trim();\n          }\n          type = 'key';\n          value = '';\n        } else {\n          value += chr;\n        }\n        escaped = false;\n      }\n    }\n    if (type === 'value') {\n      if (key === false) {\n        response.value = value.trim();\n      } else {\n        response.params[key] = value.trim();\n      }\n    } else if (value.trim()) {\n      response.params[value.trim().toLowerCase()] = '';\n    }\n\n    // handle parameter value continuations\n    // https://tools.ietf.org/html/rfc2231#section-3\n\n    // preprocess values\n    Object.keys(response.params).forEach(key => {\n      let actualKey, nr, match, value;\n      if (match = key.match(/(\\*(\\d+)|\\*(\\d+)\\*|\\*)$/)) {\n        actualKey = key.substr(0, match.index);\n        nr = Number(match[2] || match[3]) || 0;\n        if (!response.params[actualKey] || typeof response.params[actualKey] !== 'object') {\n          response.params[actualKey] = {\n            charset: false,\n            values: []\n          };\n        }\n        value = response.params[key];\n        if (nr === 0 && match[0].substr(-1) === '*' && (match = value.match(/^([^']*)'[^']*'(.*)$/))) {\n          response.params[actualKey].charset = match[1] || 'iso-8859-1';\n          value = match[2];\n        }\n        response.params[actualKey].values[nr] = value;\n\n        // remove the old reference\n        delete response.params[key];\n      }\n    });\n\n    // concatenate split rfc2231 strings and convert encoded strings to mime encoded words\n    Object.keys(response.params).forEach(key => {\n      let value;\n      if (response.params[key] && Array.isArray(response.params[key].values)) {\n        value = response.params[key].values.map(val => val || '').join('');\n        if (response.params[key].charset) {\n          // convert \"%AB\" to \"=?charset?Q?=AB?=\"\n          response.params[key] = '=?' + response.params[key].charset + '?Q?' + value\n          // fix invalidly encoded chars\n          .replace(/[=?_\\s]/g, s => {\n            let c = s.charCodeAt(0).toString(16);\n            if (s === ' ') {\n              return '_';\n            } else {\n              return '%' + (c.length < 2 ? '0' : '') + c;\n            }\n          })\n          // change from urlencoding to percent encoding\n          .replace(/%/g, '=') + '?=';\n        } else {\n          response.params[key] = value;\n        }\n      }\n    });\n    return response;\n  },\n  /**\n   * Returns file extension for a content type string. If no suitable extensions\n   * are found, 'bin' is used as the default extension\n   *\n   * @param {String} mimeType Content type to be checked for\n   * @return {String} File extension\n   */\n  detectExtension: mimeType => mimeTypes.detectExtension(mimeType),\n  /**\n   * Returns content type for a file extension. If no suitable content types\n   * are found, 'application/octet-stream' is used as the default content type\n   *\n   * @param {String} extension Extension to be checked for\n   * @return {String} File extension\n   */\n  detectMimeType: extension => mimeTypes.detectMimeType(extension),\n  /**\n   * Folds long lines, useful for folding header lines (afterSpace=false) and\n   * flowed text (afterSpace=true)\n   *\n   * @param {String} str String to be folded\n   * @param {Number} [lineLength=76] Maximum length of a line\n   * @param {Boolean} afterSpace If true, leave a space in th end of a line\n   * @return {String} String with folded lines\n   */\n  foldLines(str, lineLength, afterSpace) {\n    str = (str || '').toString();\n    lineLength = lineLength || 76;\n    let pos = 0,\n      len = str.length,\n      result = '',\n      line,\n      match;\n    while (pos < len) {\n      line = str.substr(pos, lineLength);\n      if (line.length < lineLength) {\n        result += line;\n        break;\n      }\n      if (match = line.match(/^[^\\n\\r]*(\\r?\\n|\\r)/)) {\n        line = match[0];\n        result += line;\n        pos += line.length;\n        continue;\n      } else if ((match = line.match(/(\\s+)[^\\s]*$/)) && match[0].length - (afterSpace ? (match[1] || '').length : 0) < line.length) {\n        line = line.substr(0, line.length - (match[0].length - (afterSpace ? (match[1] || '').length : 0)));\n      } else if (match = str.substr(pos + line.length).match(/^[^\\s]+(\\s*)/)) {\n        line = line + match[0].substr(0, match[0].length - (!afterSpace ? (match[1] || '').length : 0));\n      }\n      result += line;\n      pos += line.length;\n      if (pos < len) {\n        result += '\\r\\n';\n      }\n    }\n    return result;\n  },\n  /**\n   * Splits a mime encoded string. Needed for dividing mime words into smaller chunks\n   *\n   * @param {String} str Mime encoded string to be split up\n   * @param {Number} maxlen Maximum length of characters for one part (minimum 12)\n   * @return {Array} Split string\n   */\n  splitMimeEncodedString: (str, maxlen) => {\n    let curLine,\n      match,\n      chr,\n      done,\n      lines = [];\n\n    // require at least 12 symbols to fit possible 4 octet UTF-8 sequences\n    maxlen = Math.max(maxlen || 0, 12);\n    while (str.length) {\n      curLine = str.substr(0, maxlen);\n\n      // move incomplete escaped char back to main\n      if (match = curLine.match(/[=][0-9A-F]?$/i)) {\n        curLine = curLine.substr(0, match.index);\n      }\n      done = false;\n      while (!done) {\n        done = true;\n        // check if not middle of a unicode char sequence\n        if (match = str.substr(curLine.length).match(/^[=]([0-9A-F]{2})/i)) {\n          chr = parseInt(match[1], 16);\n          // invalid sequence, move one char back anc recheck\n          if (chr < 0xc2 && chr > 0x7f) {\n            curLine = curLine.substr(0, curLine.length - 3);\n            done = false;\n          }\n        }\n      }\n      if (curLine.length) {\n        lines.push(curLine);\n      }\n      str = str.substr(curLine.length);\n    }\n    return lines;\n  },\n  encodeURICharComponent: chr => {\n    let res = '';\n    let ord = chr.charCodeAt(0).toString(16).toUpperCase();\n    if (ord.length % 2) {\n      ord = '0' + ord;\n    }\n    if (ord.length > 2) {\n      for (let i = 0, len = ord.length / 2; i < len; i++) {\n        res += '%' + ord.substr(i, 2);\n      }\n    } else {\n      res += '%' + ord;\n    }\n    return res;\n  },\n  safeEncodeURIComponent(str) {\n    str = (str || '').toString();\n    try {\n      // might throw if we try to encode invalid sequences, eg. partial emoji\n      str = encodeURIComponent(str);\n    } catch (E) {\n      // should never run\n      return str.replace(/[^\\x00-\\x1F *'()<>@,;:\\\\\"[\\]?=\\u007F-\\uFFFF]+/g, '');\n    }\n\n    // ensure chars that are not handled by encodeURICompent are converted as well\n    return str.replace(/[\\x00-\\x1F *'()<>@,;:\\\\\"[\\]?=\\u007F-\\uFFFF]/g, chr => this.encodeURICharComponent(chr));\n  }\n};","map":{"version":3,"names":["base64","require","qp","mimeTypes","module","exports","isPlainText","value","isParam","re","test","hasLongerLines","str","lineLength","length","RegExp","encodeWord","data","mimeWordEncoding","maxLength","toString","toUpperCase","trim","charAt","encodedStr","toCharset","encode","replace","chr","ord","charCodeAt","Math","max","splitMimeEncodedString","join","parts","lpart","i","len","Buffer","byteLength","push","substr","encodeWords","encodeAll","encodedValue","firstMatch","match","lastMatch","startIndex","index","endIndex","substring","buildHeaderValue","structured","paramsArray","Object","keys","params","forEach","param","buildHeaderParam","encodedParam","key","JSON","stringify","list","encodedStrArr","line","startPos","encoded","safeEncodeURIComponent","map","item","parseHeaderValue","response","type","quote","escaped","toLowerCase","actualKey","nr","Number","charset","values","Array","isArray","val","s","c","detectExtension","mimeType","detectMimeType","extension","foldLines","afterSpace","pos","result","maxlen","curLine","done","lines","parseInt","encodeURICharComponent","res","encodeURIComponent","E"],"sources":["C:/Users/deiby/Desktop/cloneWebCursos/paginacursos/node_modules/nodemailer/lib/mime-funcs/index.js"],"sourcesContent":["/* eslint no-control-regex:0 */\n\n'use strict';\n\nconst base64 = require('../base64');\nconst qp = require('../qp');\nconst mimeTypes = require('./mime-types');\n\nmodule.exports = {\n    /**\n     * Checks if a value is plaintext string (uses only printable 7bit chars)\n     *\n     * @param {String} value String to be tested\n     * @returns {Boolean} true if it is a plaintext string\n     */\n    isPlainText(value, isParam) {\n        const re = isParam ? /[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\"\\u0080-\\uFFFF]/ : /[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\\u0080-\\uFFFF]/;\n        if (typeof value !== 'string' || re.test(value)) {\n            return false;\n        } else {\n            return true;\n        }\n    },\n\n    /**\n     * Checks if a multi line string containes lines longer than the selected value.\n     *\n     * Useful when detecting if a mail message needs any processing at all â€“\n     * if only plaintext characters are used and lines are short, then there is\n     * no need to encode the values in any way. If the value is plaintext but has\n     * longer lines then allowed, then use format=flowed\n     *\n     * @param {Number} lineLength Max line length to check for\n     * @returns {Boolean} Returns true if there is at least one line longer than lineLength chars\n     */\n    hasLongerLines(str, lineLength) {\n        if (str.length > 128 * 1024) {\n            // do not test strings longer than 128kB\n            return true;\n        }\n        return new RegExp('^.{' + (lineLength + 1) + ',}', 'm').test(str);\n    },\n\n    /**\n     * Encodes a string or an Buffer to an UTF-8 MIME Word (rfc2047)\n     *\n     * @param {String|Buffer} data String to be encoded\n     * @param {String} mimeWordEncoding='Q' Encoding for the mime word, either Q or B\n     * @param {Number} [maxLength=0] If set, split mime words into several chunks if needed\n     * @return {String} Single or several mime words joined together\n     */\n    encodeWord(data, mimeWordEncoding, maxLength) {\n        mimeWordEncoding = (mimeWordEncoding || 'Q').toString().toUpperCase().trim().charAt(0);\n        maxLength = maxLength || 0;\n\n        let encodedStr;\n        let toCharset = 'UTF-8';\n\n        if (maxLength && maxLength > 7 + toCharset.length) {\n            maxLength -= 7 + toCharset.length;\n        }\n\n        if (mimeWordEncoding === 'Q') {\n            // https://tools.ietf.org/html/rfc2047#section-5 rule (3)\n            encodedStr = qp.encode(data).replace(/[^a-z0-9!*+\\-/=]/gi, chr => {\n                let ord = chr.charCodeAt(0).toString(16).toUpperCase();\n                if (chr === ' ') {\n                    return '_';\n                } else {\n                    return '=' + (ord.length === 1 ? '0' + ord : ord);\n                }\n            });\n        } else if (mimeWordEncoding === 'B') {\n            encodedStr = typeof data === 'string' ? data : base64.encode(data);\n            maxLength = maxLength ? Math.max(3, ((maxLength - (maxLength % 4)) / 4) * 3) : 0;\n        }\n\n        if (maxLength && (mimeWordEncoding !== 'B' ? encodedStr : base64.encode(data)).length > maxLength) {\n            if (mimeWordEncoding === 'Q') {\n                encodedStr = this.splitMimeEncodedString(encodedStr, maxLength).join('?= =?' + toCharset + '?' + mimeWordEncoding + '?');\n            } else {\n                // RFC2047 6.3 (2) states that encoded-word must include an integral number of characters, so no chopping unicode sequences\n                let parts = [];\n                let lpart = '';\n                for (let i = 0, len = encodedStr.length; i < len; i++) {\n                    let chr = encodedStr.charAt(i);\n\n                    if (/[\\ud83c\\ud83d\\ud83e]/.test(chr) && i < len - 1) {\n                        // composite emoji byte, so add the next byte as well\n                        chr += encodedStr.charAt(++i);\n                    }\n\n                    // check if we can add this character to the existing string\n                    // without breaking byte length limit\n                    if (Buffer.byteLength(lpart + chr) <= maxLength || i === 0) {\n                        lpart += chr;\n                    } else {\n                        // we hit the length limit, so push the existing string and start over\n                        parts.push(base64.encode(lpart));\n                        lpart = chr;\n                    }\n                }\n                if (lpart) {\n                    parts.push(base64.encode(lpart));\n                }\n\n                if (parts.length > 1) {\n                    encodedStr = parts.join('?= =?' + toCharset + '?' + mimeWordEncoding + '?');\n                } else {\n                    encodedStr = parts.join('');\n                }\n            }\n        } else if (mimeWordEncoding === 'B') {\n            encodedStr = base64.encode(data);\n        }\n\n        return '=?' + toCharset + '?' + mimeWordEncoding + '?' + encodedStr + (encodedStr.substr(-2) === '?=' ? '' : '?=');\n    },\n\n    /**\n     * Finds word sequences with non ascii text and converts these to mime words\n     *\n     * @param {String} value String to be encoded\n     * @param {String} mimeWordEncoding='Q' Encoding for the mime word, either Q or B\n     * @param {Number} [maxLength=0] If set, split mime words into several chunks if needed\n     * @param {Boolean} [encodeAll=false] If true and the value needs encoding then encodes entire string, not just the smallest match\n     * @return {String} String with possible mime words\n     */\n    encodeWords(value, mimeWordEncoding, maxLength, encodeAll) {\n        maxLength = maxLength || 0;\n\n        let encodedValue;\n\n        // find first word with a non-printable ascii or special symbol in it\n        let firstMatch = value.match(/(?:^|\\s)([^\\s]*[\"\\u0080-\\uFFFF])/);\n        if (!firstMatch) {\n            return value;\n        }\n\n        if (encodeAll) {\n            // if it is requested to encode everything or the string contains something that resebles encoded word, then encode everything\n\n            return this.encodeWord(value, mimeWordEncoding, maxLength);\n        }\n\n        // find the last word with a non-printable ascii in it\n        let lastMatch = value.match(/([\"\\u0080-\\uFFFF][^\\s]*)[^\"\\u0080-\\uFFFF]*$/);\n        if (!lastMatch) {\n            // should not happen\n            return value;\n        }\n\n        let startIndex =\n            firstMatch.index +\n            (\n                firstMatch[0].match(/[^\\s]/) || {\n                    index: 0\n                }\n            ).index;\n        let endIndex = lastMatch.index + (lastMatch[1] || '').length;\n\n        encodedValue =\n            (startIndex ? value.substr(0, startIndex) : '') +\n            this.encodeWord(value.substring(startIndex, endIndex), mimeWordEncoding || 'Q', maxLength) +\n            (endIndex < value.length ? value.substr(endIndex) : '');\n\n        return encodedValue;\n    },\n\n    /**\n     * Joins parsed header value together as 'value; param1=value1; param2=value2'\n     * PS: We are following RFC 822 for the list of special characters that we need to keep in quotes.\n     *      Refer: https://www.w3.org/Protocols/rfc1341/4_Content-Type.html\n     * @param {Object} structured Parsed header value\n     * @return {String} joined header value\n     */\n    buildHeaderValue(structured) {\n        let paramsArray = [];\n\n        Object.keys(structured.params || {}).forEach(param => {\n            // filename might include unicode characters so it is a special case\n            // other values probably do not\n            let value = structured.params[param];\n            if (!this.isPlainText(value, true) || value.length >= 75) {\n                this.buildHeaderParam(param, value, 50).forEach(encodedParam => {\n                    if (!/[\\s\"\\\\;:/=(),<>@[\\]?]|^[-']|'$/.test(encodedParam.value) || encodedParam.key.substr(-1) === '*') {\n                        paramsArray.push(encodedParam.key + '=' + encodedParam.value);\n                    } else {\n                        paramsArray.push(encodedParam.key + '=' + JSON.stringify(encodedParam.value));\n                    }\n                });\n            } else if (/[\\s'\"\\\\;:/=(),<>@[\\]?]|^-/.test(value)) {\n                paramsArray.push(param + '=' + JSON.stringify(value));\n            } else {\n                paramsArray.push(param + '=' + value);\n            }\n        });\n\n        return structured.value + (paramsArray.length ? '; ' + paramsArray.join('; ') : '');\n    },\n\n    /**\n     * Encodes a string or an Buffer to an UTF-8 Parameter Value Continuation encoding (rfc2231)\n     * Useful for splitting long parameter values.\n     *\n     * For example\n     *      title=\"unicode string\"\n     * becomes\n     *     title*0*=utf-8''unicode\n     *     title*1*=%20string\n     *\n     * @param {String|Buffer} data String to be encoded\n     * @param {Number} [maxLength=50] Max length for generated chunks\n     * @param {String} [fromCharset='UTF-8'] Source sharacter set\n     * @return {Array} A list of encoded keys and headers\n     */\n    buildHeaderParam(key, data, maxLength) {\n        let list = [];\n        let encodedStr = typeof data === 'string' ? data : (data || '').toString();\n        let encodedStrArr;\n        let chr, ord;\n        let line;\n        let startPos = 0;\n        let i, len;\n\n        maxLength = maxLength || 50;\n\n        // process ascii only text\n        if (this.isPlainText(data, true)) {\n            // check if conversion is even needed\n            if (encodedStr.length <= maxLength) {\n                return [\n                    {\n                        key,\n                        value: encodedStr\n                    }\n                ];\n            }\n\n            encodedStr = encodedStr.replace(new RegExp('.{' + maxLength + '}', 'g'), str => {\n                list.push({\n                    line: str\n                });\n                return '';\n            });\n\n            if (encodedStr) {\n                list.push({\n                    line: encodedStr\n                });\n            }\n        } else {\n            if (/[\\uD800-\\uDBFF]/.test(encodedStr)) {\n                // string containts surrogate pairs, so normalize it to an array of bytes\n                encodedStrArr = [];\n                for (i = 0, len = encodedStr.length; i < len; i++) {\n                    chr = encodedStr.charAt(i);\n                    ord = chr.charCodeAt(0);\n                    if (ord >= 0xd800 && ord <= 0xdbff && i < len - 1) {\n                        chr += encodedStr.charAt(i + 1);\n                        encodedStrArr.push(chr);\n                        i++;\n                    } else {\n                        encodedStrArr.push(chr);\n                    }\n                }\n                encodedStr = encodedStrArr;\n            }\n\n            // first line includes the charset and language info and needs to be encoded\n            // even if it does not contain any unicode characters\n            line = 'utf-8\\x27\\x27';\n            let encoded = true;\n            startPos = 0;\n\n            // process text with unicode or special chars\n            for (i = 0, len = encodedStr.length; i < len; i++) {\n                chr = encodedStr[i];\n\n                if (encoded) {\n                    chr = this.safeEncodeURIComponent(chr);\n                } else {\n                    // try to urlencode current char\n                    chr = chr === ' ' ? chr : this.safeEncodeURIComponent(chr);\n                    // By default it is not required to encode a line, the need\n                    // only appears when the string contains unicode or special chars\n                    // in this case we start processing the line over and encode all chars\n                    if (chr !== encodedStr[i]) {\n                        // Check if it is even possible to add the encoded char to the line\n                        // If not, there is no reason to use this line, just push it to the list\n                        // and start a new line with the char that needs encoding\n                        if ((this.safeEncodeURIComponent(line) + chr).length >= maxLength) {\n                            list.push({\n                                line,\n                                encoded\n                            });\n                            line = '';\n                            startPos = i - 1;\n                        } else {\n                            encoded = true;\n                            i = startPos;\n                            line = '';\n                            continue;\n                        }\n                    }\n                }\n\n                // if the line is already too long, push it to the list and start a new one\n                if ((line + chr).length >= maxLength) {\n                    list.push({\n                        line,\n                        encoded\n                    });\n                    line = chr = encodedStr[i] === ' ' ? ' ' : this.safeEncodeURIComponent(encodedStr[i]);\n                    if (chr === encodedStr[i]) {\n                        encoded = false;\n                        startPos = i - 1;\n                    } else {\n                        encoded = true;\n                    }\n                } else {\n                    line += chr;\n                }\n            }\n\n            if (line) {\n                list.push({\n                    line,\n                    encoded\n                });\n            }\n        }\n\n        return list.map((item, i) => ({\n            // encoded lines: {name}*{part}*\n            // unencoded lines: {name}*{part}\n            // if any line needs to be encoded then the first line (part==0) is always encoded\n            key: key + '*' + i + (item.encoded ? '*' : ''),\n            value: item.line\n        }));\n    },\n\n    /**\n     * Parses a header value with key=value arguments into a structured\n     * object.\n     *\n     *   parseHeaderValue('content-type: text/plain; CHARSET='UTF-8'') ->\n     *   {\n     *     'value': 'text/plain',\n     *     'params': {\n     *       'charset': 'UTF-8'\n     *     }\n     *   }\n     *\n     * @param {String} str Header value\n     * @return {Object} Header value as a parsed structure\n     */\n    parseHeaderValue(str) {\n        let response = {\n            value: false,\n            params: {}\n        };\n        let key = false;\n        let value = '';\n        let type = 'value';\n        let quote = false;\n        let escaped = false;\n        let chr;\n\n        for (let i = 0, len = str.length; i < len; i++) {\n            chr = str.charAt(i);\n            if (type === 'key') {\n                if (chr === '=') {\n                    key = value.trim().toLowerCase();\n                    type = 'value';\n                    value = '';\n                    continue;\n                }\n                value += chr;\n            } else {\n                if (escaped) {\n                    value += chr;\n                } else if (chr === '\\\\') {\n                    escaped = true;\n                    continue;\n                } else if (quote && chr === quote) {\n                    quote = false;\n                } else if (!quote && chr === '\"') {\n                    quote = chr;\n                } else if (!quote && chr === ';') {\n                    if (key === false) {\n                        response.value = value.trim();\n                    } else {\n                        response.params[key] = value.trim();\n                    }\n                    type = 'key';\n                    value = '';\n                } else {\n                    value += chr;\n                }\n                escaped = false;\n            }\n        }\n\n        if (type === 'value') {\n            if (key === false) {\n                response.value = value.trim();\n            } else {\n                response.params[key] = value.trim();\n            }\n        } else if (value.trim()) {\n            response.params[value.trim().toLowerCase()] = '';\n        }\n\n        // handle parameter value continuations\n        // https://tools.ietf.org/html/rfc2231#section-3\n\n        // preprocess values\n        Object.keys(response.params).forEach(key => {\n            let actualKey, nr, match, value;\n            if ((match = key.match(/(\\*(\\d+)|\\*(\\d+)\\*|\\*)$/))) {\n                actualKey = key.substr(0, match.index);\n                nr = Number(match[2] || match[3]) || 0;\n\n                if (!response.params[actualKey] || typeof response.params[actualKey] !== 'object') {\n                    response.params[actualKey] = {\n                        charset: false,\n                        values: []\n                    };\n                }\n\n                value = response.params[key];\n\n                if (nr === 0 && match[0].substr(-1) === '*' && (match = value.match(/^([^']*)'[^']*'(.*)$/))) {\n                    response.params[actualKey].charset = match[1] || 'iso-8859-1';\n                    value = match[2];\n                }\n\n                response.params[actualKey].values[nr] = value;\n\n                // remove the old reference\n                delete response.params[key];\n            }\n        });\n\n        // concatenate split rfc2231 strings and convert encoded strings to mime encoded words\n        Object.keys(response.params).forEach(key => {\n            let value;\n            if (response.params[key] && Array.isArray(response.params[key].values)) {\n                value = response.params[key].values.map(val => val || '').join('');\n\n                if (response.params[key].charset) {\n                    // convert \"%AB\" to \"=?charset?Q?=AB?=\"\n                    response.params[key] =\n                        '=?' +\n                        response.params[key].charset +\n                        '?Q?' +\n                        value\n                            // fix invalidly encoded chars\n                            .replace(/[=?_\\s]/g, s => {\n                                let c = s.charCodeAt(0).toString(16);\n                                if (s === ' ') {\n                                    return '_';\n                                } else {\n                                    return '%' + (c.length < 2 ? '0' : '') + c;\n                                }\n                            })\n                            // change from urlencoding to percent encoding\n                            .replace(/%/g, '=') +\n                        '?=';\n                } else {\n                    response.params[key] = value;\n                }\n            }\n        });\n\n        return response;\n    },\n\n    /**\n     * Returns file extension for a content type string. If no suitable extensions\n     * are found, 'bin' is used as the default extension\n     *\n     * @param {String} mimeType Content type to be checked for\n     * @return {String} File extension\n     */\n    detectExtension: mimeType => mimeTypes.detectExtension(mimeType),\n\n    /**\n     * Returns content type for a file extension. If no suitable content types\n     * are found, 'application/octet-stream' is used as the default content type\n     *\n     * @param {String} extension Extension to be checked for\n     * @return {String} File extension\n     */\n    detectMimeType: extension => mimeTypes.detectMimeType(extension),\n\n    /**\n     * Folds long lines, useful for folding header lines (afterSpace=false) and\n     * flowed text (afterSpace=true)\n     *\n     * @param {String} str String to be folded\n     * @param {Number} [lineLength=76] Maximum length of a line\n     * @param {Boolean} afterSpace If true, leave a space in th end of a line\n     * @return {String} String with folded lines\n     */\n    foldLines(str, lineLength, afterSpace) {\n        str = (str || '').toString();\n        lineLength = lineLength || 76;\n\n        let pos = 0,\n            len = str.length,\n            result = '',\n            line,\n            match;\n\n        while (pos < len) {\n            line = str.substr(pos, lineLength);\n            if (line.length < lineLength) {\n                result += line;\n                break;\n            }\n            if ((match = line.match(/^[^\\n\\r]*(\\r?\\n|\\r)/))) {\n                line = match[0];\n                result += line;\n                pos += line.length;\n                continue;\n            } else if ((match = line.match(/(\\s+)[^\\s]*$/)) && match[0].length - (afterSpace ? (match[1] || '').length : 0) < line.length) {\n                line = line.substr(0, line.length - (match[0].length - (afterSpace ? (match[1] || '').length : 0)));\n            } else if ((match = str.substr(pos + line.length).match(/^[^\\s]+(\\s*)/))) {\n                line = line + match[0].substr(0, match[0].length - (!afterSpace ? (match[1] || '').length : 0));\n            }\n\n            result += line;\n            pos += line.length;\n            if (pos < len) {\n                result += '\\r\\n';\n            }\n        }\n\n        return result;\n    },\n\n    /**\n     * Splits a mime encoded string. Needed for dividing mime words into smaller chunks\n     *\n     * @param {String} str Mime encoded string to be split up\n     * @param {Number} maxlen Maximum length of characters for one part (minimum 12)\n     * @return {Array} Split string\n     */\n    splitMimeEncodedString: (str, maxlen) => {\n        let curLine,\n            match,\n            chr,\n            done,\n            lines = [];\n\n        // require at least 12 symbols to fit possible 4 octet UTF-8 sequences\n        maxlen = Math.max(maxlen || 0, 12);\n\n        while (str.length) {\n            curLine = str.substr(0, maxlen);\n\n            // move incomplete escaped char back to main\n            if ((match = curLine.match(/[=][0-9A-F]?$/i))) {\n                curLine = curLine.substr(0, match.index);\n            }\n\n            done = false;\n            while (!done) {\n                done = true;\n                // check if not middle of a unicode char sequence\n                if ((match = str.substr(curLine.length).match(/^[=]([0-9A-F]{2})/i))) {\n                    chr = parseInt(match[1], 16);\n                    // invalid sequence, move one char back anc recheck\n                    if (chr < 0xc2 && chr > 0x7f) {\n                        curLine = curLine.substr(0, curLine.length - 3);\n                        done = false;\n                    }\n                }\n            }\n\n            if (curLine.length) {\n                lines.push(curLine);\n            }\n            str = str.substr(curLine.length);\n        }\n\n        return lines;\n    },\n\n    encodeURICharComponent: chr => {\n        let res = '';\n        let ord = chr.charCodeAt(0).toString(16).toUpperCase();\n\n        if (ord.length % 2) {\n            ord = '0' + ord;\n        }\n\n        if (ord.length > 2) {\n            for (let i = 0, len = ord.length / 2; i < len; i++) {\n                res += '%' + ord.substr(i, 2);\n            }\n        } else {\n            res += '%' + ord;\n        }\n\n        return res;\n    },\n\n    safeEncodeURIComponent(str) {\n        str = (str || '').toString();\n\n        try {\n            // might throw if we try to encode invalid sequences, eg. partial emoji\n            str = encodeURIComponent(str);\n        } catch (E) {\n            // should never run\n            return str.replace(/[^\\x00-\\x1F *'()<>@,;:\\\\\"[\\]?=\\u007F-\\uFFFF]+/g, '');\n        }\n\n        // ensure chars that are not handled by encodeURICompent are converted as well\n        return str.replace(/[\\x00-\\x1F *'()<>@,;:\\\\\"[\\]?=\\u007F-\\uFFFF]/g, chr => this.encodeURICharComponent(chr));\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}