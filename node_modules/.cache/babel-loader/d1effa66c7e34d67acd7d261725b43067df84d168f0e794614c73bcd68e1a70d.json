{"ast":null,"code":"'use strict';\n\nconst punycode = require('punycode');\nconst mimeFuncs = require('../mime-funcs');\nconst crypto = require('crypto');\n\n/**\n * Returns DKIM signature header line\n *\n * @param {Object} headers Parsed headers object from MessageParser\n * @param {String} bodyHash Base64 encoded hash of the message\n * @param {Object} options DKIM options\n * @param {String} options.domainName Domain name to be signed for\n * @param {String} options.keySelector DKIM key selector to use\n * @param {String} options.privateKey DKIM private key to use\n * @return {String} Complete header line\n */\n\nmodule.exports = (headers, hashAlgo, bodyHash, options) => {\n  options = options || {};\n\n  // all listed fields from RFC4871 #5.5\n  let defaultFieldNames = 'From:Sender:Reply-To:Subject:Date:Message-ID:To:' + 'Cc:MIME-Version:Content-Type:Content-Transfer-Encoding:Content-ID:' + 'Content-Description:Resent-Date:Resent-From:Resent-Sender:' + 'Resent-To:Resent-Cc:Resent-Message-ID:In-Reply-To:References:' + 'List-Id:List-Help:List-Unsubscribe:List-Subscribe:List-Post:' + 'List-Owner:List-Archive';\n  let fieldNames = options.headerFieldNames || defaultFieldNames;\n  let canonicalizedHeaderData = relaxedHeaders(headers, fieldNames, options.skipFields);\n  let dkimHeader = generateDKIMHeader(options.domainName, options.keySelector, canonicalizedHeaderData.fieldNames, hashAlgo, bodyHash);\n  let signer, signature;\n  canonicalizedHeaderData.headers += 'dkim-signature:' + relaxedHeaderLine(dkimHeader);\n  signer = crypto.createSign(('rsa-' + hashAlgo).toUpperCase());\n  signer.update(canonicalizedHeaderData.headers);\n  try {\n    signature = signer.sign(options.privateKey, 'base64');\n  } catch (E) {\n    return false;\n  }\n  return dkimHeader + signature.replace(/(^.{73}|.{75}(?!\\r?\\n|\\r))/g, '$&\\r\\n ').trim();\n};\nmodule.exports.relaxedHeaders = relaxedHeaders;\nfunction generateDKIMHeader(domainName, keySelector, fieldNames, hashAlgo, bodyHash) {\n  let dkim = ['v=1', 'a=rsa-' + hashAlgo, 'c=relaxed/relaxed', 'd=' + punycode.toASCII(domainName), 'q=dns/txt', 's=' + keySelector, 'bh=' + bodyHash, 'h=' + fieldNames].join('; ');\n  return mimeFuncs.foldLines('DKIM-Signature: ' + dkim, 76) + ';\\r\\n b=';\n}\nfunction relaxedHeaders(headers, fieldNames, skipFields) {\n  let includedFields = new Set();\n  let skip = new Set();\n  let headerFields = new Map();\n  (skipFields || '').toLowerCase().split(':').forEach(field => {\n    skip.add(field.trim());\n  });\n  (fieldNames || '').toLowerCase().split(':').filter(field => !skip.has(field.trim())).forEach(field => {\n    includedFields.add(field.trim());\n  });\n  for (let i = headers.length - 1; i >= 0; i--) {\n    let line = headers[i];\n    // only include the first value from bottom to top\n    if (includedFields.has(line.key) && !headerFields.has(line.key)) {\n      headerFields.set(line.key, relaxedHeaderLine(line.line));\n    }\n  }\n  let headersList = [];\n  let fields = [];\n  includedFields.forEach(field => {\n    if (headerFields.has(field)) {\n      fields.push(field);\n      headersList.push(field + ':' + headerFields.get(field));\n    }\n  });\n  return {\n    headers: headersList.join('\\r\\n') + '\\r\\n',\n    fieldNames: fields.join(':')\n  };\n}\nfunction relaxedHeaderLine(line) {\n  return line.substr(line.indexOf(':') + 1).replace(/\\r?\\n/g, '').replace(/\\s+/g, ' ').trim();\n}","map":{"version":3,"names":["punycode","require","mimeFuncs","crypto","module","exports","headers","hashAlgo","bodyHash","options","defaultFieldNames","fieldNames","headerFieldNames","canonicalizedHeaderData","relaxedHeaders","skipFields","dkimHeader","generateDKIMHeader","domainName","keySelector","signer","signature","relaxedHeaderLine","createSign","toUpperCase","update","sign","privateKey","E","replace","trim","dkim","toASCII","join","foldLines","includedFields","Set","skip","headerFields","Map","toLowerCase","split","forEach","field","add","filter","has","i","length","line","key","set","headersList","fields","push","get","substr","indexOf"],"sources":["C:/Users/deiby/Desktop/cloneWebCursos/paginacursos/node_modules/nodemailer/lib/dkim/sign.js"],"sourcesContent":["'use strict';\n\nconst punycode = require('punycode');\nconst mimeFuncs = require('../mime-funcs');\nconst crypto = require('crypto');\n\n/**\n * Returns DKIM signature header line\n *\n * @param {Object} headers Parsed headers object from MessageParser\n * @param {String} bodyHash Base64 encoded hash of the message\n * @param {Object} options DKIM options\n * @param {String} options.domainName Domain name to be signed for\n * @param {String} options.keySelector DKIM key selector to use\n * @param {String} options.privateKey DKIM private key to use\n * @return {String} Complete header line\n */\n\nmodule.exports = (headers, hashAlgo, bodyHash, options) => {\n    options = options || {};\n\n    // all listed fields from RFC4871 #5.5\n    let defaultFieldNames =\n        'From:Sender:Reply-To:Subject:Date:Message-ID:To:' +\n        'Cc:MIME-Version:Content-Type:Content-Transfer-Encoding:Content-ID:' +\n        'Content-Description:Resent-Date:Resent-From:Resent-Sender:' +\n        'Resent-To:Resent-Cc:Resent-Message-ID:In-Reply-To:References:' +\n        'List-Id:List-Help:List-Unsubscribe:List-Subscribe:List-Post:' +\n        'List-Owner:List-Archive';\n\n    let fieldNames = options.headerFieldNames || defaultFieldNames;\n\n    let canonicalizedHeaderData = relaxedHeaders(headers, fieldNames, options.skipFields);\n    let dkimHeader = generateDKIMHeader(options.domainName, options.keySelector, canonicalizedHeaderData.fieldNames, hashAlgo, bodyHash);\n\n    let signer, signature;\n\n    canonicalizedHeaderData.headers += 'dkim-signature:' + relaxedHeaderLine(dkimHeader);\n\n    signer = crypto.createSign(('rsa-' + hashAlgo).toUpperCase());\n    signer.update(canonicalizedHeaderData.headers);\n    try {\n        signature = signer.sign(options.privateKey, 'base64');\n    } catch (E) {\n        return false;\n    }\n\n    return dkimHeader + signature.replace(/(^.{73}|.{75}(?!\\r?\\n|\\r))/g, '$&\\r\\n ').trim();\n};\n\nmodule.exports.relaxedHeaders = relaxedHeaders;\n\nfunction generateDKIMHeader(domainName, keySelector, fieldNames, hashAlgo, bodyHash) {\n    let dkim = [\n        'v=1',\n        'a=rsa-' + hashAlgo,\n        'c=relaxed/relaxed',\n        'd=' + punycode.toASCII(domainName),\n        'q=dns/txt',\n        's=' + keySelector,\n        'bh=' + bodyHash,\n        'h=' + fieldNames\n    ].join('; ');\n\n    return mimeFuncs.foldLines('DKIM-Signature: ' + dkim, 76) + ';\\r\\n b=';\n}\n\nfunction relaxedHeaders(headers, fieldNames, skipFields) {\n    let includedFields = new Set();\n    let skip = new Set();\n    let headerFields = new Map();\n\n    (skipFields || '')\n        .toLowerCase()\n        .split(':')\n        .forEach(field => {\n            skip.add(field.trim());\n        });\n\n    (fieldNames || '')\n        .toLowerCase()\n        .split(':')\n        .filter(field => !skip.has(field.trim()))\n        .forEach(field => {\n            includedFields.add(field.trim());\n        });\n\n    for (let i = headers.length - 1; i >= 0; i--) {\n        let line = headers[i];\n        // only include the first value from bottom to top\n        if (includedFields.has(line.key) && !headerFields.has(line.key)) {\n            headerFields.set(line.key, relaxedHeaderLine(line.line));\n        }\n    }\n\n    let headersList = [];\n    let fields = [];\n    includedFields.forEach(field => {\n        if (headerFields.has(field)) {\n            fields.push(field);\n            headersList.push(field + ':' + headerFields.get(field));\n        }\n    });\n\n    return {\n        headers: headersList.join('\\r\\n') + '\\r\\n',\n        fieldNames: fields.join(':')\n    };\n}\n\nfunction relaxedHeaderLine(line) {\n    return line\n        .substr(line.indexOf(':') + 1)\n        .replace(/\\r?\\n/g, '')\n        .replace(/\\s+/g, ' ')\n        .trim();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}