{"ast":null,"code":"'use strict';\n\nconst Transform = require('stream').Transform;\n\n/**\n * Encodes a Buffer into a base64 encoded string\n *\n * @param {Buffer} buffer Buffer to convert\n * @returns {String} base64 encoded string\n */\nfunction encode(buffer) {\n  if (typeof buffer === 'string') {\n    buffer = Buffer.from(buffer, 'utf-8');\n  }\n  return buffer.toString('base64');\n}\n\n/**\n * Adds soft line breaks to a base64 string\n *\n * @param {String} str base64 encoded string that might need line wrapping\n * @param {Number} [lineLength=76] Maximum allowed length for a line\n * @returns {String} Soft-wrapped base64 encoded string\n */\nfunction wrap(str, lineLength) {\n  str = (str || '').toString();\n  lineLength = lineLength || 76;\n  if (str.length <= lineLength) {\n    return str;\n  }\n  let result = [];\n  let pos = 0;\n  let chunkLength = lineLength * 1024;\n  while (pos < str.length) {\n    let wrappedLines = str.substr(pos, chunkLength).replace(new RegExp('.{' + lineLength + '}', 'g'), '$&\\r\\n').trim();\n    result.push(wrappedLines);\n    pos += chunkLength;\n  }\n  return result.join('\\r\\n').trim();\n}\n\n/**\n * Creates a transform stream for encoding data to base64 encoding\n *\n * @constructor\n * @param {Object} options Stream options\n * @param {Number} [options.lineLength=76] Maximum length for lines, set to false to disable wrapping\n */\nclass Encoder extends Transform {\n  constructor(options) {\n    super();\n    // init Transform\n    this.options = options || {};\n    if (this.options.lineLength !== false) {\n      this.options.lineLength = this.options.lineLength || 76;\n    }\n    this._curLine = '';\n    this._remainingBytes = false;\n    this.inputBytes = 0;\n    this.outputBytes = 0;\n  }\n  _transform(chunk, encoding, done) {\n    if (encoding !== 'buffer') {\n      chunk = Buffer.from(chunk, encoding);\n    }\n    if (!chunk || !chunk.length) {\n      return setImmediate(done);\n    }\n    this.inputBytes += chunk.length;\n    if (this._remainingBytes && this._remainingBytes.length) {\n      chunk = Buffer.concat([this._remainingBytes, chunk], this._remainingBytes.length + chunk.length);\n      this._remainingBytes = false;\n    }\n    if (chunk.length % 3) {\n      this._remainingBytes = chunk.slice(chunk.length - chunk.length % 3);\n      chunk = chunk.slice(0, chunk.length - chunk.length % 3);\n    } else {\n      this._remainingBytes = false;\n    }\n    let b64 = this._curLine + encode(chunk);\n    if (this.options.lineLength) {\n      b64 = wrap(b64, this.options.lineLength);\n\n      // remove last line as it is still most probably incomplete\n      let lastLF = b64.lastIndexOf('\\n');\n      if (lastLF < 0) {\n        this._curLine = b64;\n        b64 = '';\n      } else if (lastLF === b64.length - 1) {\n        this._curLine = '';\n      } else {\n        this._curLine = b64.substr(lastLF + 1);\n        b64 = b64.substr(0, lastLF + 1);\n      }\n    }\n    if (b64) {\n      this.outputBytes += b64.length;\n      this.push(Buffer.from(b64, 'ascii'));\n    }\n    setImmediate(done);\n  }\n  _flush(done) {\n    if (this._remainingBytes && this._remainingBytes.length) {\n      this._curLine += encode(this._remainingBytes);\n    }\n    if (this._curLine) {\n      this._curLine = wrap(this._curLine, this.options.lineLength);\n      this.outputBytes += this._curLine.length;\n      this.push(this._curLine, 'ascii');\n      this._curLine = '';\n    }\n    done();\n  }\n}\n\n// expose to the world\nmodule.exports = {\n  encode,\n  wrap,\n  Encoder\n};","map":{"version":3,"names":["Transform","require","encode","buffer","Buffer","from","toString","wrap","str","lineLength","length","result","pos","chunkLength","wrappedLines","substr","replace","RegExp","trim","push","join","Encoder","constructor","options","_curLine","_remainingBytes","inputBytes","outputBytes","_transform","chunk","encoding","done","setImmediate","concat","slice","b64","lastLF","lastIndexOf","_flush","module","exports"],"sources":["C:/Users/deiby/Desktop/cloneWebCursos/paginacursos/node_modules/nodemailer/lib/base64/index.js"],"sourcesContent":["'use strict';\n\nconst Transform = require('stream').Transform;\n\n/**\n * Encodes a Buffer into a base64 encoded string\n *\n * @param {Buffer} buffer Buffer to convert\n * @returns {String} base64 encoded string\n */\nfunction encode(buffer) {\n    if (typeof buffer === 'string') {\n        buffer = Buffer.from(buffer, 'utf-8');\n    }\n\n    return buffer.toString('base64');\n}\n\n/**\n * Adds soft line breaks to a base64 string\n *\n * @param {String} str base64 encoded string that might need line wrapping\n * @param {Number} [lineLength=76] Maximum allowed length for a line\n * @returns {String} Soft-wrapped base64 encoded string\n */\nfunction wrap(str, lineLength) {\n    str = (str || '').toString();\n    lineLength = lineLength || 76;\n\n    if (str.length <= lineLength) {\n        return str;\n    }\n\n    let result = [];\n    let pos = 0;\n    let chunkLength = lineLength * 1024;\n    while (pos < str.length) {\n        let wrappedLines = str\n            .substr(pos, chunkLength)\n            .replace(new RegExp('.{' + lineLength + '}', 'g'), '$&\\r\\n')\n            .trim();\n        result.push(wrappedLines);\n        pos += chunkLength;\n    }\n\n    return result.join('\\r\\n').trim();\n}\n\n/**\n * Creates a transform stream for encoding data to base64 encoding\n *\n * @constructor\n * @param {Object} options Stream options\n * @param {Number} [options.lineLength=76] Maximum length for lines, set to false to disable wrapping\n */\nclass Encoder extends Transform {\n    constructor(options) {\n        super();\n        // init Transform\n        this.options = options || {};\n\n        if (this.options.lineLength !== false) {\n            this.options.lineLength = this.options.lineLength || 76;\n        }\n\n        this._curLine = '';\n        this._remainingBytes = false;\n\n        this.inputBytes = 0;\n        this.outputBytes = 0;\n    }\n\n    _transform(chunk, encoding, done) {\n        if (encoding !== 'buffer') {\n            chunk = Buffer.from(chunk, encoding);\n        }\n\n        if (!chunk || !chunk.length) {\n            return setImmediate(done);\n        }\n\n        this.inputBytes += chunk.length;\n\n        if (this._remainingBytes && this._remainingBytes.length) {\n            chunk = Buffer.concat([this._remainingBytes, chunk], this._remainingBytes.length + chunk.length);\n            this._remainingBytes = false;\n        }\n\n        if (chunk.length % 3) {\n            this._remainingBytes = chunk.slice(chunk.length - (chunk.length % 3));\n            chunk = chunk.slice(0, chunk.length - (chunk.length % 3));\n        } else {\n            this._remainingBytes = false;\n        }\n\n        let b64 = this._curLine + encode(chunk);\n\n        if (this.options.lineLength) {\n            b64 = wrap(b64, this.options.lineLength);\n\n            // remove last line as it is still most probably incomplete\n            let lastLF = b64.lastIndexOf('\\n');\n            if (lastLF < 0) {\n                this._curLine = b64;\n                b64 = '';\n            } else if (lastLF === b64.length - 1) {\n                this._curLine = '';\n            } else {\n                this._curLine = b64.substr(lastLF + 1);\n                b64 = b64.substr(0, lastLF + 1);\n            }\n        }\n\n        if (b64) {\n            this.outputBytes += b64.length;\n            this.push(Buffer.from(b64, 'ascii'));\n        }\n\n        setImmediate(done);\n    }\n\n    _flush(done) {\n        if (this._remainingBytes && this._remainingBytes.length) {\n            this._curLine += encode(this._remainingBytes);\n        }\n\n        if (this._curLine) {\n            this._curLine = wrap(this._curLine, this.options.lineLength);\n            this.outputBytes += this._curLine.length;\n            this.push(this._curLine, 'ascii');\n            this._curLine = '';\n        }\n        done();\n    }\n}\n\n// expose to the world\nmodule.exports = {\n    encode,\n    wrap,\n    Encoder\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}