{"ast":null,"code":"'use strict';\n\n// module to handle cookies\nconst urllib = require('url');\nconst SESSION_TIMEOUT = 1800; // 30 min\n\n/**\n * Creates a biskviit cookie jar for managing cookie values in memory\n *\n * @constructor\n * @param {Object} [options] Optional options object\n */\nclass Cookies {\n  constructor(options) {\n    this.options = options || {};\n    this.cookies = [];\n  }\n\n  /**\n   * Stores a cookie string to the cookie storage\n   *\n   * @param {String} cookieStr Value from the 'Set-Cookie:' header\n   * @param {String} url Current URL\n   */\n  set(cookieStr, url) {\n    let urlparts = urllib.parse(url || '');\n    let cookie = this.parse(cookieStr);\n    let domain;\n    if (cookie.domain) {\n      domain = cookie.domain.replace(/^\\./, '');\n\n      // do not allow cross origin cookies\n      if (\n      // can't be valid if the requested domain is shorter than current hostname\n      urlparts.hostname.length < domain.length ||\n      // prefix domains with dot to be sure that partial matches are not used\n      ('.' + urlparts.hostname).substr(-domain.length + 1) !== '.' + domain) {\n        cookie.domain = urlparts.hostname;\n      }\n    } else {\n      cookie.domain = urlparts.hostname;\n    }\n    if (!cookie.path) {\n      cookie.path = this.getPath(urlparts.pathname);\n    }\n\n    // if no expire date, then use sessionTimeout value\n    if (!cookie.expires) {\n      cookie.expires = new Date(Date.now() + (Number(this.options.sessionTimeout || SESSION_TIMEOUT) || SESSION_TIMEOUT) * 1000);\n    }\n    return this.add(cookie);\n  }\n\n  /**\n   * Returns cookie string for the 'Cookie:' header.\n   *\n   * @param {String} url URL to check for\n   * @returns {String} Cookie header or empty string if no matches were found\n   */\n  get(url) {\n    return this.list(url).map(cookie => cookie.name + '=' + cookie.value).join('; ');\n  }\n\n  /**\n   * Lists all valied cookie objects for the specified URL\n   *\n   * @param {String} url URL to check for\n   * @returns {Array} An array of cookie objects\n   */\n  list(url) {\n    let result = [];\n    let i;\n    let cookie;\n    for (i = this.cookies.length - 1; i >= 0; i--) {\n      cookie = this.cookies[i];\n      if (this.isExpired(cookie)) {\n        this.cookies.splice(i, i);\n        continue;\n      }\n      if (this.match(cookie, url)) {\n        result.unshift(cookie);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Parses cookie string from the 'Set-Cookie:' header\n   *\n   * @param {String} cookieStr String from the 'Set-Cookie:' header\n   * @returns {Object} Cookie object\n   */\n  parse(cookieStr) {\n    let cookie = {};\n    (cookieStr || '').toString().split(';').forEach(cookiePart => {\n      let valueParts = cookiePart.split('=');\n      let key = valueParts.shift().trim().toLowerCase();\n      let value = valueParts.join('=').trim();\n      let domain;\n      if (!key) {\n        // skip empty parts\n        return;\n      }\n      switch (key) {\n        case 'expires':\n          value = new Date(value);\n          // ignore date if can not parse it\n          if (value.toString() !== 'Invalid Date') {\n            cookie.expires = value;\n          }\n          break;\n        case 'path':\n          cookie.path = value;\n          break;\n        case 'domain':\n          domain = value.toLowerCase();\n          if (domain.length && domain.charAt(0) !== '.') {\n            domain = '.' + domain; // ensure preceeding dot for user set domains\n          }\n\n          cookie.domain = domain;\n          break;\n        case 'max-age':\n          cookie.expires = new Date(Date.now() + (Number(value) || 0) * 1000);\n          break;\n        case 'secure':\n          cookie.secure = true;\n          break;\n        case 'httponly':\n          cookie.httponly = true;\n          break;\n        default:\n          if (!cookie.name) {\n            cookie.name = key;\n            cookie.value = value;\n          }\n      }\n    });\n    return cookie;\n  }\n\n  /**\n   * Checks if a cookie object is valid for a specified URL\n   *\n   * @param {Object} cookie Cookie object\n   * @param {String} url URL to check for\n   * @returns {Boolean} true if cookie is valid for specifiec URL\n   */\n  match(cookie, url) {\n    let urlparts = urllib.parse(url || '');\n\n    // check if hostname matches\n    // .foo.com also matches subdomains, foo.com does not\n    if (urlparts.hostname !== cookie.domain && (cookie.domain.charAt(0) !== '.' || ('.' + urlparts.hostname).substr(-cookie.domain.length) !== cookie.domain)) {\n      return false;\n    }\n\n    // check if path matches\n    let path = this.getPath(urlparts.pathname);\n    if (path.substr(0, cookie.path.length) !== cookie.path) {\n      return false;\n    }\n\n    // check secure argument\n    if (cookie.secure && urlparts.protocol !== 'https:') {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Adds (or updates/removes if needed) a cookie object to the cookie storage\n   *\n   * @param {Object} cookie Cookie value to be stored\n   */\n  add(cookie) {\n    let i;\n    let len;\n\n    // nothing to do here\n    if (!cookie || !cookie.name) {\n      return false;\n    }\n\n    // overwrite if has same params\n    for (i = 0, len = this.cookies.length; i < len; i++) {\n      if (this.compare(this.cookies[i], cookie)) {\n        // check if the cookie needs to be removed instead\n        if (this.isExpired(cookie)) {\n          this.cookies.splice(i, 1); // remove expired/unset cookie\n          return false;\n        }\n        this.cookies[i] = cookie;\n        return true;\n      }\n    }\n\n    // add as new if not already expired\n    if (!this.isExpired(cookie)) {\n      this.cookies.push(cookie);\n    }\n    return true;\n  }\n\n  /**\n   * Checks if two cookie objects are the same\n   *\n   * @param {Object} a Cookie to check against\n   * @param {Object} b Cookie to check against\n   * @returns {Boolean} True, if the cookies are the same\n   */\n  compare(a, b) {\n    return a.name === b.name && a.path === b.path && a.domain === b.domain && a.secure === b.secure && a.httponly === a.httponly;\n  }\n\n  /**\n   * Checks if a cookie is expired\n   *\n   * @param {Object} cookie Cookie object to check against\n   * @returns {Boolean} True, if the cookie is expired\n   */\n  isExpired(cookie) {\n    return cookie.expires && cookie.expires < new Date() || !cookie.value;\n  }\n\n  /**\n   * Returns normalized cookie path for an URL path argument\n   *\n   * @param {String} pathname\n   * @returns {String} Normalized path\n   */\n  getPath(pathname) {\n    let path = (pathname || '/').split('/');\n    path.pop(); // remove filename part\n    path = path.join('/').trim();\n\n    // ensure path prefix /\n    if (path.charAt(0) !== '/') {\n      path = '/' + path;\n    }\n\n    // ensure path suffix /\n    if (path.substr(-1) !== '/') {\n      path += '/';\n    }\n    return path;\n  }\n}\nmodule.exports = Cookies;","map":{"version":3,"names":["urllib","require","SESSION_TIMEOUT","Cookies","constructor","options","cookies","set","cookieStr","url","urlparts","parse","cookie","domain","replace","hostname","length","substr","path","getPath","pathname","expires","Date","now","Number","sessionTimeout","add","get","list","map","name","value","join","result","i","isExpired","splice","match","unshift","toString","split","forEach","cookiePart","valueParts","key","shift","trim","toLowerCase","charAt","secure","httponly","protocol","len","compare","push","a","b","pop","module","exports"],"sources":["C:/Users/deiby/Desktop/cloneWebCursos/paginacursos/node_modules/nodemailer/lib/fetch/cookies.js"],"sourcesContent":["'use strict';\n\n// module to handle cookies\n\nconst urllib = require('url');\n\nconst SESSION_TIMEOUT = 1800; // 30 min\n\n/**\n * Creates a biskviit cookie jar for managing cookie values in memory\n *\n * @constructor\n * @param {Object} [options] Optional options object\n */\nclass Cookies {\n    constructor(options) {\n        this.options = options || {};\n        this.cookies = [];\n    }\n\n    /**\n     * Stores a cookie string to the cookie storage\n     *\n     * @param {String} cookieStr Value from the 'Set-Cookie:' header\n     * @param {String} url Current URL\n     */\n    set(cookieStr, url) {\n        let urlparts = urllib.parse(url || '');\n        let cookie = this.parse(cookieStr);\n        let domain;\n\n        if (cookie.domain) {\n            domain = cookie.domain.replace(/^\\./, '');\n\n            // do not allow cross origin cookies\n            if (\n                // can't be valid if the requested domain is shorter than current hostname\n                urlparts.hostname.length < domain.length ||\n                // prefix domains with dot to be sure that partial matches are not used\n                ('.' + urlparts.hostname).substr(-domain.length + 1) !== '.' + domain\n            ) {\n                cookie.domain = urlparts.hostname;\n            }\n        } else {\n            cookie.domain = urlparts.hostname;\n        }\n\n        if (!cookie.path) {\n            cookie.path = this.getPath(urlparts.pathname);\n        }\n\n        // if no expire date, then use sessionTimeout value\n        if (!cookie.expires) {\n            cookie.expires = new Date(Date.now() + (Number(this.options.sessionTimeout || SESSION_TIMEOUT) || SESSION_TIMEOUT) * 1000);\n        }\n\n        return this.add(cookie);\n    }\n\n    /**\n     * Returns cookie string for the 'Cookie:' header.\n     *\n     * @param {String} url URL to check for\n     * @returns {String} Cookie header or empty string if no matches were found\n     */\n    get(url) {\n        return this.list(url)\n            .map(cookie => cookie.name + '=' + cookie.value)\n            .join('; ');\n    }\n\n    /**\n     * Lists all valied cookie objects for the specified URL\n     *\n     * @param {String} url URL to check for\n     * @returns {Array} An array of cookie objects\n     */\n    list(url) {\n        let result = [];\n        let i;\n        let cookie;\n\n        for (i = this.cookies.length - 1; i >= 0; i--) {\n            cookie = this.cookies[i];\n\n            if (this.isExpired(cookie)) {\n                this.cookies.splice(i, i);\n                continue;\n            }\n\n            if (this.match(cookie, url)) {\n                result.unshift(cookie);\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Parses cookie string from the 'Set-Cookie:' header\n     *\n     * @param {String} cookieStr String from the 'Set-Cookie:' header\n     * @returns {Object} Cookie object\n     */\n    parse(cookieStr) {\n        let cookie = {};\n\n        (cookieStr || '')\n            .toString()\n            .split(';')\n            .forEach(cookiePart => {\n                let valueParts = cookiePart.split('=');\n                let key = valueParts.shift().trim().toLowerCase();\n                let value = valueParts.join('=').trim();\n                let domain;\n\n                if (!key) {\n                    // skip empty parts\n                    return;\n                }\n\n                switch (key) {\n                    case 'expires':\n                        value = new Date(value);\n                        // ignore date if can not parse it\n                        if (value.toString() !== 'Invalid Date') {\n                            cookie.expires = value;\n                        }\n                        break;\n\n                    case 'path':\n                        cookie.path = value;\n                        break;\n\n                    case 'domain':\n                        domain = value.toLowerCase();\n                        if (domain.length && domain.charAt(0) !== '.') {\n                            domain = '.' + domain; // ensure preceeding dot for user set domains\n                        }\n                        cookie.domain = domain;\n                        break;\n\n                    case 'max-age':\n                        cookie.expires = new Date(Date.now() + (Number(value) || 0) * 1000);\n                        break;\n\n                    case 'secure':\n                        cookie.secure = true;\n                        break;\n\n                    case 'httponly':\n                        cookie.httponly = true;\n                        break;\n\n                    default:\n                        if (!cookie.name) {\n                            cookie.name = key;\n                            cookie.value = value;\n                        }\n                }\n            });\n\n        return cookie;\n    }\n\n    /**\n     * Checks if a cookie object is valid for a specified URL\n     *\n     * @param {Object} cookie Cookie object\n     * @param {String} url URL to check for\n     * @returns {Boolean} true if cookie is valid for specifiec URL\n     */\n    match(cookie, url) {\n        let urlparts = urllib.parse(url || '');\n\n        // check if hostname matches\n        // .foo.com also matches subdomains, foo.com does not\n        if (\n            urlparts.hostname !== cookie.domain &&\n            (cookie.domain.charAt(0) !== '.' || ('.' + urlparts.hostname).substr(-cookie.domain.length) !== cookie.domain)\n        ) {\n            return false;\n        }\n\n        // check if path matches\n        let path = this.getPath(urlparts.pathname);\n        if (path.substr(0, cookie.path.length) !== cookie.path) {\n            return false;\n        }\n\n        // check secure argument\n        if (cookie.secure && urlparts.protocol !== 'https:') {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds (or updates/removes if needed) a cookie object to the cookie storage\n     *\n     * @param {Object} cookie Cookie value to be stored\n     */\n    add(cookie) {\n        let i;\n        let len;\n\n        // nothing to do here\n        if (!cookie || !cookie.name) {\n            return false;\n        }\n\n        // overwrite if has same params\n        for (i = 0, len = this.cookies.length; i < len; i++) {\n            if (this.compare(this.cookies[i], cookie)) {\n                // check if the cookie needs to be removed instead\n                if (this.isExpired(cookie)) {\n                    this.cookies.splice(i, 1); // remove expired/unset cookie\n                    return false;\n                }\n\n                this.cookies[i] = cookie;\n                return true;\n            }\n        }\n\n        // add as new if not already expired\n        if (!this.isExpired(cookie)) {\n            this.cookies.push(cookie);\n        }\n\n        return true;\n    }\n\n    /**\n     * Checks if two cookie objects are the same\n     *\n     * @param {Object} a Cookie to check against\n     * @param {Object} b Cookie to check against\n     * @returns {Boolean} True, if the cookies are the same\n     */\n    compare(a, b) {\n        return a.name === b.name && a.path === b.path && a.domain === b.domain && a.secure === b.secure && a.httponly === a.httponly;\n    }\n\n    /**\n     * Checks if a cookie is expired\n     *\n     * @param {Object} cookie Cookie object to check against\n     * @returns {Boolean} True, if the cookie is expired\n     */\n    isExpired(cookie) {\n        return (cookie.expires && cookie.expires < new Date()) || !cookie.value;\n    }\n\n    /**\n     * Returns normalized cookie path for an URL path argument\n     *\n     * @param {String} pathname\n     * @returns {String} Normalized path\n     */\n    getPath(pathname) {\n        let path = (pathname || '/').split('/');\n        path.pop(); // remove filename part\n        path = path.join('/').trim();\n\n        // ensure path prefix /\n        if (path.charAt(0) !== '/') {\n            path = '/' + path;\n        }\n\n        // ensure path suffix /\n        if (path.substr(-1) !== '/') {\n            path += '/';\n        }\n\n        return path;\n    }\n}\n\nmodule.exports = Cookies;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}