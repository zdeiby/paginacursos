{"ast":null,"code":"/* eslint no-console: 0 */\n\n'use strict';\n\nconst urllib = require('url');\nconst util = require('util');\nconst fs = require('fs');\nconst nmfetch = require('../fetch');\nconst dns = require('dns');\nconst net = require('net');\nconst os = require('os');\nconst DNS_TTL = 5 * 60 * 1000;\nlet networkInterfaces;\ntry {\n  networkInterfaces = os.networkInterfaces();\n} catch (err) {\n  // fails on some systems\n}\nmodule.exports.networkInterfaces = networkInterfaces;\nconst isFamilySupported = (family, allowInternal) => {\n  let networkInterfaces = module.exports.networkInterfaces;\n  if (!networkInterfaces) {\n    // hope for the best\n    return true;\n  }\n  const familySupported =\n  // crux that replaces Object.values(networkInterfaces) as Object.values is not supported in nodejs v6\n  Object.keys(networkInterfaces).map(key => networkInterfaces[key])\n  // crux that replaces .flat() as it is not supported in older Node versions (v10 and older)\n  .reduce((acc, val) => acc.concat(val), []).filter(i => !i.internal || allowInternal).filter(i => i.family === 'IPv' + family || i.family === family).length > 0;\n  return familySupported;\n};\nconst resolver = (family, hostname, options, callback) => {\n  options = options || {};\n  const familySupported = isFamilySupported(family, options.allowInternalNetworkInterfaces);\n  if (!familySupported) {\n    return callback(null, []);\n  }\n  const resolver = dns.Resolver ? new dns.Resolver(options) : dns;\n  resolver['resolve' + family](hostname, (err, addresses) => {\n    if (err) {\n      switch (err.code) {\n        case dns.NODATA:\n        case dns.NOTFOUND:\n        case dns.NOTIMP:\n        case dns.SERVFAIL:\n        case dns.CONNREFUSED:\n        case dns.REFUSED:\n        case 'EAI_AGAIN':\n          return callback(null, []);\n      }\n      return callback(err);\n    }\n    return callback(null, Array.isArray(addresses) ? addresses : [].concat(addresses || []));\n  });\n};\nconst dnsCache = module.exports.dnsCache = new Map();\nconst formatDNSValue = (value, extra) => {\n  if (!value) {\n    return Object.assign({}, extra || {});\n  }\n  return Object.assign({\n    servername: value.servername,\n    host: !value.addresses || !value.addresses.length ? null : value.addresses.length === 1 ? value.addresses[0] : value.addresses[Math.floor(Math.random() * value.addresses.length)]\n  }, extra || {});\n};\nmodule.exports.resolveHostname = (options, callback) => {\n  options = options || {};\n  if (!options.host && options.servername) {\n    options.host = options.servername;\n  }\n  if (!options.host || net.isIP(options.host)) {\n    // nothing to do here\n    let value = {\n      addresses: [options.host],\n      servername: options.servername || false\n    };\n    return callback(null, formatDNSValue(value, {\n      cached: false\n    }));\n  }\n  let cached;\n  if (dnsCache.has(options.host)) {\n    cached = dnsCache.get(options.host);\n    if (!cached.expires || cached.expires >= Date.now()) {\n      return callback(null, formatDNSValue(cached.value, {\n        cached: true\n      }));\n    }\n  }\n  resolver(4, options.host, options, (err, addresses) => {\n    if (err) {\n      if (cached) {\n        // ignore error, use expired value\n        return callback(null, formatDNSValue(cached.value, {\n          cached: true,\n          error: err\n        }));\n      }\n      return callback(err);\n    }\n    if (addresses && addresses.length) {\n      let value = {\n        addresses,\n        servername: options.servername || options.host\n      };\n      dnsCache.set(options.host, {\n        value,\n        expires: Date.now() + (options.dnsTtl || DNS_TTL)\n      });\n      return callback(null, formatDNSValue(value, {\n        cached: false\n      }));\n    }\n    resolver(6, options.host, options, (err, addresses) => {\n      if (err) {\n        if (cached) {\n          // ignore error, use expired value\n          return callback(null, formatDNSValue(cached.value, {\n            cached: true,\n            error: err\n          }));\n        }\n        return callback(err);\n      }\n      if (addresses && addresses.length) {\n        let value = {\n          addresses,\n          servername: options.servername || options.host\n        };\n        dnsCache.set(options.host, {\n          value,\n          expires: Date.now() + (options.dnsTtl || DNS_TTL)\n        });\n        return callback(null, formatDNSValue(value, {\n          cached: false\n        }));\n      }\n      try {\n        dns.lookup(options.host, {\n          all: true\n        }, (err, addresses) => {\n          if (err) {\n            if (cached) {\n              // ignore error, use expired value\n              return callback(null, formatDNSValue(cached.value, {\n                cached: true,\n                error: err\n              }));\n            }\n            return callback(err);\n          }\n          let address = addresses ? addresses.filter(addr => isFamilySupported(addr.family)).map(addr => addr.address).shift() : false;\n          if (addresses && addresses.length && !address) {\n            // there are addresses but none can be used\n            console.warn(`Failed to resolve IPv${addresses[0].family} addresses with current network`);\n          }\n          if (!address && cached) {\n            // nothing was found, fallback to cached value\n            return callback(null, formatDNSValue(cached.value, {\n              cached: true\n            }));\n          }\n          let value = {\n            addresses: address ? [address] : [options.host],\n            servername: options.servername || options.host\n          };\n          dnsCache.set(options.host, {\n            value,\n            expires: Date.now() + (options.dnsTtl || DNS_TTL)\n          });\n          return callback(null, formatDNSValue(value, {\n            cached: false\n          }));\n        });\n      } catch (err) {\n        if (cached) {\n          // ignore error, use expired value\n          return callback(null, formatDNSValue(cached.value, {\n            cached: true,\n            error: err\n          }));\n        }\n        return callback(err);\n      }\n    });\n  });\n};\n/**\n * Parses connection url to a structured configuration object\n *\n * @param {String} str Connection url\n * @return {Object} Configuration object\n */\nmodule.exports.parseConnectionUrl = str => {\n  str = str || '';\n  let options = {};\n  [urllib.parse(str, true)].forEach(url => {\n    let auth;\n    switch (url.protocol) {\n      case 'smtp:':\n        options.secure = false;\n        break;\n      case 'smtps:':\n        options.secure = true;\n        break;\n      case 'direct:':\n        options.direct = true;\n        break;\n    }\n    if (!isNaN(url.port) && Number(url.port)) {\n      options.port = Number(url.port);\n    }\n    if (url.hostname) {\n      options.host = url.hostname;\n    }\n    if (url.auth) {\n      auth = url.auth.split(':');\n      if (!options.auth) {\n        options.auth = {};\n      }\n      options.auth.user = auth.shift();\n      options.auth.pass = auth.join(':');\n    }\n    Object.keys(url.query || {}).forEach(key => {\n      let obj = options;\n      let lKey = key;\n      let value = url.query[key];\n      if (!isNaN(value)) {\n        value = Number(value);\n      }\n      switch (value) {\n        case 'true':\n          value = true;\n          break;\n        case 'false':\n          value = false;\n          break;\n      }\n\n      // tls is nested object\n      if (key.indexOf('tls.') === 0) {\n        lKey = key.substr(4);\n        if (!options.tls) {\n          options.tls = {};\n        }\n        obj = options.tls;\n      } else if (key.indexOf('.') >= 0) {\n        // ignore nested properties besides tls\n        return;\n      }\n      if (!(lKey in obj)) {\n        obj[lKey] = value;\n      }\n    });\n  });\n  return options;\n};\nmodule.exports._logFunc = function (logger, level, defaults, data, message) {\n  let entry = {};\n  Object.keys(defaults || {}).forEach(key => {\n    if (key !== 'level') {\n      entry[key] = defaults[key];\n    }\n  });\n  Object.keys(data || {}).forEach(key => {\n    if (key !== 'level') {\n      entry[key] = data[key];\n    }\n  });\n  for (var _len = arguments.length, args = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {\n    args[_key - 5] = arguments[_key];\n  }\n  logger[level](entry, message, ...args);\n};\n\n/**\n * Returns a bunyan-compatible logger interface. Uses either provided logger or\n * creates a default console logger\n *\n * @param {Object} [options] Options object that might include 'logger' value\n * @return {Object} bunyan compatible logger\n */\nmodule.exports.getLogger = (options, defaults) => {\n  options = options || {};\n  let response = {};\n  let levels = ['trace', 'debug', 'info', 'warn', 'error', 'fatal'];\n  if (!options.logger) {\n    // use vanity logger\n    levels.forEach(level => {\n      response[level] = () => false;\n    });\n    return response;\n  }\n  let logger = options.logger;\n  if (options.logger === true) {\n    // create console logger\n    logger = createDefaultLogger(levels);\n  }\n  levels.forEach(level => {\n    response[level] = function (data, message) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n      module.exports._logFunc(logger, level, defaults, data, message, ...args);\n    };\n  });\n  return response;\n};\n\n/**\n * Wrapper for creating a callback that either resolves or rejects a promise\n * based on input\n *\n * @param {Function} resolve Function to run if callback is called\n * @param {Function} reject Function to run if callback ends with an error\n */\nmodule.exports.callbackPromise = (resolve, reject) => function () {\n  let args = Array.from(arguments);\n  let err = args.shift();\n  if (err) {\n    reject(err);\n  } else {\n    resolve(...args);\n  }\n};\n\n/**\n * Resolves a String or a Buffer value for content value. Useful if the value\n * is a Stream or a file or an URL. If the value is a Stream, overwrites\n * the stream object with the resolved value (you can't stream a value twice).\n *\n * This is useful when you want to create a plugin that needs a content value,\n * for example the `html` or `text` value as a String or a Buffer but not as\n * a file path or an URL.\n *\n * @param {Object} data An object or an Array you want to resolve an element for\n * @param {String|Number} key Property name or an Array index\n * @param {Function} callback Callback function with (err, value)\n */\nmodule.exports.resolveContent = (data, key, callback) => {\n  let promise;\n  if (!callback) {\n    promise = new Promise((resolve, reject) => {\n      callback = module.exports.callbackPromise(resolve, reject);\n    });\n  }\n  let content = data && data[key] && data[key].content || data[key];\n  let contentStream;\n  let encoding = (typeof data[key] === 'object' && data[key].encoding || 'utf8').toString().toLowerCase().replace(/[-_\\s]/g, '');\n  if (!content) {\n    return callback(null, content);\n  }\n  if (typeof content === 'object') {\n    if (typeof content.pipe === 'function') {\n      return resolveStream(content, (err, value) => {\n        if (err) {\n          return callback(err);\n        }\n        // we can't stream twice the same content, so we need\n        // to replace the stream object with the streaming result\n        if (data[key].content) {\n          data[key].content = value;\n        } else {\n          data[key] = value;\n        }\n        callback(null, value);\n      });\n    } else if (/^https?:\\/\\//i.test(content.path || content.href)) {\n      contentStream = nmfetch(content.path || content.href);\n      return resolveStream(contentStream, callback);\n    } else if (/^data:/i.test(content.path || content.href)) {\n      let parts = (content.path || content.href).match(/^data:((?:[^;]*;)*(?:[^,]*)),(.*)$/i);\n      if (!parts) {\n        return callback(null, Buffer.from(0));\n      }\n      return callback(null, /\\bbase64$/i.test(parts[1]) ? Buffer.from(parts[2], 'base64') : Buffer.from(decodeURIComponent(parts[2])));\n    } else if (content.path) {\n      return resolveStream(fs.createReadStream(content.path), callback);\n    }\n  }\n  if (typeof data[key].content === 'string' && !['utf8', 'usascii', 'ascii'].includes(encoding)) {\n    content = Buffer.from(data[key].content, encoding);\n  }\n\n  // default action, return as is\n  setImmediate(() => callback(null, content));\n  return promise;\n};\n\n/**\n * Copies properties from source objects to target objects\n */\nmodule.exports.assign = function /* target, ... sources */\n() {\n  let args = Array.from(arguments);\n  let target = args.shift() || {};\n  args.forEach(source => {\n    Object.keys(source || {}).forEach(key => {\n      if (['tls', 'auth'].includes(key) && source[key] && typeof source[key] === 'object') {\n        // tls and auth are special keys that need to be enumerated separately\n        // other objects are passed as is\n        if (!target[key]) {\n          // ensure that target has this key\n          target[key] = {};\n        }\n        Object.keys(source[key]).forEach(subKey => {\n          target[key][subKey] = source[key][subKey];\n        });\n      } else {\n        target[key] = source[key];\n      }\n    });\n  });\n  return target;\n};\nmodule.exports.encodeXText = str => {\n  // ! 0x21\n  // + 0x2B\n  // = 0x3D\n  // ~ 0x7E\n  if (!/[^\\x21-\\x2A\\x2C-\\x3C\\x3E-\\x7E]/.test(str)) {\n    return str;\n  }\n  let buf = Buffer.from(str);\n  let result = '';\n  for (let i = 0, len = buf.length; i < len; i++) {\n    let c = buf[i];\n    if (c < 0x21 || c > 0x7e || c === 0x2b || c === 0x3d) {\n      result += '+' + (c < 0x10 ? '0' : '') + c.toString(16).toUpperCase();\n    } else {\n      result += String.fromCharCode(c);\n    }\n  }\n  return result;\n};\n\n/**\n * Streams a stream value into a Buffer\n *\n * @param {Object} stream Readable stream\n * @param {Function} callback Callback function with (err, value)\n */\nfunction resolveStream(stream, callback) {\n  let responded = false;\n  let chunks = [];\n  let chunklen = 0;\n  stream.on('error', err => {\n    if (responded) {\n      return;\n    }\n    responded = true;\n    callback(err);\n  });\n  stream.on('readable', () => {\n    let chunk;\n    while ((chunk = stream.read()) !== null) {\n      chunks.push(chunk);\n      chunklen += chunk.length;\n    }\n  });\n  stream.on('end', () => {\n    if (responded) {\n      return;\n    }\n    responded = true;\n    let value;\n    try {\n      value = Buffer.concat(chunks, chunklen);\n    } catch (E) {\n      return callback(E);\n    }\n    callback(null, value);\n  });\n}\n\n/**\n * Generates a bunyan-like logger that prints to console\n *\n * @returns {Object} Bunyan logger instance\n */\nfunction createDefaultLogger(levels) {\n  let levelMaxLen = 0;\n  let levelNames = new Map();\n  levels.forEach(level => {\n    if (level.length > levelMaxLen) {\n      levelMaxLen = level.length;\n    }\n  });\n  levels.forEach(level => {\n    let levelName = level.toUpperCase();\n    if (levelName.length < levelMaxLen) {\n      levelName += ' '.repeat(levelMaxLen - levelName.length);\n    }\n    levelNames.set(level, levelName);\n  });\n  let print = function (level, entry, message) {\n    let prefix = '';\n    if (entry) {\n      if (entry.tnx === 'server') {\n        prefix = 'S: ';\n      } else if (entry.tnx === 'client') {\n        prefix = 'C: ';\n      }\n      if (entry.sid) {\n        prefix = '[' + entry.sid + '] ' + prefix;\n      }\n      if (entry.cid) {\n        prefix = '[#' + entry.cid + '] ' + prefix;\n      }\n    }\n    for (var _len3 = arguments.length, args = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {\n      args[_key3 - 3] = arguments[_key3];\n    }\n    message = util.format(message, ...args);\n    message.split(/\\r?\\n/).forEach(line => {\n      console.log('[%s] %s %s', new Date().toISOString().substr(0, 19).replace(/T/, ' '), levelNames.get(level), prefix + line);\n    });\n  };\n  let logger = {};\n  levels.forEach(level => {\n    logger[level] = print.bind(null, level);\n  });\n  return logger;\n}","map":{"version":3,"names":["urllib","require","util","fs","nmfetch","dns","net","os","DNS_TTL","networkInterfaces","err","module","exports","isFamilySupported","family","allowInternal","familySupported","Object","keys","map","key","reduce","acc","val","concat","filter","i","internal","length","resolver","hostname","options","callback","allowInternalNetworkInterfaces","Resolver","addresses","code","NODATA","NOTFOUND","NOTIMP","SERVFAIL","CONNREFUSED","REFUSED","Array","isArray","dnsCache","Map","formatDNSValue","value","extra","assign","servername","host","Math","floor","random","resolveHostname","isIP","cached","has","get","expires","Date","now","error","set","dnsTtl","lookup","all","address","addr","shift","console","warn","parseConnectionUrl","str","parse","forEach","url","auth","protocol","secure","direct","isNaN","port","Number","split","user","pass","join","query","obj","lKey","indexOf","substr","tls","_logFunc","logger","level","defaults","data","message","entry","args","getLogger","response","levels","createDefaultLogger","callbackPromise","resolve","reject","from","arguments","resolveContent","promise","Promise","content","contentStream","encoding","toString","toLowerCase","replace","pipe","resolveStream","test","path","href","parts","match","Buffer","decodeURIComponent","createReadStream","includes","setImmediate","target","source","subKey","encodeXText","buf","result","len","c","toUpperCase","String","fromCharCode","stream","responded","chunks","chunklen","on","chunk","read","push","E","levelMaxLen","levelNames","levelName","repeat","print","prefix","tnx","sid","cid","format","line","log","toISOString","bind"],"sources":["C:/Users/deiby/Desktop/cloneWebCursos/paginacursos/node_modules/nodemailer/lib/shared/index.js"],"sourcesContent":["/* eslint no-console: 0 */\n\n'use strict';\n\nconst urllib = require('url');\nconst util = require('util');\nconst fs = require('fs');\nconst nmfetch = require('../fetch');\nconst dns = require('dns');\nconst net = require('net');\nconst os = require('os');\n\nconst DNS_TTL = 5 * 60 * 1000;\n\nlet networkInterfaces;\ntry {\n    networkInterfaces = os.networkInterfaces();\n} catch (err) {\n    // fails on some systems\n}\n\nmodule.exports.networkInterfaces = networkInterfaces;\n\nconst isFamilySupported = (family, allowInternal) => {\n    let networkInterfaces = module.exports.networkInterfaces;\n    if (!networkInterfaces) {\n        // hope for the best\n        return true;\n    }\n\n    const familySupported =\n        // crux that replaces Object.values(networkInterfaces) as Object.values is not supported in nodejs v6\n        Object.keys(networkInterfaces)\n            .map(key => networkInterfaces[key])\n            // crux that replaces .flat() as it is not supported in older Node versions (v10 and older)\n            .reduce((acc, val) => acc.concat(val), [])\n            .filter(i => !i.internal || allowInternal)\n            .filter(i => i.family === 'IPv' + family || i.family === family).length > 0;\n\n    return familySupported;\n};\n\nconst resolver = (family, hostname, options, callback) => {\n    options = options || {};\n    const familySupported = isFamilySupported(family, options.allowInternalNetworkInterfaces);\n\n    if (!familySupported) {\n        return callback(null, []);\n    }\n\n    const resolver = dns.Resolver ? new dns.Resolver(options) : dns;\n    resolver['resolve' + family](hostname, (err, addresses) => {\n        if (err) {\n            switch (err.code) {\n                case dns.NODATA:\n                case dns.NOTFOUND:\n                case dns.NOTIMP:\n                case dns.SERVFAIL:\n                case dns.CONNREFUSED:\n                case dns.REFUSED:\n                case 'EAI_AGAIN':\n                    return callback(null, []);\n            }\n            return callback(err);\n        }\n        return callback(null, Array.isArray(addresses) ? addresses : [].concat(addresses || []));\n    });\n};\n\nconst dnsCache = (module.exports.dnsCache = new Map());\n\nconst formatDNSValue = (value, extra) => {\n    if (!value) {\n        return Object.assign({}, extra || {});\n    }\n\n    return Object.assign(\n        {\n            servername: value.servername,\n            host:\n                !value.addresses || !value.addresses.length\n                    ? null\n                    : value.addresses.length === 1\n                    ? value.addresses[0]\n                    : value.addresses[Math.floor(Math.random() * value.addresses.length)]\n        },\n        extra || {}\n    );\n};\n\nmodule.exports.resolveHostname = (options, callback) => {\n    options = options || {};\n\n    if (!options.host && options.servername) {\n        options.host = options.servername;\n    }\n\n    if (!options.host || net.isIP(options.host)) {\n        // nothing to do here\n        let value = {\n            addresses: [options.host],\n            servername: options.servername || false\n        };\n        return callback(\n            null,\n            formatDNSValue(value, {\n                cached: false\n            })\n        );\n    }\n\n    let cached;\n    if (dnsCache.has(options.host)) {\n        cached = dnsCache.get(options.host);\n\n        if (!cached.expires || cached.expires >= Date.now()) {\n            return callback(\n                null,\n                formatDNSValue(cached.value, {\n                    cached: true\n                })\n            );\n        }\n    }\n\n    resolver(4, options.host, options, (err, addresses) => {\n        if (err) {\n            if (cached) {\n                // ignore error, use expired value\n                return callback(\n                    null,\n                    formatDNSValue(cached.value, {\n                        cached: true,\n                        error: err\n                    })\n                );\n            }\n            return callback(err);\n        }\n\n        if (addresses && addresses.length) {\n            let value = {\n                addresses,\n                servername: options.servername || options.host\n            };\n\n            dnsCache.set(options.host, {\n                value,\n                expires: Date.now() + (options.dnsTtl || DNS_TTL)\n            });\n\n            return callback(\n                null,\n                formatDNSValue(value, {\n                    cached: false\n                })\n            );\n        }\n\n        resolver(6, options.host, options, (err, addresses) => {\n            if (err) {\n                if (cached) {\n                    // ignore error, use expired value\n                    return callback(\n                        null,\n                        formatDNSValue(cached.value, {\n                            cached: true,\n                            error: err\n                        })\n                    );\n                }\n                return callback(err);\n            }\n\n            if (addresses && addresses.length) {\n                let value = {\n                    addresses,\n                    servername: options.servername || options.host\n                };\n\n                dnsCache.set(options.host, {\n                    value,\n                    expires: Date.now() + (options.dnsTtl || DNS_TTL)\n                });\n\n                return callback(\n                    null,\n                    formatDNSValue(value, {\n                        cached: false\n                    })\n                );\n            }\n\n            try {\n                dns.lookup(options.host, { all: true }, (err, addresses) => {\n                    if (err) {\n                        if (cached) {\n                            // ignore error, use expired value\n                            return callback(\n                                null,\n                                formatDNSValue(cached.value, {\n                                    cached: true,\n                                    error: err\n                                })\n                            );\n                        }\n                        return callback(err);\n                    }\n\n                    let address = addresses\n                        ? addresses\n                              .filter(addr => isFamilySupported(addr.family))\n                              .map(addr => addr.address)\n                              .shift()\n                        : false;\n\n                    if (addresses && addresses.length && !address) {\n                        // there are addresses but none can be used\n                        console.warn(`Failed to resolve IPv${addresses[0].family} addresses with current network`);\n                    }\n\n                    if (!address && cached) {\n                        // nothing was found, fallback to cached value\n                        return callback(\n                            null,\n                            formatDNSValue(cached.value, {\n                                cached: true\n                            })\n                        );\n                    }\n\n                    let value = {\n                        addresses: address ? [address] : [options.host],\n                        servername: options.servername || options.host\n                    };\n\n                    dnsCache.set(options.host, {\n                        value,\n                        expires: Date.now() + (options.dnsTtl || DNS_TTL)\n                    });\n\n                    return callback(\n                        null,\n                        formatDNSValue(value, {\n                            cached: false\n                        })\n                    );\n                });\n            } catch (err) {\n                if (cached) {\n                    // ignore error, use expired value\n                    return callback(\n                        null,\n                        formatDNSValue(cached.value, {\n                            cached: true,\n                            error: err\n                        })\n                    );\n                }\n                return callback(err);\n            }\n        });\n    });\n};\n/**\n * Parses connection url to a structured configuration object\n *\n * @param {String} str Connection url\n * @return {Object} Configuration object\n */\nmodule.exports.parseConnectionUrl = str => {\n    str = str || '';\n    let options = {};\n\n    [urllib.parse(str, true)].forEach(url => {\n        let auth;\n\n        switch (url.protocol) {\n            case 'smtp:':\n                options.secure = false;\n                break;\n            case 'smtps:':\n                options.secure = true;\n                break;\n            case 'direct:':\n                options.direct = true;\n                break;\n        }\n\n        if (!isNaN(url.port) && Number(url.port)) {\n            options.port = Number(url.port);\n        }\n\n        if (url.hostname) {\n            options.host = url.hostname;\n        }\n\n        if (url.auth) {\n            auth = url.auth.split(':');\n\n            if (!options.auth) {\n                options.auth = {};\n            }\n\n            options.auth.user = auth.shift();\n            options.auth.pass = auth.join(':');\n        }\n\n        Object.keys(url.query || {}).forEach(key => {\n            let obj = options;\n            let lKey = key;\n            let value = url.query[key];\n\n            if (!isNaN(value)) {\n                value = Number(value);\n            }\n\n            switch (value) {\n                case 'true':\n                    value = true;\n                    break;\n                case 'false':\n                    value = false;\n                    break;\n            }\n\n            // tls is nested object\n            if (key.indexOf('tls.') === 0) {\n                lKey = key.substr(4);\n                if (!options.tls) {\n                    options.tls = {};\n                }\n                obj = options.tls;\n            } else if (key.indexOf('.') >= 0) {\n                // ignore nested properties besides tls\n                return;\n            }\n\n            if (!(lKey in obj)) {\n                obj[lKey] = value;\n            }\n        });\n    });\n\n    return options;\n};\n\nmodule.exports._logFunc = (logger, level, defaults, data, message, ...args) => {\n    let entry = {};\n\n    Object.keys(defaults || {}).forEach(key => {\n        if (key !== 'level') {\n            entry[key] = defaults[key];\n        }\n    });\n\n    Object.keys(data || {}).forEach(key => {\n        if (key !== 'level') {\n            entry[key] = data[key];\n        }\n    });\n\n    logger[level](entry, message, ...args);\n};\n\n/**\n * Returns a bunyan-compatible logger interface. Uses either provided logger or\n * creates a default console logger\n *\n * @param {Object} [options] Options object that might include 'logger' value\n * @return {Object} bunyan compatible logger\n */\nmodule.exports.getLogger = (options, defaults) => {\n    options = options || {};\n\n    let response = {};\n    let levels = ['trace', 'debug', 'info', 'warn', 'error', 'fatal'];\n\n    if (!options.logger) {\n        // use vanity logger\n        levels.forEach(level => {\n            response[level] = () => false;\n        });\n        return response;\n    }\n\n    let logger = options.logger;\n\n    if (options.logger === true) {\n        // create console logger\n        logger = createDefaultLogger(levels);\n    }\n\n    levels.forEach(level => {\n        response[level] = (data, message, ...args) => {\n            module.exports._logFunc(logger, level, defaults, data, message, ...args);\n        };\n    });\n\n    return response;\n};\n\n/**\n * Wrapper for creating a callback that either resolves or rejects a promise\n * based on input\n *\n * @param {Function} resolve Function to run if callback is called\n * @param {Function} reject Function to run if callback ends with an error\n */\nmodule.exports.callbackPromise = (resolve, reject) =>\n    function () {\n        let args = Array.from(arguments);\n        let err = args.shift();\n        if (err) {\n            reject(err);\n        } else {\n            resolve(...args);\n        }\n    };\n\n/**\n * Resolves a String or a Buffer value for content value. Useful if the value\n * is a Stream or a file or an URL. If the value is a Stream, overwrites\n * the stream object with the resolved value (you can't stream a value twice).\n *\n * This is useful when you want to create a plugin that needs a content value,\n * for example the `html` or `text` value as a String or a Buffer but not as\n * a file path or an URL.\n *\n * @param {Object} data An object or an Array you want to resolve an element for\n * @param {String|Number} key Property name or an Array index\n * @param {Function} callback Callback function with (err, value)\n */\nmodule.exports.resolveContent = (data, key, callback) => {\n    let promise;\n\n    if (!callback) {\n        promise = new Promise((resolve, reject) => {\n            callback = module.exports.callbackPromise(resolve, reject);\n        });\n    }\n\n    let content = (data && data[key] && data[key].content) || data[key];\n    let contentStream;\n    let encoding = ((typeof data[key] === 'object' && data[key].encoding) || 'utf8')\n        .toString()\n        .toLowerCase()\n        .replace(/[-_\\s]/g, '');\n\n    if (!content) {\n        return callback(null, content);\n    }\n\n    if (typeof content === 'object') {\n        if (typeof content.pipe === 'function') {\n            return resolveStream(content, (err, value) => {\n                if (err) {\n                    return callback(err);\n                }\n                // we can't stream twice the same content, so we need\n                // to replace the stream object with the streaming result\n                if (data[key].content) {\n                    data[key].content = value;\n                } else {\n                    data[key] = value;\n                }\n                callback(null, value);\n            });\n        } else if (/^https?:\\/\\//i.test(content.path || content.href)) {\n            contentStream = nmfetch(content.path || content.href);\n            return resolveStream(contentStream, callback);\n        } else if (/^data:/i.test(content.path || content.href)) {\n            let parts = (content.path || content.href).match(/^data:((?:[^;]*;)*(?:[^,]*)),(.*)$/i);\n            if (!parts) {\n                return callback(null, Buffer.from(0));\n            }\n            return callback(null, /\\bbase64$/i.test(parts[1]) ? Buffer.from(parts[2], 'base64') : Buffer.from(decodeURIComponent(parts[2])));\n        } else if (content.path) {\n            return resolveStream(fs.createReadStream(content.path), callback);\n        }\n    }\n\n    if (typeof data[key].content === 'string' && !['utf8', 'usascii', 'ascii'].includes(encoding)) {\n        content = Buffer.from(data[key].content, encoding);\n    }\n\n    // default action, return as is\n    setImmediate(() => callback(null, content));\n\n    return promise;\n};\n\n/**\n * Copies properties from source objects to target objects\n */\nmodule.exports.assign = function (/* target, ... sources */) {\n    let args = Array.from(arguments);\n    let target = args.shift() || {};\n\n    args.forEach(source => {\n        Object.keys(source || {}).forEach(key => {\n            if (['tls', 'auth'].includes(key) && source[key] && typeof source[key] === 'object') {\n                // tls and auth are special keys that need to be enumerated separately\n                // other objects are passed as is\n                if (!target[key]) {\n                    // ensure that target has this key\n                    target[key] = {};\n                }\n                Object.keys(source[key]).forEach(subKey => {\n                    target[key][subKey] = source[key][subKey];\n                });\n            } else {\n                target[key] = source[key];\n            }\n        });\n    });\n    return target;\n};\n\nmodule.exports.encodeXText = str => {\n    // ! 0x21\n    // + 0x2B\n    // = 0x3D\n    // ~ 0x7E\n    if (!/[^\\x21-\\x2A\\x2C-\\x3C\\x3E-\\x7E]/.test(str)) {\n        return str;\n    }\n    let buf = Buffer.from(str);\n    let result = '';\n    for (let i = 0, len = buf.length; i < len; i++) {\n        let c = buf[i];\n        if (c < 0x21 || c > 0x7e || c === 0x2b || c === 0x3d) {\n            result += '+' + (c < 0x10 ? '0' : '') + c.toString(16).toUpperCase();\n        } else {\n            result += String.fromCharCode(c);\n        }\n    }\n    return result;\n};\n\n/**\n * Streams a stream value into a Buffer\n *\n * @param {Object} stream Readable stream\n * @param {Function} callback Callback function with (err, value)\n */\nfunction resolveStream(stream, callback) {\n    let responded = false;\n    let chunks = [];\n    let chunklen = 0;\n\n    stream.on('error', err => {\n        if (responded) {\n            return;\n        }\n\n        responded = true;\n        callback(err);\n    });\n\n    stream.on('readable', () => {\n        let chunk;\n        while ((chunk = stream.read()) !== null) {\n            chunks.push(chunk);\n            chunklen += chunk.length;\n        }\n    });\n\n    stream.on('end', () => {\n        if (responded) {\n            return;\n        }\n        responded = true;\n\n        let value;\n\n        try {\n            value = Buffer.concat(chunks, chunklen);\n        } catch (E) {\n            return callback(E);\n        }\n        callback(null, value);\n    });\n}\n\n/**\n * Generates a bunyan-like logger that prints to console\n *\n * @returns {Object} Bunyan logger instance\n */\nfunction createDefaultLogger(levels) {\n    let levelMaxLen = 0;\n    let levelNames = new Map();\n    levels.forEach(level => {\n        if (level.length > levelMaxLen) {\n            levelMaxLen = level.length;\n        }\n    });\n\n    levels.forEach(level => {\n        let levelName = level.toUpperCase();\n        if (levelName.length < levelMaxLen) {\n            levelName += ' '.repeat(levelMaxLen - levelName.length);\n        }\n        levelNames.set(level, levelName);\n    });\n\n    let print = (level, entry, message, ...args) => {\n        let prefix = '';\n        if (entry) {\n            if (entry.tnx === 'server') {\n                prefix = 'S: ';\n            } else if (entry.tnx === 'client') {\n                prefix = 'C: ';\n            }\n\n            if (entry.sid) {\n                prefix = '[' + entry.sid + '] ' + prefix;\n            }\n\n            if (entry.cid) {\n                prefix = '[#' + entry.cid + '] ' + prefix;\n            }\n        }\n\n        message = util.format(message, ...args);\n        message.split(/\\r?\\n/).forEach(line => {\n            console.log('[%s] %s %s', new Date().toISOString().substr(0, 19).replace(/T/, ' '), levelNames.get(level), prefix + line);\n        });\n    };\n\n    let logger = {};\n    levels.forEach(level => {\n        logger[level] = print.bind(null, level);\n    });\n\n    return logger;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}