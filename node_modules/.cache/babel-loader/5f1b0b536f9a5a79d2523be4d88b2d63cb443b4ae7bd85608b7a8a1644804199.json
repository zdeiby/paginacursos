{"ast":null,"code":"import _toConsumableArray from \"C:/Users/deiby/Desktop/cloneWebCursos/paginacursos/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"C:/Users/deiby/Desktop/cloneWebCursos/paginacursos/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"C:/Users/deiby/Desktop/cloneWebCursos/paginacursos/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/deiby/Desktop/cloneWebCursos/paginacursos/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport css from 'dom-helpers/css';\nimport { dataAttr } from './DataKey';\nimport getBodyScrollbarWidth from './getScrollbarWidth';\nexport var OPEN_DATA_ATTRIBUTE = dataAttr('modal-open');\n\n/**\r\n * Manages a stack of Modals as well as ensuring\r\n * body scrolling is is disabled and padding accounted for\r\n */\nvar ModalManager = /*#__PURE__*/function () {\n  function ModalManager() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      ownerDocument = _ref.ownerDocument,\n      _ref$handleContainerO = _ref.handleContainerOverflow,\n      handleContainerOverflow = _ref$handleContainerO === void 0 ? true : _ref$handleContainerO,\n      _ref$isRTL = _ref.isRTL,\n      isRTL = _ref$isRTL === void 0 ? false : _ref$isRTL;\n    _classCallCheck(this, ModalManager);\n    this.handleContainerOverflow = handleContainerOverflow;\n    this.isRTL = isRTL;\n    this.modals = [];\n    this.ownerDocument = ownerDocument;\n  }\n  _createClass(ModalManager, [{\n    key: \"getScrollbarWidth\",\n    value: function getScrollbarWidth() {\n      return getBodyScrollbarWidth(this.ownerDocument);\n    }\n  }, {\n    key: \"getElement\",\n    value: function getElement() {\n      return (this.ownerDocument || document).body;\n    }\n  }, {\n    key: \"setModalAttributes\",\n    value: function setModalAttributes(_modal) {\n      // For overriding\n    }\n  }, {\n    key: \"removeModalAttributes\",\n    value: function removeModalAttributes(_modal) {\n      // For overriding\n    }\n  }, {\n    key: \"setContainerStyle\",\n    value: function setContainerStyle(containerState) {\n      var style = {\n        overflow: 'hidden'\n      };\n\n      // we are only interested in the actual `style` here\n      // because we will override it\n      var paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';\n      var container = this.getElement();\n      containerState.style = _defineProperty({\n        overflow: container.style.overflow\n      }, paddingProp, container.style[paddingProp]);\n      if (containerState.scrollBarWidth) {\n        // use computed style, here to get the real padding\n        // to add our scrollbar width\n        style[paddingProp] = \"\".concat(parseInt(css(container, paddingProp) || '0', 10) + containerState.scrollBarWidth, \"px\");\n      }\n      container.setAttribute(OPEN_DATA_ATTRIBUTE, '');\n      css(container, style);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _this = this;\n      _toConsumableArray(this.modals).forEach(function (m) {\n        return _this.remove(m);\n      });\n    }\n  }, {\n    key: \"removeContainerStyle\",\n    value: function removeContainerStyle(containerState) {\n      var container = this.getElement();\n      container.removeAttribute(OPEN_DATA_ATTRIBUTE);\n      Object.assign(container.style, containerState.style);\n    }\n  }, {\n    key: \"add\",\n    value: function add(modal) {\n      var modalIdx = this.modals.indexOf(modal);\n      if (modalIdx !== -1) {\n        return modalIdx;\n      }\n      modalIdx = this.modals.length;\n      this.modals.push(modal);\n      this.setModalAttributes(modal);\n      if (modalIdx !== 0) {\n        return modalIdx;\n      }\n      this.state = {\n        scrollBarWidth: this.getScrollbarWidth(),\n        style: {}\n      };\n      if (this.handleContainerOverflow) {\n        this.setContainerStyle(this.state);\n      }\n      return modalIdx;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(modal) {\n      var modalIdx = this.modals.indexOf(modal);\n      if (modalIdx === -1) {\n        return;\n      }\n      this.modals.splice(modalIdx, 1);\n\n      // if that was the last modal in a container,\n      // clean up the container\n      if (!this.modals.length && this.handleContainerOverflow) {\n        this.removeContainerStyle(this.state);\n      }\n      this.removeModalAttributes(modal);\n    }\n  }, {\n    key: \"isTopModal\",\n    value: function isTopModal(modal) {\n      return !!this.modals.length && this.modals[this.modals.length - 1] === modal;\n    }\n  }]);\n  return ModalManager;\n}();\nexport default ModalManager;","map":{"version":3,"names":["css","dataAttr","getBodyScrollbarWidth","OPEN_DATA_ATTRIBUTE","ModalManager","ownerDocument","handleContainerOverflow","isRTL","modals","document","body","_modal","containerState","style","overflow","paddingProp","container","getElement","scrollBarWidth","parseInt","setAttribute","forEach","m","remove","removeAttribute","Object","assign","modal","modalIdx","indexOf","length","push","setModalAttributes","state","getScrollbarWidth","setContainerStyle","splice","removeContainerStyle","removeModalAttributes"],"sources":["C:/Users/deiby/Desktop/cloneWebCursos/paginacursos/node_modules/@restart/ui/esm/ModalManager.js"],"sourcesContent":["import css from 'dom-helpers/css';\r\nimport { dataAttr } from './DataKey';\r\nimport getBodyScrollbarWidth from './getScrollbarWidth';\r\nexport const OPEN_DATA_ATTRIBUTE = dataAttr('modal-open');\r\n\r\n/**\r\n * Manages a stack of Modals as well as ensuring\r\n * body scrolling is is disabled and padding accounted for\r\n */\r\nclass ModalManager {\r\n  constructor({\r\n    ownerDocument,\r\n    handleContainerOverflow = true,\r\n    isRTL = false\r\n  } = {}) {\r\n    this.handleContainerOverflow = handleContainerOverflow;\r\n    this.isRTL = isRTL;\r\n    this.modals = [];\r\n    this.ownerDocument = ownerDocument;\r\n  }\r\n  getScrollbarWidth() {\r\n    return getBodyScrollbarWidth(this.ownerDocument);\r\n  }\r\n  getElement() {\r\n    return (this.ownerDocument || document).body;\r\n  }\r\n  setModalAttributes(_modal) {\r\n    // For overriding\r\n  }\r\n  removeModalAttributes(_modal) {\r\n    // For overriding\r\n  }\r\n  setContainerStyle(containerState) {\r\n    const style = {\r\n      overflow: 'hidden'\r\n    };\r\n\r\n    // we are only interested in the actual `style` here\r\n    // because we will override it\r\n    const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';\r\n    const container = this.getElement();\r\n    containerState.style = {\r\n      overflow: container.style.overflow,\r\n      [paddingProp]: container.style[paddingProp]\r\n    };\r\n    if (containerState.scrollBarWidth) {\r\n      // use computed style, here to get the real padding\r\n      // to add our scrollbar width\r\n      style[paddingProp] = `${parseInt(css(container, paddingProp) || '0', 10) + containerState.scrollBarWidth}px`;\r\n    }\r\n    container.setAttribute(OPEN_DATA_ATTRIBUTE, '');\r\n    css(container, style);\r\n  }\r\n  reset() {\r\n    [...this.modals].forEach(m => this.remove(m));\r\n  }\r\n  removeContainerStyle(containerState) {\r\n    const container = this.getElement();\r\n    container.removeAttribute(OPEN_DATA_ATTRIBUTE);\r\n    Object.assign(container.style, containerState.style);\r\n  }\r\n  add(modal) {\r\n    let modalIdx = this.modals.indexOf(modal);\r\n    if (modalIdx !== -1) {\r\n      return modalIdx;\r\n    }\r\n    modalIdx = this.modals.length;\r\n    this.modals.push(modal);\r\n    this.setModalAttributes(modal);\r\n    if (modalIdx !== 0) {\r\n      return modalIdx;\r\n    }\r\n    this.state = {\r\n      scrollBarWidth: this.getScrollbarWidth(),\r\n      style: {}\r\n    };\r\n    if (this.handleContainerOverflow) {\r\n      this.setContainerStyle(this.state);\r\n    }\r\n    return modalIdx;\r\n  }\r\n  remove(modal) {\r\n    const modalIdx = this.modals.indexOf(modal);\r\n    if (modalIdx === -1) {\r\n      return;\r\n    }\r\n    this.modals.splice(modalIdx, 1);\r\n\r\n    // if that was the last modal in a container,\r\n    // clean up the container\r\n    if (!this.modals.length && this.handleContainerOverflow) {\r\n      this.removeContainerStyle(this.state);\r\n    }\r\n    this.removeModalAttributes(modal);\r\n  }\r\n  isTopModal(modal) {\r\n    return !!this.modals.length && this.modals[this.modals.length - 1] === modal;\r\n  }\r\n}\r\nexport default ModalManager;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}