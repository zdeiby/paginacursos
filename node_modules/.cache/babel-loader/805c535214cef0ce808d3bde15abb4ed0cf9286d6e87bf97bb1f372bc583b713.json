{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events');\nconst PoolResource = require('./pool-resource');\nconst SMTPConnection = require('../smtp-connection');\nconst wellKnown = require('../well-known');\nconst shared = require('../shared');\nconst packageData = require('../../package.json');\n\n/**\n * Creates a SMTP pool transport object for Nodemailer\n *\n * @constructor\n * @param {Object} options SMTP Connection options\n */\nclass SMTPPool extends EventEmitter {\n  constructor(options) {\n    super();\n    options = options || {};\n    if (typeof options === 'string') {\n      options = {\n        url: options\n      };\n    }\n    let urlData;\n    let service = options.service;\n    if (typeof options.getSocket === 'function') {\n      this.getSocket = options.getSocket;\n    }\n    if (options.url) {\n      urlData = shared.parseConnectionUrl(options.url);\n      service = service || urlData.service;\n    }\n    this.options = shared.assign(false,\n    // create new object\n    options,\n    // regular options\n    urlData,\n    // url options\n    service && wellKnown(service) // wellknown options\n    );\n\n    this.options.maxConnections = this.options.maxConnections || 5;\n    this.options.maxMessages = this.options.maxMessages || 100;\n    this.logger = shared.getLogger(this.options, {\n      component: this.options.component || 'smtp-pool'\n    });\n\n    // temporary object\n    let connection = new SMTPConnection(this.options);\n    this.name = 'SMTP (pool)';\n    this.version = packageData.version + '[client:' + connection.version + ']';\n    this._rateLimit = {\n      counter: 0,\n      timeout: null,\n      waiting: [],\n      checkpoint: false,\n      delta: Number(this.options.rateDelta) || 1000,\n      limit: Number(this.options.rateLimit) || 0\n    };\n    this._closed = false;\n    this._queue = [];\n    this._connections = [];\n    this._connectionCounter = 0;\n    this.idling = true;\n    setImmediate(() => {\n      if (this.idling) {\n        this.emit('idle');\n      }\n    });\n  }\n\n  /**\n   * Placeholder function for creating proxy sockets. This method immediatelly returns\n   * without a socket\n   *\n   * @param {Object} options Connection options\n   * @param {Function} callback Callback function to run with the socket keys\n   */\n  getSocket(options, callback) {\n    // return immediatelly\n    return setImmediate(() => callback(null, false));\n  }\n\n  /**\n   * Queues an e-mail to be sent using the selected settings\n   *\n   * @param {Object} mail Mail object\n   * @param {Function} callback Callback function\n   */\n  send(mail, callback) {\n    if (this._closed) {\n      return false;\n    }\n    this._queue.push({\n      mail,\n      requeueAttempts: 0,\n      callback\n    });\n    if (this.idling && this._queue.length >= this.options.maxConnections) {\n      this.idling = false;\n    }\n    setImmediate(() => this._processMessages());\n    return true;\n  }\n\n  /**\n   * Closes all connections in the pool. If there is a message being sent, the connection\n   * is closed later\n   */\n  close() {\n    let connection;\n    let len = this._connections.length;\n    this._closed = true;\n\n    // clear rate limit timer if it exists\n    clearTimeout(this._rateLimit.timeout);\n    if (!len && !this._queue.length) {\n      return;\n    }\n\n    // remove all available connections\n    for (let i = len - 1; i >= 0; i--) {\n      if (this._connections[i] && this._connections[i].available) {\n        connection = this._connections[i];\n        connection.close();\n        this.logger.info({\n          tnx: 'connection',\n          cid: connection.id,\n          action: 'removed'\n        }, 'Connection #%s removed', connection.id);\n      }\n    }\n    if (len && !this._connections.length) {\n      this.logger.debug({\n        tnx: 'connection'\n      }, 'All connections removed');\n    }\n    if (!this._queue.length) {\n      return;\n    }\n\n    // make sure that entire queue would be cleaned\n    let invokeCallbacks = () => {\n      if (!this._queue.length) {\n        this.logger.debug({\n          tnx: 'connection'\n        }, 'Pending queue entries cleared');\n        return;\n      }\n      let entry = this._queue.shift();\n      if (entry && typeof entry.callback === 'function') {\n        try {\n          entry.callback(new Error('Connection pool was closed'));\n        } catch (E) {\n          this.logger.error({\n            err: E,\n            tnx: 'callback',\n            cid: connection.id\n          }, 'Callback error for #%s: %s', connection.id, E.message);\n        }\n      }\n      setImmediate(invokeCallbacks);\n    };\n    setImmediate(invokeCallbacks);\n  }\n\n  /**\n   * Check the queue and available connections. If there is a message to be sent and there is\n   * an available connection, then use this connection to send the mail\n   */\n  _processMessages() {\n    let connection;\n    let i, len;\n\n    // do nothing if already closed\n    if (this._closed) {\n      return;\n    }\n\n    // do nothing if queue is empty\n    if (!this._queue.length) {\n      if (!this.idling) {\n        // no pending jobs\n        this.idling = true;\n        this.emit('idle');\n      }\n      return;\n    }\n\n    // find first available connection\n    for (i = 0, len = this._connections.length; i < len; i++) {\n      if (this._connections[i].available) {\n        connection = this._connections[i];\n        break;\n      }\n    }\n    if (!connection && this._connections.length < this.options.maxConnections) {\n      connection = this._createConnection();\n    }\n    if (!connection) {\n      // no more free connection slots available\n      this.idling = false;\n      return;\n    }\n\n    // check if there is free space in the processing queue\n    if (!this.idling && this._queue.length < this.options.maxConnections) {\n      this.idling = true;\n      this.emit('idle');\n    }\n    let entry = connection.queueEntry = this._queue.shift();\n    entry.messageId = (connection.queueEntry.mail.message.getHeader('message-id') || '').replace(/[<>\\s]/g, '');\n    connection.available = false;\n    this.logger.debug({\n      tnx: 'pool',\n      cid: connection.id,\n      messageId: entry.messageId,\n      action: 'assign'\n    }, 'Assigned message <%s> to #%s (%s)', entry.messageId, connection.id, connection.messages + 1);\n    if (this._rateLimit.limit) {\n      this._rateLimit.counter++;\n      if (!this._rateLimit.checkpoint) {\n        this._rateLimit.checkpoint = Date.now();\n      }\n    }\n    connection.send(entry.mail, (err, info) => {\n      // only process callback if current handler is not changed\n      if (entry === connection.queueEntry) {\n        try {\n          entry.callback(err, info);\n        } catch (E) {\n          this.logger.error({\n            err: E,\n            tnx: 'callback',\n            cid: connection.id\n          }, 'Callback error for #%s: %s', connection.id, E.message);\n        }\n        connection.queueEntry = false;\n      }\n    });\n  }\n\n  /**\n   * Creates a new pool resource\n   */\n  _createConnection() {\n    let connection = new PoolResource(this);\n    connection.id = ++this._connectionCounter;\n    this.logger.info({\n      tnx: 'pool',\n      cid: connection.id,\n      action: 'conection'\n    }, 'Created new pool resource #%s', connection.id);\n\n    // resource comes available\n    connection.on('available', () => {\n      this.logger.debug({\n        tnx: 'connection',\n        cid: connection.id,\n        action: 'available'\n      }, 'Connection #%s became available', connection.id);\n      if (this._closed) {\n        // if already closed run close() that will remove this connections from connections list\n        this.close();\n      } else {\n        // check if there's anything else to send\n        this._processMessages();\n      }\n    });\n\n    // resource is terminated with an error\n    connection.once('error', err => {\n      if (err.code !== 'EMAXLIMIT') {\n        this.logger.error({\n          err,\n          tnx: 'pool',\n          cid: connection.id\n        }, 'Pool Error for #%s: %s', connection.id, err.message);\n      } else {\n        this.logger.debug({\n          tnx: 'pool',\n          cid: connection.id,\n          action: 'maxlimit'\n        }, 'Max messages limit exchausted for #%s', connection.id);\n      }\n      if (connection.queueEntry) {\n        try {\n          connection.queueEntry.callback(err);\n        } catch (E) {\n          this.logger.error({\n            err: E,\n            tnx: 'callback',\n            cid: connection.id\n          }, 'Callback error for #%s: %s', connection.id, E.message);\n        }\n        connection.queueEntry = false;\n      }\n\n      // remove the erroneus connection from connections list\n      this._removeConnection(connection);\n      this._continueProcessing();\n    });\n    connection.once('close', () => {\n      this.logger.info({\n        tnx: 'connection',\n        cid: connection.id,\n        action: 'closed'\n      }, 'Connection #%s was closed', connection.id);\n      this._removeConnection(connection);\n      if (connection.queueEntry) {\n        // If the connection closed when sending, add the message to the queue again\n        // if max number of requeues is not reached yet\n        // Note that we must wait a bit.. because the callback of the 'error' handler might be called\n        // in the next event loop\n        setTimeout(() => {\n          if (connection.queueEntry) {\n            if (this._shouldRequeuOnConnectionClose(connection.queueEntry)) {\n              this._requeueEntryOnConnectionClose(connection);\n            } else {\n              this._failDeliveryOnConnectionClose(connection);\n            }\n          }\n          this._continueProcessing();\n        }, 50);\n      } else {\n        this._continueProcessing();\n      }\n    });\n    this._connections.push(connection);\n    return connection;\n  }\n  _shouldRequeuOnConnectionClose(queueEntry) {\n    if (this.options.maxRequeues === undefined || this.options.maxRequeues < 0) {\n      return true;\n    }\n    return queueEntry.requeueAttempts < this.options.maxRequeues;\n  }\n  _failDeliveryOnConnectionClose(connection) {\n    if (connection.queueEntry && connection.queueEntry.callback) {\n      try {\n        connection.queueEntry.callback(new Error('Reached maximum number of retries after connection was closed'));\n      } catch (E) {\n        this.logger.error({\n          err: E,\n          tnx: 'callback',\n          messageId: connection.queueEntry.messageId,\n          cid: connection.id\n        }, 'Callback error for #%s: %s', connection.id, E.message);\n      }\n      connection.queueEntry = false;\n    }\n  }\n  _requeueEntryOnConnectionClose(connection) {\n    connection.queueEntry.requeueAttempts = connection.queueEntry.requeueAttempts + 1;\n    this.logger.debug({\n      tnx: 'pool',\n      cid: connection.id,\n      messageId: connection.queueEntry.messageId,\n      action: 'requeue'\n    }, 'Re-queued message <%s> for #%s. Attempt: #%s', connection.queueEntry.messageId, connection.id, connection.queueEntry.requeueAttempts);\n    this._queue.unshift(connection.queueEntry);\n    connection.queueEntry = false;\n  }\n\n  /**\n   * Continue to process message if the pool hasn't closed\n   */\n  _continueProcessing() {\n    if (this._closed) {\n      this.close();\n    } else {\n      setTimeout(() => this._processMessages(), 100);\n    }\n  }\n\n  /**\n   * Remove resource from pool\n   *\n   * @param {Object} connection The PoolResource to remove\n   */\n  _removeConnection(connection) {\n    let index = this._connections.indexOf(connection);\n    if (index !== -1) {\n      this._connections.splice(index, 1);\n    }\n  }\n\n  /**\n   * Checks if connections have hit current rate limit and if so, queues the availability callback\n   *\n   * @param {Function} callback Callback function to run once rate limiter has been cleared\n   */\n  _checkRateLimit(callback) {\n    if (!this._rateLimit.limit) {\n      return callback();\n    }\n    let now = Date.now();\n    if (this._rateLimit.counter < this._rateLimit.limit) {\n      return callback();\n    }\n    this._rateLimit.waiting.push(callback);\n    if (this._rateLimit.checkpoint <= now - this._rateLimit.delta) {\n      return this._clearRateLimit();\n    } else if (!this._rateLimit.timeout) {\n      this._rateLimit.timeout = setTimeout(() => this._clearRateLimit(), this._rateLimit.delta - (now - this._rateLimit.checkpoint));\n      this._rateLimit.checkpoint = now;\n    }\n  }\n\n  /**\n   * Clears current rate limit limitation and runs paused callback\n   */\n  _clearRateLimit() {\n    clearTimeout(this._rateLimit.timeout);\n    this._rateLimit.timeout = null;\n    this._rateLimit.counter = 0;\n    this._rateLimit.checkpoint = false;\n\n    // resume all paused connections\n    while (this._rateLimit.waiting.length) {\n      let cb = this._rateLimit.waiting.shift();\n      setImmediate(cb);\n    }\n  }\n\n  /**\n   * Returns true if there are free slots in the queue\n   */\n  isIdle() {\n    return this.idling;\n  }\n\n  /**\n   * Verifies SMTP configuration\n   *\n   * @param {Function} callback Callback function\n   */\n  verify(callback) {\n    let promise;\n    if (!callback) {\n      promise = new Promise((resolve, reject) => {\n        callback = shared.callbackPromise(resolve, reject);\n      });\n    }\n    let auth = new PoolResource(this).auth;\n    this.getSocket(this.options, (err, socketOptions) => {\n      if (err) {\n        return callback(err);\n      }\n      let options = this.options;\n      if (socketOptions && socketOptions.connection) {\n        this.logger.info({\n          tnx: 'proxy',\n          remoteAddress: socketOptions.connection.remoteAddress,\n          remotePort: socketOptions.connection.remotePort,\n          destHost: options.host || '',\n          destPort: options.port || '',\n          action: 'connected'\n        }, 'Using proxied socket from %s:%s to %s:%s', socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || '', options.port || '');\n        options = shared.assign(false, options);\n        Object.keys(socketOptions).forEach(key => {\n          options[key] = socketOptions[key];\n        });\n      }\n      let connection = new SMTPConnection(options);\n      let returned = false;\n      connection.once('error', err => {\n        if (returned) {\n          return;\n        }\n        returned = true;\n        connection.close();\n        return callback(err);\n      });\n      connection.once('end', () => {\n        if (returned) {\n          return;\n        }\n        returned = true;\n        return callback(new Error('Connection closed'));\n      });\n      let finalize = () => {\n        if (returned) {\n          return;\n        }\n        returned = true;\n        connection.quit();\n        return callback(null, true);\n      };\n      connection.connect(() => {\n        if (returned) {\n          return;\n        }\n        if (auth && (connection.allowsAuth || options.forceAuth)) {\n          connection.login(auth, err => {\n            if (returned) {\n              return;\n            }\n            if (err) {\n              returned = true;\n              connection.close();\n              return callback(err);\n            }\n            finalize();\n          });\n        } else if (!auth && connection.allowsAuth && options.forceAuth) {\n          let err = new Error('Authentication info was not provided');\n          err.code = 'NoAuth';\n          returned = true;\n          connection.close();\n          return callback(err);\n        } else {\n          finalize();\n        }\n      });\n    });\n    return promise;\n  }\n}\n\n// expose to the world\nmodule.exports = SMTPPool;","map":{"version":3,"names":["EventEmitter","require","PoolResource","SMTPConnection","wellKnown","shared","packageData","SMTPPool","constructor","options","url","urlData","service","getSocket","parseConnectionUrl","assign","maxConnections","maxMessages","logger","getLogger","component","connection","name","version","_rateLimit","counter","timeout","waiting","checkpoint","delta","Number","rateDelta","limit","rateLimit","_closed","_queue","_connections","_connectionCounter","idling","setImmediate","emit","callback","send","mail","push","requeueAttempts","length","_processMessages","close","len","clearTimeout","i","available","info","tnx","cid","id","action","debug","invokeCallbacks","entry","shift","Error","E","error","err","message","_createConnection","queueEntry","messageId","getHeader","replace","messages","Date","now","on","once","code","_removeConnection","_continueProcessing","setTimeout","_shouldRequeuOnConnectionClose","_requeueEntryOnConnectionClose","_failDeliveryOnConnectionClose","maxRequeues","undefined","unshift","index","indexOf","splice","_checkRateLimit","_clearRateLimit","cb","isIdle","verify","promise","Promise","resolve","reject","callbackPromise","auth","socketOptions","remoteAddress","remotePort","destHost","host","destPort","port","Object","keys","forEach","key","returned","finalize","quit","connect","allowsAuth","forceAuth","login","module","exports"],"sources":["C:/Users/deiby/Desktop/cloneWebCursos/paginacursos/node_modules/nodemailer/lib/smtp-pool/index.js"],"sourcesContent":["'use strict';\n\nconst EventEmitter = require('events');\nconst PoolResource = require('./pool-resource');\nconst SMTPConnection = require('../smtp-connection');\nconst wellKnown = require('../well-known');\nconst shared = require('../shared');\nconst packageData = require('../../package.json');\n\n/**\n * Creates a SMTP pool transport object for Nodemailer\n *\n * @constructor\n * @param {Object} options SMTP Connection options\n */\nclass SMTPPool extends EventEmitter {\n    constructor(options) {\n        super();\n\n        options = options || {};\n        if (typeof options === 'string') {\n            options = {\n                url: options\n            };\n        }\n\n        let urlData;\n        let service = options.service;\n\n        if (typeof options.getSocket === 'function') {\n            this.getSocket = options.getSocket;\n        }\n\n        if (options.url) {\n            urlData = shared.parseConnectionUrl(options.url);\n            service = service || urlData.service;\n        }\n\n        this.options = shared.assign(\n            false, // create new object\n            options, // regular options\n            urlData, // url options\n            service && wellKnown(service) // wellknown options\n        );\n\n        this.options.maxConnections = this.options.maxConnections || 5;\n        this.options.maxMessages = this.options.maxMessages || 100;\n\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || 'smtp-pool'\n        });\n\n        // temporary object\n        let connection = new SMTPConnection(this.options);\n\n        this.name = 'SMTP (pool)';\n        this.version = packageData.version + '[client:' + connection.version + ']';\n\n        this._rateLimit = {\n            counter: 0,\n            timeout: null,\n            waiting: [],\n            checkpoint: false,\n            delta: Number(this.options.rateDelta) || 1000,\n            limit: Number(this.options.rateLimit) || 0\n        };\n        this._closed = false;\n        this._queue = [];\n        this._connections = [];\n        this._connectionCounter = 0;\n\n        this.idling = true;\n\n        setImmediate(() => {\n            if (this.idling) {\n                this.emit('idle');\n            }\n        });\n    }\n\n    /**\n     * Placeholder function for creating proxy sockets. This method immediatelly returns\n     * without a socket\n     *\n     * @param {Object} options Connection options\n     * @param {Function} callback Callback function to run with the socket keys\n     */\n    getSocket(options, callback) {\n        // return immediatelly\n        return setImmediate(() => callback(null, false));\n    }\n\n    /**\n     * Queues an e-mail to be sent using the selected settings\n     *\n     * @param {Object} mail Mail object\n     * @param {Function} callback Callback function\n     */\n    send(mail, callback) {\n        if (this._closed) {\n            return false;\n        }\n\n        this._queue.push({\n            mail,\n            requeueAttempts: 0,\n            callback\n        });\n\n        if (this.idling && this._queue.length >= this.options.maxConnections) {\n            this.idling = false;\n        }\n\n        setImmediate(() => this._processMessages());\n\n        return true;\n    }\n\n    /**\n     * Closes all connections in the pool. If there is a message being sent, the connection\n     * is closed later\n     */\n    close() {\n        let connection;\n        let len = this._connections.length;\n        this._closed = true;\n\n        // clear rate limit timer if it exists\n        clearTimeout(this._rateLimit.timeout);\n\n        if (!len && !this._queue.length) {\n            return;\n        }\n\n        // remove all available connections\n        for (let i = len - 1; i >= 0; i--) {\n            if (this._connections[i] && this._connections[i].available) {\n                connection = this._connections[i];\n                connection.close();\n                this.logger.info(\n                    {\n                        tnx: 'connection',\n                        cid: connection.id,\n                        action: 'removed'\n                    },\n                    'Connection #%s removed',\n                    connection.id\n                );\n            }\n        }\n\n        if (len && !this._connections.length) {\n            this.logger.debug(\n                {\n                    tnx: 'connection'\n                },\n                'All connections removed'\n            );\n        }\n\n        if (!this._queue.length) {\n            return;\n        }\n\n        // make sure that entire queue would be cleaned\n        let invokeCallbacks = () => {\n            if (!this._queue.length) {\n                this.logger.debug(\n                    {\n                        tnx: 'connection'\n                    },\n                    'Pending queue entries cleared'\n                );\n                return;\n            }\n            let entry = this._queue.shift();\n            if (entry && typeof entry.callback === 'function') {\n                try {\n                    entry.callback(new Error('Connection pool was closed'));\n                } catch (E) {\n                    this.logger.error(\n                        {\n                            err: E,\n                            tnx: 'callback',\n                            cid: connection.id\n                        },\n                        'Callback error for #%s: %s',\n                        connection.id,\n                        E.message\n                    );\n                }\n            }\n            setImmediate(invokeCallbacks);\n        };\n        setImmediate(invokeCallbacks);\n    }\n\n    /**\n     * Check the queue and available connections. If there is a message to be sent and there is\n     * an available connection, then use this connection to send the mail\n     */\n    _processMessages() {\n        let connection;\n        let i, len;\n\n        // do nothing if already closed\n        if (this._closed) {\n            return;\n        }\n\n        // do nothing if queue is empty\n        if (!this._queue.length) {\n            if (!this.idling) {\n                // no pending jobs\n                this.idling = true;\n                this.emit('idle');\n            }\n            return;\n        }\n\n        // find first available connection\n        for (i = 0, len = this._connections.length; i < len; i++) {\n            if (this._connections[i].available) {\n                connection = this._connections[i];\n                break;\n            }\n        }\n\n        if (!connection && this._connections.length < this.options.maxConnections) {\n            connection = this._createConnection();\n        }\n\n        if (!connection) {\n            // no more free connection slots available\n            this.idling = false;\n            return;\n        }\n\n        // check if there is free space in the processing queue\n        if (!this.idling && this._queue.length < this.options.maxConnections) {\n            this.idling = true;\n            this.emit('idle');\n        }\n\n        let entry = (connection.queueEntry = this._queue.shift());\n        entry.messageId = (connection.queueEntry.mail.message.getHeader('message-id') || '').replace(/[<>\\s]/g, '');\n\n        connection.available = false;\n\n        this.logger.debug(\n            {\n                tnx: 'pool',\n                cid: connection.id,\n                messageId: entry.messageId,\n                action: 'assign'\n            },\n            'Assigned message <%s> to #%s (%s)',\n            entry.messageId,\n            connection.id,\n            connection.messages + 1\n        );\n\n        if (this._rateLimit.limit) {\n            this._rateLimit.counter++;\n            if (!this._rateLimit.checkpoint) {\n                this._rateLimit.checkpoint = Date.now();\n            }\n        }\n\n        connection.send(entry.mail, (err, info) => {\n            // only process callback if current handler is not changed\n            if (entry === connection.queueEntry) {\n                try {\n                    entry.callback(err, info);\n                } catch (E) {\n                    this.logger.error(\n                        {\n                            err: E,\n                            tnx: 'callback',\n                            cid: connection.id\n                        },\n                        'Callback error for #%s: %s',\n                        connection.id,\n                        E.message\n                    );\n                }\n                connection.queueEntry = false;\n            }\n        });\n    }\n\n    /**\n     * Creates a new pool resource\n     */\n    _createConnection() {\n        let connection = new PoolResource(this);\n\n        connection.id = ++this._connectionCounter;\n\n        this.logger.info(\n            {\n                tnx: 'pool',\n                cid: connection.id,\n                action: 'conection'\n            },\n            'Created new pool resource #%s',\n            connection.id\n        );\n\n        // resource comes available\n        connection.on('available', () => {\n            this.logger.debug(\n                {\n                    tnx: 'connection',\n                    cid: connection.id,\n                    action: 'available'\n                },\n                'Connection #%s became available',\n                connection.id\n            );\n\n            if (this._closed) {\n                // if already closed run close() that will remove this connections from connections list\n                this.close();\n            } else {\n                // check if there's anything else to send\n                this._processMessages();\n            }\n        });\n\n        // resource is terminated with an error\n        connection.once('error', err => {\n            if (err.code !== 'EMAXLIMIT') {\n                this.logger.error(\n                    {\n                        err,\n                        tnx: 'pool',\n                        cid: connection.id\n                    },\n                    'Pool Error for #%s: %s',\n                    connection.id,\n                    err.message\n                );\n            } else {\n                this.logger.debug(\n                    {\n                        tnx: 'pool',\n                        cid: connection.id,\n                        action: 'maxlimit'\n                    },\n                    'Max messages limit exchausted for #%s',\n                    connection.id\n                );\n            }\n\n            if (connection.queueEntry) {\n                try {\n                    connection.queueEntry.callback(err);\n                } catch (E) {\n                    this.logger.error(\n                        {\n                            err: E,\n                            tnx: 'callback',\n                            cid: connection.id\n                        },\n                        'Callback error for #%s: %s',\n                        connection.id,\n                        E.message\n                    );\n                }\n                connection.queueEntry = false;\n            }\n\n            // remove the erroneus connection from connections list\n            this._removeConnection(connection);\n\n            this._continueProcessing();\n        });\n\n        connection.once('close', () => {\n            this.logger.info(\n                {\n                    tnx: 'connection',\n                    cid: connection.id,\n                    action: 'closed'\n                },\n                'Connection #%s was closed',\n                connection.id\n            );\n\n            this._removeConnection(connection);\n\n            if (connection.queueEntry) {\n                // If the connection closed when sending, add the message to the queue again\n                // if max number of requeues is not reached yet\n                // Note that we must wait a bit.. because the callback of the 'error' handler might be called\n                // in the next event loop\n                setTimeout(() => {\n                    if (connection.queueEntry) {\n                        if (this._shouldRequeuOnConnectionClose(connection.queueEntry)) {\n                            this._requeueEntryOnConnectionClose(connection);\n                        } else {\n                            this._failDeliveryOnConnectionClose(connection);\n                        }\n                    }\n                    this._continueProcessing();\n                }, 50);\n            } else {\n                this._continueProcessing();\n            }\n        });\n\n        this._connections.push(connection);\n\n        return connection;\n    }\n\n    _shouldRequeuOnConnectionClose(queueEntry) {\n        if (this.options.maxRequeues === undefined || this.options.maxRequeues < 0) {\n            return true;\n        }\n\n        return queueEntry.requeueAttempts < this.options.maxRequeues;\n    }\n\n    _failDeliveryOnConnectionClose(connection) {\n        if (connection.queueEntry && connection.queueEntry.callback) {\n            try {\n                connection.queueEntry.callback(new Error('Reached maximum number of retries after connection was closed'));\n            } catch (E) {\n                this.logger.error(\n                    {\n                        err: E,\n                        tnx: 'callback',\n                        messageId: connection.queueEntry.messageId,\n                        cid: connection.id\n                    },\n                    'Callback error for #%s: %s',\n                    connection.id,\n                    E.message\n                );\n            }\n            connection.queueEntry = false;\n        }\n    }\n\n    _requeueEntryOnConnectionClose(connection) {\n        connection.queueEntry.requeueAttempts = connection.queueEntry.requeueAttempts + 1;\n        this.logger.debug(\n            {\n                tnx: 'pool',\n                cid: connection.id,\n                messageId: connection.queueEntry.messageId,\n                action: 'requeue'\n            },\n            'Re-queued message <%s> for #%s. Attempt: #%s',\n            connection.queueEntry.messageId,\n            connection.id,\n            connection.queueEntry.requeueAttempts\n        );\n        this._queue.unshift(connection.queueEntry);\n        connection.queueEntry = false;\n    }\n\n    /**\n     * Continue to process message if the pool hasn't closed\n     */\n    _continueProcessing() {\n        if (this._closed) {\n            this.close();\n        } else {\n            setTimeout(() => this._processMessages(), 100);\n        }\n    }\n\n    /**\n     * Remove resource from pool\n     *\n     * @param {Object} connection The PoolResource to remove\n     */\n    _removeConnection(connection) {\n        let index = this._connections.indexOf(connection);\n\n        if (index !== -1) {\n            this._connections.splice(index, 1);\n        }\n    }\n\n    /**\n     * Checks if connections have hit current rate limit and if so, queues the availability callback\n     *\n     * @param {Function} callback Callback function to run once rate limiter has been cleared\n     */\n    _checkRateLimit(callback) {\n        if (!this._rateLimit.limit) {\n            return callback();\n        }\n\n        let now = Date.now();\n\n        if (this._rateLimit.counter < this._rateLimit.limit) {\n            return callback();\n        }\n\n        this._rateLimit.waiting.push(callback);\n\n        if (this._rateLimit.checkpoint <= now - this._rateLimit.delta) {\n            return this._clearRateLimit();\n        } else if (!this._rateLimit.timeout) {\n            this._rateLimit.timeout = setTimeout(() => this._clearRateLimit(), this._rateLimit.delta - (now - this._rateLimit.checkpoint));\n            this._rateLimit.checkpoint = now;\n        }\n    }\n\n    /**\n     * Clears current rate limit limitation and runs paused callback\n     */\n    _clearRateLimit() {\n        clearTimeout(this._rateLimit.timeout);\n        this._rateLimit.timeout = null;\n        this._rateLimit.counter = 0;\n        this._rateLimit.checkpoint = false;\n\n        // resume all paused connections\n        while (this._rateLimit.waiting.length) {\n            let cb = this._rateLimit.waiting.shift();\n            setImmediate(cb);\n        }\n    }\n\n    /**\n     * Returns true if there are free slots in the queue\n     */\n    isIdle() {\n        return this.idling;\n    }\n\n    /**\n     * Verifies SMTP configuration\n     *\n     * @param {Function} callback Callback function\n     */\n    verify(callback) {\n        let promise;\n\n        if (!callback) {\n            promise = new Promise((resolve, reject) => {\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n\n        let auth = new PoolResource(this).auth;\n\n        this.getSocket(this.options, (err, socketOptions) => {\n            if (err) {\n                return callback(err);\n            }\n\n            let options = this.options;\n            if (socketOptions && socketOptions.connection) {\n                this.logger.info(\n                    {\n                        tnx: 'proxy',\n                        remoteAddress: socketOptions.connection.remoteAddress,\n                        remotePort: socketOptions.connection.remotePort,\n                        destHost: options.host || '',\n                        destPort: options.port || '',\n                        action: 'connected'\n                    },\n                    'Using proxied socket from %s:%s to %s:%s',\n                    socketOptions.connection.remoteAddress,\n                    socketOptions.connection.remotePort,\n                    options.host || '',\n                    options.port || ''\n                );\n                options = shared.assign(false, options);\n                Object.keys(socketOptions).forEach(key => {\n                    options[key] = socketOptions[key];\n                });\n            }\n\n            let connection = new SMTPConnection(options);\n            let returned = false;\n\n            connection.once('error', err => {\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                connection.close();\n                return callback(err);\n            });\n\n            connection.once('end', () => {\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                return callback(new Error('Connection closed'));\n            });\n\n            let finalize = () => {\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                connection.quit();\n                return callback(null, true);\n            };\n\n            connection.connect(() => {\n                if (returned) {\n                    return;\n                }\n\n                if (auth && (connection.allowsAuth || options.forceAuth)) {\n                    connection.login(auth, err => {\n                        if (returned) {\n                            return;\n                        }\n\n                        if (err) {\n                            returned = true;\n                            connection.close();\n                            return callback(err);\n                        }\n\n                        finalize();\n                    });\n                } else if (!auth && connection.allowsAuth && options.forceAuth) {\n                    let err = new Error('Authentication info was not provided');\n                    err.code = 'NoAuth';\n\n                    returned = true;\n                    connection.close();\n                    return callback(err);\n                } else {\n                    finalize();\n                }\n            });\n        });\n\n        return promise;\n    }\n}\n\n// expose to the world\nmodule.exports = SMTPPool;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}