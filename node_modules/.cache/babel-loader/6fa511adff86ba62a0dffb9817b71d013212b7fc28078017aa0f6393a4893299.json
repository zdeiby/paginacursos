{"ast":null,"code":"import _objectSpread from \"C:/Users/deiby/Desktop/cloneWebCursos/paginacursos/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/Users/deiby/Desktop/cloneWebCursos/paginacursos/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"id\", \"bsPrefix\", \"size\", \"variant\", \"title\", \"type\", \"toggleLabel\", \"children\", \"onClick\", \"href\", \"target\", \"menuRole\", \"renderMenuOnMount\", \"rootCloseEvent\", \"flip\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport ButtonGroup from './ButtonGroup';\nimport Dropdown from './Dropdown';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar propTypes = {\n  /**\r\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\r\n   * @type {string}\r\n   * @required\r\n   */\n  id: PropTypes.string,\n  /**\r\n   * Accessible label for the toggle; the value of `title` if not specified.\r\n   */\n  toggleLabel: PropTypes.string,\n  /** An `href` passed to the non-toggle Button */\n  href: PropTypes.string,\n  /** An anchor `target` passed to the non-toggle Button */\n  target: PropTypes.string,\n  /** An `onClick` handler passed to the non-toggle Button */\n  onClick: PropTypes.func,\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n  /** A `type` passed to the non-toggle Button */\n  type: PropTypes.string,\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n  /**\r\n   * Aligns the dropdown menu.\r\n   *\r\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\r\n   *\r\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\r\n   */\n  align: alignPropType,\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n  /**\r\n   *  Which event when fired outside the component will cause it to be closed.\r\n   *\r\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\r\n   */\n  rootCloseEvent: PropTypes.string,\n  /**\r\n   * Allow Dropdown to flip in case of an overlapping on the reference element. For more information refer to\r\n   * Popper.js's flip [docs](https://popper.js.org/docs/v2/modifiers/flip/).\r\n   *\r\n   */\n  flip: PropTypes.bool,\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n  /** @ignore */\n  variant: PropTypes.string,\n  /** @ignore */\n  size: PropTypes.string\n};\nvar defaultProps = {\n  toggleLabel: 'Toggle dropdown',\n  type: 'button'\n};\n\n/**\r\n * A convenience component for simple or general use split button dropdowns. Renders a\r\n * `ButtonGroup` containing a `Button` and a `Button` toggle for the `Dropdown`. All `children`\r\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of [`Dropdown`'s\r\n * props](#dropdown-props).\r\n *\r\n * _All unknown props are passed through to the `Dropdown` component._\r\n * The Button `variant`, `size` and `bsPrefix` props are passed to the button and toggle,\r\n * and menu-related props are passed to the `Dropdown.Menu`\r\n */\nvar SplitButton = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var id = _ref.id,\n    bsPrefix = _ref.bsPrefix,\n    size = _ref.size,\n    variant = _ref.variant,\n    title = _ref.title,\n    type = _ref.type,\n    toggleLabel = _ref.toggleLabel,\n    children = _ref.children,\n    onClick = _ref.onClick,\n    href = _ref.href,\n    target = _ref.target,\n    menuRole = _ref.menuRole,\n    renderMenuOnMount = _ref.renderMenuOnMount,\n    rootCloseEvent = _ref.rootCloseEvent,\n    flip = _ref.flip,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/_jsxs(Dropdown, _objectSpread(_objectSpread({\n    ref: ref\n  }, props), {}, {\n    as: ButtonGroup,\n    children: [/*#__PURE__*/_jsx(Button, {\n      size: size,\n      variant: variant,\n      disabled: props.disabled,\n      bsPrefix: bsPrefix,\n      href: href,\n      target: target,\n      onClick: onClick,\n      type: type,\n      children: title\n    }), /*#__PURE__*/_jsx(Dropdown.Toggle, {\n      split: true,\n      id: id,\n      size: size,\n      variant: variant,\n      disabled: props.disabled,\n      childBsPrefix: bsPrefix,\n      children: /*#__PURE__*/_jsx(\"span\", {\n        className: \"visually-hidden\",\n        children: toggleLabel\n      })\n    }), /*#__PURE__*/_jsx(Dropdown.Menu, {\n      role: menuRole,\n      renderOnMount: renderMenuOnMount,\n      rootCloseEvent: rootCloseEvent,\n      flip: flip,\n      children: children\n    })]\n  }));\n});\nSplitButton.propTypes = propTypes;\nSplitButton.defaultProps = defaultProps;\nSplitButton.displayName = 'SplitButton';\nexport default SplitButton;","map":{"version":3,"names":["React","PropTypes","Button","ButtonGroup","Dropdown","alignPropType","jsx","_jsx","jsxs","_jsxs","propTypes","id","string","toggleLabel","href","target","onClick","func","title","node","isRequired","type","disabled","bool","align","menuRole","renderMenuOnMount","rootCloseEvent","flip","bsPrefix","variant","size","defaultProps","SplitButton","forwardRef","ref","children","props","as","Toggle","split","childBsPrefix","className","Menu","role","renderOnMount","displayName"],"sources":["C:/Users/deiby/Desktop/cloneWebCursos/paginacursos/node_modules/react-bootstrap/esm/SplitButton.js"],"sourcesContent":["import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from './Button';\r\nimport ButtonGroup from './ButtonGroup';\r\nimport Dropdown from './Dropdown';\r\nimport { alignPropType } from './types';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\r\nconst propTypes = {\r\n  /**\r\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\r\n   * @type {string}\r\n   * @required\r\n   */\r\n  id: PropTypes.string,\r\n  /**\r\n   * Accessible label for the toggle; the value of `title` if not specified.\r\n   */\r\n  toggleLabel: PropTypes.string,\r\n  /** An `href` passed to the non-toggle Button */\r\n  href: PropTypes.string,\r\n  /** An anchor `target` passed to the non-toggle Button */\r\n  target: PropTypes.string,\r\n  /** An `onClick` handler passed to the non-toggle Button */\r\n  onClick: PropTypes.func,\r\n  /** The content of the non-toggle Button.  */\r\n  title: PropTypes.node.isRequired,\r\n  /** A `type` passed to the non-toggle Button */\r\n  type: PropTypes.string,\r\n  /** Disables both Buttons  */\r\n  disabled: PropTypes.bool,\r\n  /**\r\n   * Aligns the dropdown menu.\r\n   *\r\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\r\n   *\r\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\r\n   */\r\n  align: alignPropType,\r\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\r\n  menuRole: PropTypes.string,\r\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\r\n  renderMenuOnMount: PropTypes.bool,\r\n  /**\r\n   *  Which event when fired outside the component will cause it to be closed.\r\n   *\r\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\r\n   */\r\n  rootCloseEvent: PropTypes.string,\r\n  /**\r\n   * Allow Dropdown to flip in case of an overlapping on the reference element. For more information refer to\r\n   * Popper.js's flip [docs](https://popper.js.org/docs/v2/modifiers/flip/).\r\n   *\r\n   */\r\n  flip: PropTypes.bool,\r\n  /** @ignore */\r\n  bsPrefix: PropTypes.string,\r\n  /** @ignore */\r\n  variant: PropTypes.string,\r\n  /** @ignore */\r\n  size: PropTypes.string\r\n};\r\nconst defaultProps = {\r\n  toggleLabel: 'Toggle dropdown',\r\n  type: 'button'\r\n};\r\n\r\n/**\r\n * A convenience component for simple or general use split button dropdowns. Renders a\r\n * `ButtonGroup` containing a `Button` and a `Button` toggle for the `Dropdown`. All `children`\r\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of [`Dropdown`'s\r\n * props](#dropdown-props).\r\n *\r\n * _All unknown props are passed through to the `Dropdown` component._\r\n * The Button `variant`, `size` and `bsPrefix` props are passed to the button and toggle,\r\n * and menu-related props are passed to the `Dropdown.Menu`\r\n */\r\nconst SplitButton = /*#__PURE__*/React.forwardRef(({\r\n  id,\r\n  bsPrefix,\r\n  size,\r\n  variant,\r\n  title,\r\n  type,\r\n  toggleLabel,\r\n  children,\r\n  onClick,\r\n  href,\r\n  target,\r\n  menuRole,\r\n  renderMenuOnMount,\r\n  rootCloseEvent,\r\n  flip,\r\n  ...props\r\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\r\n  ref: ref,\r\n  ...props,\r\n  as: ButtonGroup,\r\n  children: [/*#__PURE__*/_jsx(Button, {\r\n    size: size,\r\n    variant: variant,\r\n    disabled: props.disabled,\r\n    bsPrefix: bsPrefix,\r\n    href: href,\r\n    target: target,\r\n    onClick: onClick,\r\n    type: type,\r\n    children: title\r\n  }), /*#__PURE__*/_jsx(Dropdown.Toggle, {\r\n    split: true,\r\n    id: id,\r\n    size: size,\r\n    variant: variant,\r\n    disabled: props.disabled,\r\n    childBsPrefix: bsPrefix,\r\n    children: /*#__PURE__*/_jsx(\"span\", {\r\n      className: \"visually-hidden\",\r\n      children: toggleLabel\r\n    })\r\n  }), /*#__PURE__*/_jsx(Dropdown.Menu, {\r\n    role: menuRole,\r\n    renderOnMount: renderMenuOnMount,\r\n    rootCloseEvent: rootCloseEvent,\r\n    flip: flip,\r\n    children: children\r\n  })]\r\n}));\r\nSplitButton.propTypes = propTypes;\r\nSplitButton.defaultProps = defaultProps;\r\nSplitButton.displayName = 'SplitButton';\r\nexport default SplitButton;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}