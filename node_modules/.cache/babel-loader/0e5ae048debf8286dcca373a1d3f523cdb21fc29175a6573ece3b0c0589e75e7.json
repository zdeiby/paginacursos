{"ast":null,"code":"'use strict';\n\nconst SMTPConnection = require('../smtp-connection');\nconst assign = require('../shared').assign;\nconst XOAuth2 = require('../xoauth2');\nconst EventEmitter = require('events');\n\n/**\n * Creates an element for the pool\n *\n * @constructor\n * @param {Object} options SMTPPool instance\n */\nclass PoolResource extends EventEmitter {\n  constructor(pool) {\n    super();\n    this.pool = pool;\n    this.options = pool.options;\n    this.logger = this.pool.logger;\n    if (this.options.auth) {\n      switch ((this.options.auth.type || '').toString().toUpperCase()) {\n        case 'OAUTH2':\n          {\n            let oauth2 = new XOAuth2(this.options.auth, this.logger);\n            oauth2.provisionCallback = this.pool.mailer && this.pool.mailer.get('oauth2_provision_cb') || oauth2.provisionCallback;\n            this.auth = {\n              type: 'OAUTH2',\n              user: this.options.auth.user,\n              oauth2,\n              method: 'XOAUTH2'\n            };\n            oauth2.on('token', token => this.pool.mailer.emit('token', token));\n            oauth2.on('error', err => this.emit('error', err));\n            break;\n          }\n        default:\n          if (!this.options.auth.user && !this.options.auth.pass) {\n            break;\n          }\n          this.auth = {\n            type: (this.options.auth.type || '').toString().toUpperCase() || 'LOGIN',\n            user: this.options.auth.user,\n            credentials: {\n              user: this.options.auth.user || '',\n              pass: this.options.auth.pass,\n              options: this.options.auth.options\n            },\n            method: (this.options.auth.method || '').trim().toUpperCase() || this.options.authMethod || false\n          };\n      }\n    }\n    this._connection = false;\n    this._connected = false;\n    this.messages = 0;\n    this.available = true;\n  }\n\n  /**\n   * Initiates a connection to the SMTP server\n   *\n   * @param {Function} callback Callback function to run once the connection is established or failed\n   */\n  connect(callback) {\n    this.pool.getSocket(this.options, (err, socketOptions) => {\n      if (err) {\n        return callback(err);\n      }\n      let returned = false;\n      let options = this.options;\n      if (socketOptions && socketOptions.connection) {\n        this.logger.info({\n          tnx: 'proxy',\n          remoteAddress: socketOptions.connection.remoteAddress,\n          remotePort: socketOptions.connection.remotePort,\n          destHost: options.host || '',\n          destPort: options.port || '',\n          action: 'connected'\n        }, 'Using proxied socket from %s:%s to %s:%s', socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || '', options.port || '');\n        options = assign(false, options);\n        Object.keys(socketOptions).forEach(key => {\n          options[key] = socketOptions[key];\n        });\n      }\n      this.connection = new SMTPConnection(options);\n      this.connection.once('error', err => {\n        this.emit('error', err);\n        if (returned) {\n          return;\n        }\n        returned = true;\n        return callback(err);\n      });\n      this.connection.once('end', () => {\n        this.close();\n        if (returned) {\n          return;\n        }\n        returned = true;\n        let timer = setTimeout(() => {\n          if (returned) {\n            return;\n          }\n          // still have not returned, this means we have an unexpected connection close\n          let err = new Error('Unexpected socket close');\n          if (this.connection && this.connection._socket && this.connection._socket.upgrading) {\n            // starttls connection errors\n            err.code = 'ETLS';\n          }\n          callback(err);\n        }, 1000);\n        try {\n          timer.unref();\n        } catch (E) {\n          // Ignore. Happens on envs with non-node timer implementation\n        }\n      });\n      this.connection.connect(() => {\n        if (returned) {\n          return;\n        }\n        if (this.auth && (this.connection.allowsAuth || options.forceAuth)) {\n          this.connection.login(this.auth, err => {\n            if (returned) {\n              return;\n            }\n            returned = true;\n            if (err) {\n              this.connection.close();\n              this.emit('error', err);\n              return callback(err);\n            }\n            this._connected = true;\n            callback(null, true);\n          });\n        } else {\n          returned = true;\n          this._connected = true;\n          return callback(null, true);\n        }\n      });\n    });\n  }\n\n  /**\n   * Sends an e-mail to be sent using the selected settings\n   *\n   * @param {Object} mail Mail object\n   * @param {Function} callback Callback function\n   */\n  send(mail, callback) {\n    if (!this._connected) {\n      return this.connect(err => {\n        if (err) {\n          return callback(err);\n        }\n        return this.send(mail, callback);\n      });\n    }\n    let envelope = mail.message.getEnvelope();\n    let messageId = mail.message.messageId();\n    let recipients = [].concat(envelope.to || []);\n    if (recipients.length > 3) {\n      recipients.push('...and ' + recipients.splice(2).length + ' more');\n    }\n    this.logger.info({\n      tnx: 'send',\n      messageId,\n      cid: this.id\n    }, 'Sending message %s using #%s to <%s>', messageId, this.id, recipients.join(', '));\n    if (mail.data.dsn) {\n      envelope.dsn = mail.data.dsn;\n    }\n    this.connection.send(envelope, mail.message.createReadStream(), (err, info) => {\n      this.messages++;\n      if (err) {\n        this.connection.close();\n        this.emit('error', err);\n        return callback(err);\n      }\n      info.envelope = {\n        from: envelope.from,\n        to: envelope.to\n      };\n      info.messageId = messageId;\n      setImmediate(() => {\n        let err;\n        if (this.messages >= this.options.maxMessages) {\n          err = new Error('Resource exhausted');\n          err.code = 'EMAXLIMIT';\n          this.connection.close();\n          this.emit('error', err);\n        } else {\n          this.pool._checkRateLimit(() => {\n            this.available = true;\n            this.emit('available');\n          });\n        }\n      });\n      callback(null, info);\n    });\n  }\n\n  /**\n   * Closes the connection\n   */\n  close() {\n    this._connected = false;\n    if (this.auth && this.auth.oauth2) {\n      this.auth.oauth2.removeAllListeners();\n    }\n    if (this.connection) {\n      this.connection.close();\n    }\n    this.emit('close');\n  }\n}\nmodule.exports = PoolResource;","map":{"version":3,"names":["SMTPConnection","require","assign","XOAuth2","EventEmitter","PoolResource","constructor","pool","options","logger","auth","type","toString","toUpperCase","oauth2","provisionCallback","mailer","get","user","method","on","token","emit","err","pass","credentials","trim","authMethod","_connection","_connected","messages","available","connect","callback","getSocket","socketOptions","returned","connection","info","tnx","remoteAddress","remotePort","destHost","host","destPort","port","action","Object","keys","forEach","key","once","close","timer","setTimeout","Error","_socket","upgrading","code","unref","E","allowsAuth","forceAuth","login","send","mail","envelope","message","getEnvelope","messageId","recipients","concat","to","length","push","splice","cid","id","join","data","dsn","createReadStream","from","setImmediate","maxMessages","_checkRateLimit","removeAllListeners","module","exports"],"sources":["C:/Users/deiby/Desktop/cloneWebCursos/paginacursos/node_modules/nodemailer/lib/smtp-pool/pool-resource.js"],"sourcesContent":["'use strict';\n\nconst SMTPConnection = require('../smtp-connection');\nconst assign = require('../shared').assign;\nconst XOAuth2 = require('../xoauth2');\nconst EventEmitter = require('events');\n\n/**\n * Creates an element for the pool\n *\n * @constructor\n * @param {Object} options SMTPPool instance\n */\nclass PoolResource extends EventEmitter {\n    constructor(pool) {\n        super();\n\n        this.pool = pool;\n        this.options = pool.options;\n        this.logger = this.pool.logger;\n\n        if (this.options.auth) {\n            switch ((this.options.auth.type || '').toString().toUpperCase()) {\n                case 'OAUTH2': {\n                    let oauth2 = new XOAuth2(this.options.auth, this.logger);\n                    oauth2.provisionCallback = (this.pool.mailer && this.pool.mailer.get('oauth2_provision_cb')) || oauth2.provisionCallback;\n                    this.auth = {\n                        type: 'OAUTH2',\n                        user: this.options.auth.user,\n                        oauth2,\n                        method: 'XOAUTH2'\n                    };\n                    oauth2.on('token', token => this.pool.mailer.emit('token', token));\n                    oauth2.on('error', err => this.emit('error', err));\n                    break;\n                }\n                default:\n                    if (!this.options.auth.user && !this.options.auth.pass) {\n                        break;\n                    }\n                    this.auth = {\n                        type: (this.options.auth.type || '').toString().toUpperCase() || 'LOGIN',\n                        user: this.options.auth.user,\n                        credentials: {\n                            user: this.options.auth.user || '',\n                            pass: this.options.auth.pass,\n                            options: this.options.auth.options\n                        },\n                        method: (this.options.auth.method || '').trim().toUpperCase() || this.options.authMethod || false\n                    };\n            }\n        }\n\n        this._connection = false;\n        this._connected = false;\n\n        this.messages = 0;\n        this.available = true;\n    }\n\n    /**\n     * Initiates a connection to the SMTP server\n     *\n     * @param {Function} callback Callback function to run once the connection is established or failed\n     */\n    connect(callback) {\n        this.pool.getSocket(this.options, (err, socketOptions) => {\n            if (err) {\n                return callback(err);\n            }\n\n            let returned = false;\n            let options = this.options;\n            if (socketOptions && socketOptions.connection) {\n                this.logger.info(\n                    {\n                        tnx: 'proxy',\n                        remoteAddress: socketOptions.connection.remoteAddress,\n                        remotePort: socketOptions.connection.remotePort,\n                        destHost: options.host || '',\n                        destPort: options.port || '',\n                        action: 'connected'\n                    },\n                    'Using proxied socket from %s:%s to %s:%s',\n                    socketOptions.connection.remoteAddress,\n                    socketOptions.connection.remotePort,\n                    options.host || '',\n                    options.port || ''\n                );\n\n                options = assign(false, options);\n                Object.keys(socketOptions).forEach(key => {\n                    options[key] = socketOptions[key];\n                });\n            }\n\n            this.connection = new SMTPConnection(options);\n\n            this.connection.once('error', err => {\n                this.emit('error', err);\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                return callback(err);\n            });\n\n            this.connection.once('end', () => {\n                this.close();\n                if (returned) {\n                    return;\n                }\n                returned = true;\n\n                let timer = setTimeout(() => {\n                    if (returned) {\n                        return;\n                    }\n                    // still have not returned, this means we have an unexpected connection close\n                    let err = new Error('Unexpected socket close');\n                    if (this.connection && this.connection._socket && this.connection._socket.upgrading) {\n                        // starttls connection errors\n                        err.code = 'ETLS';\n                    }\n                    callback(err);\n                }, 1000);\n\n                try {\n                    timer.unref();\n                } catch (E) {\n                    // Ignore. Happens on envs with non-node timer implementation\n                }\n            });\n\n            this.connection.connect(() => {\n                if (returned) {\n                    return;\n                }\n\n                if (this.auth && (this.connection.allowsAuth || options.forceAuth)) {\n                    this.connection.login(this.auth, err => {\n                        if (returned) {\n                            return;\n                        }\n                        returned = true;\n\n                        if (err) {\n                            this.connection.close();\n                            this.emit('error', err);\n                            return callback(err);\n                        }\n\n                        this._connected = true;\n                        callback(null, true);\n                    });\n                } else {\n                    returned = true;\n                    this._connected = true;\n                    return callback(null, true);\n                }\n            });\n        });\n    }\n\n    /**\n     * Sends an e-mail to be sent using the selected settings\n     *\n     * @param {Object} mail Mail object\n     * @param {Function} callback Callback function\n     */\n    send(mail, callback) {\n        if (!this._connected) {\n            return this.connect(err => {\n                if (err) {\n                    return callback(err);\n                }\n                return this.send(mail, callback);\n            });\n        }\n\n        let envelope = mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push('...and ' + recipients.splice(2).length + ' more');\n        }\n        this.logger.info(\n            {\n                tnx: 'send',\n                messageId,\n                cid: this.id\n            },\n            'Sending message %s using #%s to <%s>',\n            messageId,\n            this.id,\n            recipients.join(', ')\n        );\n\n        if (mail.data.dsn) {\n            envelope.dsn = mail.data.dsn;\n        }\n\n        this.connection.send(envelope, mail.message.createReadStream(), (err, info) => {\n            this.messages++;\n\n            if (err) {\n                this.connection.close();\n                this.emit('error', err);\n                return callback(err);\n            }\n\n            info.envelope = {\n                from: envelope.from,\n                to: envelope.to\n            };\n            info.messageId = messageId;\n\n            setImmediate(() => {\n                let err;\n                if (this.messages >= this.options.maxMessages) {\n                    err = new Error('Resource exhausted');\n                    err.code = 'EMAXLIMIT';\n                    this.connection.close();\n                    this.emit('error', err);\n                } else {\n                    this.pool._checkRateLimit(() => {\n                        this.available = true;\n                        this.emit('available');\n                    });\n                }\n            });\n\n            callback(null, info);\n        });\n    }\n\n    /**\n     * Closes the connection\n     */\n    close() {\n        this._connected = false;\n        if (this.auth && this.auth.oauth2) {\n            this.auth.oauth2.removeAllListeners();\n        }\n        if (this.connection) {\n            this.connection.close();\n        }\n        this.emit('close');\n    }\n}\n\nmodule.exports = PoolResource;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}