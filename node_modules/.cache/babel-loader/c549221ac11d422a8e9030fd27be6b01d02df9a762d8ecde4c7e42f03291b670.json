{"ast":null,"code":"'use strict';\n\nconst packageData = require('../../package.json');\nconst shared = require('../shared');\n\n/**\n * Generates a Transport object for streaming\n *\n * Possible options can be the following:\n *\n *  * **buffer** if true, then returns the message as a Buffer object instead of a stream\n *  * **newline** either 'windows' or 'unix'\n *\n * @constructor\n * @param {Object} optional config parameter\n */\nclass StreamTransport {\n  constructor(options) {\n    options = options || {};\n    this.options = options || {};\n    this.name = 'StreamTransport';\n    this.version = packageData.version;\n    this.logger = shared.getLogger(this.options, {\n      component: this.options.component || 'stream-transport'\n    });\n    this.winbreak = ['win', 'windows', 'dos', '\\r\\n'].includes((options.newline || '').toString().toLowerCase());\n  }\n\n  /**\n   * Compiles a mailcomposer message and forwards it to handler that sends it\n   *\n   * @param {Object} emailMessage MailComposer object\n   * @param {Function} callback Callback function to run when the sending is completed\n   */\n  send(mail, done) {\n    // We probably need this in the output\n    mail.message.keepBcc = true;\n    let envelope = mail.data.envelope || mail.message.getEnvelope();\n    let messageId = mail.message.messageId();\n    let recipients = [].concat(envelope.to || []);\n    if (recipients.length > 3) {\n      recipients.push('...and ' + recipients.splice(2).length + ' more');\n    }\n    this.logger.info({\n      tnx: 'send',\n      messageId\n    }, 'Sending message %s to <%s> using %s line breaks', messageId, recipients.join(', '), this.winbreak ? '<CR><LF>' : '<LF>');\n    setImmediate(() => {\n      let stream;\n      try {\n        stream = mail.message.createReadStream();\n      } catch (E) {\n        this.logger.error({\n          err: E,\n          tnx: 'send',\n          messageId\n        }, 'Creating send stream failed for %s. %s', messageId, E.message);\n        return done(E);\n      }\n      if (!this.options.buffer) {\n        stream.once('error', err => {\n          this.logger.error({\n            err,\n            tnx: 'send',\n            messageId\n          }, 'Failed creating message for %s. %s', messageId, err.message);\n        });\n        return done(null, {\n          envelope: mail.data.envelope || mail.message.getEnvelope(),\n          messageId,\n          message: stream\n        });\n      }\n      let chunks = [];\n      let chunklen = 0;\n      stream.on('readable', () => {\n        let chunk;\n        while ((chunk = stream.read()) !== null) {\n          chunks.push(chunk);\n          chunklen += chunk.length;\n        }\n      });\n      stream.once('error', err => {\n        this.logger.error({\n          err,\n          tnx: 'send',\n          messageId\n        }, 'Failed creating message for %s. %s', messageId, err.message);\n        return done(err);\n      });\n      stream.on('end', () => done(null, {\n        envelope: mail.data.envelope || mail.message.getEnvelope(),\n        messageId,\n        message: Buffer.concat(chunks, chunklen)\n      }));\n    });\n  }\n}\nmodule.exports = StreamTransport;","map":{"version":3,"names":["packageData","require","shared","StreamTransport","constructor","options","name","version","logger","getLogger","component","winbreak","includes","newline","toString","toLowerCase","send","mail","done","message","keepBcc","envelope","data","getEnvelope","messageId","recipients","concat","to","length","push","splice","info","tnx","join","setImmediate","stream","createReadStream","E","error","err","buffer","once","chunks","chunklen","on","chunk","read","Buffer","module","exports"],"sources":["C:/Users/deiby/Desktop/cloneWebCursos/paginacursos/node_modules/nodemailer/lib/stream-transport/index.js"],"sourcesContent":["'use strict';\n\nconst packageData = require('../../package.json');\nconst shared = require('../shared');\n\n/**\n * Generates a Transport object for streaming\n *\n * Possible options can be the following:\n *\n *  * **buffer** if true, then returns the message as a Buffer object instead of a stream\n *  * **newline** either 'windows' or 'unix'\n *\n * @constructor\n * @param {Object} optional config parameter\n */\nclass StreamTransport {\n    constructor(options) {\n        options = options || {};\n\n        this.options = options || {};\n\n        this.name = 'StreamTransport';\n        this.version = packageData.version;\n\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || 'stream-transport'\n        });\n\n        this.winbreak = ['win', 'windows', 'dos', '\\r\\n'].includes((options.newline || '').toString().toLowerCase());\n    }\n\n    /**\n     * Compiles a mailcomposer message and forwards it to handler that sends it\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */\n    send(mail, done) {\n        // We probably need this in the output\n        mail.message.keepBcc = true;\n\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push('...and ' + recipients.splice(2).length + ' more');\n        }\n        this.logger.info(\n            {\n                tnx: 'send',\n                messageId\n            },\n            'Sending message %s to <%s> using %s line breaks',\n            messageId,\n            recipients.join(', '),\n            this.winbreak ? '<CR><LF>' : '<LF>'\n        );\n\n        setImmediate(() => {\n            let stream;\n\n            try {\n                stream = mail.message.createReadStream();\n            } catch (E) {\n                this.logger.error(\n                    {\n                        err: E,\n                        tnx: 'send',\n                        messageId\n                    },\n                    'Creating send stream failed for %s. %s',\n                    messageId,\n                    E.message\n                );\n                return done(E);\n            }\n\n            if (!this.options.buffer) {\n                stream.once('error', err => {\n                    this.logger.error(\n                        {\n                            err,\n                            tnx: 'send',\n                            messageId\n                        },\n                        'Failed creating message for %s. %s',\n                        messageId,\n                        err.message\n                    );\n                });\n                return done(null, {\n                    envelope: mail.data.envelope || mail.message.getEnvelope(),\n                    messageId,\n                    message: stream\n                });\n            }\n\n            let chunks = [];\n            let chunklen = 0;\n            stream.on('readable', () => {\n                let chunk;\n                while ((chunk = stream.read()) !== null) {\n                    chunks.push(chunk);\n                    chunklen += chunk.length;\n                }\n            });\n\n            stream.once('error', err => {\n                this.logger.error(\n                    {\n                        err,\n                        tnx: 'send',\n                        messageId\n                    },\n                    'Failed creating message for %s. %s',\n                    messageId,\n                    err.message\n                );\n                return done(err);\n            });\n\n            stream.on('end', () =>\n                done(null, {\n                    envelope: mail.data.envelope || mail.message.getEnvelope(),\n                    messageId,\n                    message: Buffer.concat(chunks, chunklen)\n                })\n            );\n        });\n    }\n}\n\nmodule.exports = StreamTransport;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}