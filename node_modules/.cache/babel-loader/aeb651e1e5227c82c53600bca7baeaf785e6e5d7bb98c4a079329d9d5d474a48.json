{"ast":null,"code":"'use strict';\n\n// FIXME:\n// replace this Transform mess with a method that pipes input argument to output argument\nconst MessageParser = require('./message-parser');\nconst RelaxedBody = require('./relaxed-body');\nconst sign = require('./sign');\nconst PassThrough = require('stream').PassThrough;\nconst fs = require('fs');\nconst path = require('path');\nconst crypto = require('crypto');\nconst DKIM_ALGO = 'sha256';\nconst MAX_MESSAGE_SIZE = 128 * 1024; // buffer messages larger than this to disk\n\n/*\n// Usage:\n\nlet dkim = new DKIM({\n    domainName: 'example.com',\n    keySelector: 'key-selector',\n    privateKey,\n    cacheDir: '/tmp'\n});\ndkim.sign(input).pipe(process.stdout);\n\n// Where inputStream is a rfc822 message (either a stream, string or Buffer)\n// and outputStream is a DKIM signed rfc822 message\n*/\n\nclass DKIMSigner {\n  constructor(options, keys, input, output) {\n    this.options = options || {};\n    this.keys = keys;\n    this.cacheTreshold = Number(this.options.cacheTreshold) || MAX_MESSAGE_SIZE;\n    this.hashAlgo = this.options.hashAlgo || DKIM_ALGO;\n    this.cacheDir = this.options.cacheDir || false;\n    this.chunks = [];\n    this.chunklen = 0;\n    this.readPos = 0;\n    this.cachePath = this.cacheDir ? path.join(this.cacheDir, 'message.' + Date.now() + '-' + crypto.randomBytes(14).toString('hex')) : false;\n    this.cache = false;\n    this.headers = false;\n    this.bodyHash = false;\n    this.parser = false;\n    this.relaxedBody = false;\n    this.input = input;\n    this.output = output;\n    this.output.usingCache = false;\n    this.hasErrored = false;\n    this.input.on('error', err => {\n      this.hasErrored = true;\n      this.cleanup();\n      output.emit('error', err);\n    });\n  }\n  cleanup() {\n    if (!this.cache || !this.cachePath) {\n      return;\n    }\n    fs.unlink(this.cachePath, () => false);\n  }\n  createReadCache() {\n    // pipe remainings to cache file\n    this.cache = fs.createReadStream(this.cachePath);\n    this.cache.once('error', err => {\n      this.cleanup();\n      this.output.emit('error', err);\n    });\n    this.cache.once('close', () => {\n      this.cleanup();\n    });\n    this.cache.pipe(this.output);\n  }\n  sendNextChunk() {\n    if (this.hasErrored) {\n      return;\n    }\n    if (this.readPos >= this.chunks.length) {\n      if (!this.cache) {\n        return this.output.end();\n      }\n      return this.createReadCache();\n    }\n    let chunk = this.chunks[this.readPos++];\n    if (this.output.write(chunk) === false) {\n      return this.output.once('drain', () => {\n        this.sendNextChunk();\n      });\n    }\n    setImmediate(() => this.sendNextChunk());\n  }\n  sendSignedOutput() {\n    let keyPos = 0;\n    let signNextKey = () => {\n      if (keyPos >= this.keys.length) {\n        this.output.write(this.parser.rawHeaders);\n        return setImmediate(() => this.sendNextChunk());\n      }\n      let key = this.keys[keyPos++];\n      let dkimField = sign(this.headers, this.hashAlgo, this.bodyHash, {\n        domainName: key.domainName,\n        keySelector: key.keySelector,\n        privateKey: key.privateKey,\n        headerFieldNames: this.options.headerFieldNames,\n        skipFields: this.options.skipFields\n      });\n      if (dkimField) {\n        this.output.write(Buffer.from(dkimField + '\\r\\n'));\n      }\n      return setImmediate(signNextKey);\n    };\n    if (this.bodyHash && this.headers) {\n      return signNextKey();\n    }\n    this.output.write(this.parser.rawHeaders);\n    this.sendNextChunk();\n  }\n  createWriteCache() {\n    this.output.usingCache = true;\n    // pipe remainings to cache file\n    this.cache = fs.createWriteStream(this.cachePath);\n    this.cache.once('error', err => {\n      this.cleanup();\n      // drain input\n      this.relaxedBody.unpipe(this.cache);\n      this.relaxedBody.on('readable', () => {\n        while (this.relaxedBody.read() !== null) {\n          // do nothing\n        }\n      });\n      this.hasErrored = true;\n      // emit error\n      this.output.emit('error', err);\n    });\n    this.cache.once('close', () => {\n      this.sendSignedOutput();\n    });\n    this.relaxedBody.removeAllListeners('readable');\n    this.relaxedBody.pipe(this.cache);\n  }\n  signStream() {\n    this.parser = new MessageParser();\n    this.relaxedBody = new RelaxedBody({\n      hashAlgo: this.hashAlgo\n    });\n    this.parser.on('headers', value => {\n      this.headers = value;\n    });\n    this.relaxedBody.on('hash', value => {\n      this.bodyHash = value;\n    });\n    this.relaxedBody.on('readable', () => {\n      let chunk;\n      if (this.cache) {\n        return;\n      }\n      while ((chunk = this.relaxedBody.read()) !== null) {\n        this.chunks.push(chunk);\n        this.chunklen += chunk.length;\n        if (this.chunklen >= this.cacheTreshold && this.cachePath) {\n          return this.createWriteCache();\n        }\n      }\n    });\n    this.relaxedBody.on('end', () => {\n      if (this.cache) {\n        return;\n      }\n      this.sendSignedOutput();\n    });\n    this.parser.pipe(this.relaxedBody);\n    setImmediate(() => this.input.pipe(this.parser));\n  }\n}\nclass DKIM {\n  constructor(options) {\n    this.options = options || {};\n    this.keys = [].concat(this.options.keys || {\n      domainName: options.domainName,\n      keySelector: options.keySelector,\n      privateKey: options.privateKey\n    });\n  }\n  sign(input, extraOptions) {\n    let output = new PassThrough();\n    let inputStream = input;\n    let writeValue = false;\n    if (Buffer.isBuffer(input)) {\n      writeValue = input;\n      inputStream = new PassThrough();\n    } else if (typeof input === 'string') {\n      writeValue = Buffer.from(input);\n      inputStream = new PassThrough();\n    }\n    let options = this.options;\n    if (extraOptions && Object.keys(extraOptions).length) {\n      options = {};\n      Object.keys(this.options || {}).forEach(key => {\n        options[key] = this.options[key];\n      });\n      Object.keys(extraOptions || {}).forEach(key => {\n        if (!(key in options)) {\n          options[key] = extraOptions[key];\n        }\n      });\n    }\n    let signer = new DKIMSigner(options, this.keys, inputStream, output);\n    setImmediate(() => {\n      signer.signStream();\n      if (writeValue) {\n        setImmediate(() => {\n          inputStream.end(writeValue);\n        });\n      }\n    });\n    return output;\n  }\n}\nmodule.exports = DKIM;","map":{"version":3,"names":["MessageParser","require","RelaxedBody","sign","PassThrough","fs","path","crypto","DKIM_ALGO","MAX_MESSAGE_SIZE","DKIMSigner","constructor","options","keys","input","output","cacheTreshold","Number","hashAlgo","cacheDir","chunks","chunklen","readPos","cachePath","join","Date","now","randomBytes","toString","cache","headers","bodyHash","parser","relaxedBody","usingCache","hasErrored","on","err","cleanup","emit","unlink","createReadCache","createReadStream","once","pipe","sendNextChunk","length","end","chunk","write","setImmediate","sendSignedOutput","keyPos","signNextKey","rawHeaders","key","dkimField","domainName","keySelector","privateKey","headerFieldNames","skipFields","Buffer","from","createWriteCache","createWriteStream","unpipe","read","removeAllListeners","signStream","value","push","DKIM","concat","extraOptions","inputStream","writeValue","isBuffer","Object","forEach","signer","module","exports"],"sources":["C:/Users/deiby/Desktop/cloneWebCursos/paginacursos/node_modules/nodemailer/lib/dkim/index.js"],"sourcesContent":["'use strict';\n\n// FIXME:\n// replace this Transform mess with a method that pipes input argument to output argument\n\nconst MessageParser = require('./message-parser');\nconst RelaxedBody = require('./relaxed-body');\nconst sign = require('./sign');\nconst PassThrough = require('stream').PassThrough;\nconst fs = require('fs');\nconst path = require('path');\nconst crypto = require('crypto');\n\nconst DKIM_ALGO = 'sha256';\nconst MAX_MESSAGE_SIZE = 128 * 1024; // buffer messages larger than this to disk\n\n/*\n// Usage:\n\nlet dkim = new DKIM({\n    domainName: 'example.com',\n    keySelector: 'key-selector',\n    privateKey,\n    cacheDir: '/tmp'\n});\ndkim.sign(input).pipe(process.stdout);\n\n// Where inputStream is a rfc822 message (either a stream, string or Buffer)\n// and outputStream is a DKIM signed rfc822 message\n*/\n\nclass DKIMSigner {\n    constructor(options, keys, input, output) {\n        this.options = options || {};\n        this.keys = keys;\n\n        this.cacheTreshold = Number(this.options.cacheTreshold) || MAX_MESSAGE_SIZE;\n        this.hashAlgo = this.options.hashAlgo || DKIM_ALGO;\n\n        this.cacheDir = this.options.cacheDir || false;\n\n        this.chunks = [];\n        this.chunklen = 0;\n        this.readPos = 0;\n        this.cachePath = this.cacheDir ? path.join(this.cacheDir, 'message.' + Date.now() + '-' + crypto.randomBytes(14).toString('hex')) : false;\n        this.cache = false;\n\n        this.headers = false;\n        this.bodyHash = false;\n        this.parser = false;\n        this.relaxedBody = false;\n\n        this.input = input;\n        this.output = output;\n        this.output.usingCache = false;\n\n        this.hasErrored = false;\n\n        this.input.on('error', err => {\n            this.hasErrored = true;\n            this.cleanup();\n            output.emit('error', err);\n        });\n    }\n\n    cleanup() {\n        if (!this.cache || !this.cachePath) {\n            return;\n        }\n        fs.unlink(this.cachePath, () => false);\n    }\n\n    createReadCache() {\n        // pipe remainings to cache file\n        this.cache = fs.createReadStream(this.cachePath);\n        this.cache.once('error', err => {\n            this.cleanup();\n            this.output.emit('error', err);\n        });\n        this.cache.once('close', () => {\n            this.cleanup();\n        });\n        this.cache.pipe(this.output);\n    }\n\n    sendNextChunk() {\n        if (this.hasErrored) {\n            return;\n        }\n\n        if (this.readPos >= this.chunks.length) {\n            if (!this.cache) {\n                return this.output.end();\n            }\n            return this.createReadCache();\n        }\n        let chunk = this.chunks[this.readPos++];\n        if (this.output.write(chunk) === false) {\n            return this.output.once('drain', () => {\n                this.sendNextChunk();\n            });\n        }\n        setImmediate(() => this.sendNextChunk());\n    }\n\n    sendSignedOutput() {\n        let keyPos = 0;\n        let signNextKey = () => {\n            if (keyPos >= this.keys.length) {\n                this.output.write(this.parser.rawHeaders);\n                return setImmediate(() => this.sendNextChunk());\n            }\n            let key = this.keys[keyPos++];\n            let dkimField = sign(this.headers, this.hashAlgo, this.bodyHash, {\n                domainName: key.domainName,\n                keySelector: key.keySelector,\n                privateKey: key.privateKey,\n                headerFieldNames: this.options.headerFieldNames,\n                skipFields: this.options.skipFields\n            });\n            if (dkimField) {\n                this.output.write(Buffer.from(dkimField + '\\r\\n'));\n            }\n            return setImmediate(signNextKey);\n        };\n\n        if (this.bodyHash && this.headers) {\n            return signNextKey();\n        }\n\n        this.output.write(this.parser.rawHeaders);\n        this.sendNextChunk();\n    }\n\n    createWriteCache() {\n        this.output.usingCache = true;\n        // pipe remainings to cache file\n        this.cache = fs.createWriteStream(this.cachePath);\n        this.cache.once('error', err => {\n            this.cleanup();\n            // drain input\n            this.relaxedBody.unpipe(this.cache);\n            this.relaxedBody.on('readable', () => {\n                while (this.relaxedBody.read() !== null) {\n                    // do nothing\n                }\n            });\n            this.hasErrored = true;\n            // emit error\n            this.output.emit('error', err);\n        });\n        this.cache.once('close', () => {\n            this.sendSignedOutput();\n        });\n        this.relaxedBody.removeAllListeners('readable');\n        this.relaxedBody.pipe(this.cache);\n    }\n\n    signStream() {\n        this.parser = new MessageParser();\n        this.relaxedBody = new RelaxedBody({\n            hashAlgo: this.hashAlgo\n        });\n\n        this.parser.on('headers', value => {\n            this.headers = value;\n        });\n\n        this.relaxedBody.on('hash', value => {\n            this.bodyHash = value;\n        });\n\n        this.relaxedBody.on('readable', () => {\n            let chunk;\n            if (this.cache) {\n                return;\n            }\n            while ((chunk = this.relaxedBody.read()) !== null) {\n                this.chunks.push(chunk);\n                this.chunklen += chunk.length;\n                if (this.chunklen >= this.cacheTreshold && this.cachePath) {\n                    return this.createWriteCache();\n                }\n            }\n        });\n\n        this.relaxedBody.on('end', () => {\n            if (this.cache) {\n                return;\n            }\n            this.sendSignedOutput();\n        });\n\n        this.parser.pipe(this.relaxedBody);\n        setImmediate(() => this.input.pipe(this.parser));\n    }\n}\n\nclass DKIM {\n    constructor(options) {\n        this.options = options || {};\n        this.keys = [].concat(\n            this.options.keys || {\n                domainName: options.domainName,\n                keySelector: options.keySelector,\n                privateKey: options.privateKey\n            }\n        );\n    }\n\n    sign(input, extraOptions) {\n        let output = new PassThrough();\n        let inputStream = input;\n        let writeValue = false;\n\n        if (Buffer.isBuffer(input)) {\n            writeValue = input;\n            inputStream = new PassThrough();\n        } else if (typeof input === 'string') {\n            writeValue = Buffer.from(input);\n            inputStream = new PassThrough();\n        }\n\n        let options = this.options;\n        if (extraOptions && Object.keys(extraOptions).length) {\n            options = {};\n            Object.keys(this.options || {}).forEach(key => {\n                options[key] = this.options[key];\n            });\n            Object.keys(extraOptions || {}).forEach(key => {\n                if (!(key in options)) {\n                    options[key] = extraOptions[key];\n                }\n            });\n        }\n\n        let signer = new DKIMSigner(options, this.keys, inputStream, output);\n        setImmediate(() => {\n            signer.signStream();\n            if (writeValue) {\n                setImmediate(() => {\n                    inputStream.end(writeValue);\n                });\n            }\n        });\n\n        return output;\n    }\n}\n\nmodule.exports = DKIM;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}